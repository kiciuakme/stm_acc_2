
akcelerometr_cwaj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c84  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e8  08007e28  08007e28  00017e28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008110  08008110  00020254  2**0
                  CONTENTS
  4 .ARM          00000008  08008110  08008110  00018110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008118  08008118  00020254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008118  08008118  00018118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800811c  0800811c  0001811c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000254  20000000  08008120  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  20000254  08008374  00020254  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003b0  08008374  000203b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020254  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ac26  00000000  00000000  00020284  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001912  00000000  00000000  0002aeaa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008b0  00000000  00000000  0002c7c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007e8  00000000  00000000  0002d070  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015bfd  00000000  00000000  0002d858  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007411  00000000  00000000  00043455  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00087076  00000000  00000000  0004a866  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d18dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002fd4  00000000  00000000  000d1958  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000254 	.word	0x20000254
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007e0c 	.word	0x08007e0c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000258 	.word	0x20000258
 80001dc:	08007e0c 	.word	0x08007e0c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b972 	b.w	8000f54 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9e08      	ldr	r6, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	4688      	mov	r8, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14b      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4615      	mov	r5, r2
 8000c9a:	d967      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0720 	rsb	r7, r2, #32
 8000ca6:	fa01 f302 	lsl.w	r3, r1, r2
 8000caa:	fa20 f707 	lsr.w	r7, r0, r7
 8000cae:	4095      	lsls	r5, r2
 8000cb0:	ea47 0803 	orr.w	r8, r7, r3
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cc0:	fa1f fc85 	uxth.w	ip, r5
 8000cc4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cc8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ccc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18eb      	adds	r3, r5, r3
 8000cd6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cda:	f080 811b 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8118 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000ce4:	3f02      	subs	r7, #2
 8000ce6:	442b      	add	r3, r5
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cf0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cfc:	45a4      	cmp	ip, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	192c      	adds	r4, r5, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d06:	f080 8107 	bcs.w	8000f18 <__udivmoddi4+0x290>
 8000d0a:	45a4      	cmp	ip, r4
 8000d0c:	f240 8104 	bls.w	8000f18 <__udivmoddi4+0x290>
 8000d10:	3802      	subs	r0, #2
 8000d12:	442c      	add	r4, r5
 8000d14:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d18:	eba4 040c 	sub.w	r4, r4, ip
 8000d1c:	2700      	movs	r7, #0
 8000d1e:	b11e      	cbz	r6, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c6 4300 	strd	r4, r3, [r6]
 8000d28:	4639      	mov	r1, r7
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0xbe>
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	f000 80eb 	beq.w	8000f0e <__udivmoddi4+0x286>
 8000d38:	2700      	movs	r7, #0
 8000d3a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d3e:	4638      	mov	r0, r7
 8000d40:	4639      	mov	r1, r7
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f783 	clz	r7, r3
 8000d4a:	2f00      	cmp	r7, #0
 8000d4c:	d147      	bne.n	8000dde <__udivmoddi4+0x156>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0xd0>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80fa 	bhi.w	8000f4c <__udivmoddi4+0x2c4>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	4698      	mov	r8, r3
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	d0e0      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000d66:	e9c6 4800 	strd	r4, r8, [r6]
 8000d6a:	e7dd      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000d6c:	b902      	cbnz	r2, 8000d70 <__udivmoddi4+0xe8>
 8000d6e:	deff      	udf	#255	; 0xff
 8000d70:	fab2 f282 	clz	r2, r2
 8000d74:	2a00      	cmp	r2, #0
 8000d76:	f040 808f 	bne.w	8000e98 <__udivmoddi4+0x210>
 8000d7a:	1b49      	subs	r1, r1, r5
 8000d7c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d80:	fa1f f885 	uxth.w	r8, r5
 8000d84:	2701      	movs	r7, #1
 8000d86:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d8a:	0c23      	lsrs	r3, r4, #16
 8000d8c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb08 f10c 	mul.w	r1, r8, ip
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x124>
 8000d9c:	18eb      	adds	r3, r5, r3
 8000d9e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x122>
 8000da4:	4299      	cmp	r1, r3
 8000da6:	f200 80cd 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000daa:	4684      	mov	ip, r0
 8000dac:	1a59      	subs	r1, r3, r1
 8000dae:	b2a3      	uxth	r3, r4
 8000db0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000db4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000db8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dbc:	fb08 f800 	mul.w	r8, r8, r0
 8000dc0:	45a0      	cmp	r8, r4
 8000dc2:	d907      	bls.n	8000dd4 <__udivmoddi4+0x14c>
 8000dc4:	192c      	adds	r4, r5, r4
 8000dc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x14a>
 8000dcc:	45a0      	cmp	r8, r4
 8000dce:	f200 80b6 	bhi.w	8000f3e <__udivmoddi4+0x2b6>
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	eba4 0408 	sub.w	r4, r4, r8
 8000dd8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ddc:	e79f      	b.n	8000d1e <__udivmoddi4+0x96>
 8000dde:	f1c7 0c20 	rsb	ip, r7, #32
 8000de2:	40bb      	lsls	r3, r7
 8000de4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000de8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dec:	fa01 f407 	lsl.w	r4, r1, r7
 8000df0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000df4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000df8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dfc:	4325      	orrs	r5, r4
 8000dfe:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e02:	0c2c      	lsrs	r4, r5, #16
 8000e04:	fb08 3319 	mls	r3, r8, r9, r3
 8000e08:	fa1f fa8e 	uxth.w	sl, lr
 8000e0c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e10:	fb09 f40a 	mul.w	r4, r9, sl
 8000e14:	429c      	cmp	r4, r3
 8000e16:	fa02 f207 	lsl.w	r2, r2, r7
 8000e1a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e1e:	d90b      	bls.n	8000e38 <__udivmoddi4+0x1b0>
 8000e20:	eb1e 0303 	adds.w	r3, lr, r3
 8000e24:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e28:	f080 8087 	bcs.w	8000f3a <__udivmoddi4+0x2b2>
 8000e2c:	429c      	cmp	r4, r3
 8000e2e:	f240 8084 	bls.w	8000f3a <__udivmoddi4+0x2b2>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4473      	add	r3, lr
 8000e38:	1b1b      	subs	r3, r3, r4
 8000e3a:	b2ad      	uxth	r5, r5
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3310 	mls	r3, r8, r0, r3
 8000e44:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e48:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e4c:	45a2      	cmp	sl, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x1da>
 8000e50:	eb1e 0404 	adds.w	r4, lr, r4
 8000e54:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e58:	d26b      	bcs.n	8000f32 <__udivmoddi4+0x2aa>
 8000e5a:	45a2      	cmp	sl, r4
 8000e5c:	d969      	bls.n	8000f32 <__udivmoddi4+0x2aa>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4474      	add	r4, lr
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6a:	eba4 040a 	sub.w	r4, r4, sl
 8000e6e:	454c      	cmp	r4, r9
 8000e70:	46c2      	mov	sl, r8
 8000e72:	464b      	mov	r3, r9
 8000e74:	d354      	bcc.n	8000f20 <__udivmoddi4+0x298>
 8000e76:	d051      	beq.n	8000f1c <__udivmoddi4+0x294>
 8000e78:	2e00      	cmp	r6, #0
 8000e7a:	d069      	beq.n	8000f50 <__udivmoddi4+0x2c8>
 8000e7c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e80:	eb64 0403 	sbc.w	r4, r4, r3
 8000e84:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e88:	40fd      	lsrs	r5, r7
 8000e8a:	40fc      	lsrs	r4, r7
 8000e8c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e90:	e9c6 5400 	strd	r5, r4, [r6]
 8000e94:	2700      	movs	r7, #0
 8000e96:	e747      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f703 	lsr.w	r7, r0, r3
 8000ea0:	4095      	lsls	r5, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eaa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eae:	4338      	orrs	r0, r7
 8000eb0:	0c01      	lsrs	r1, r0, #16
 8000eb2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000eb6:	fa1f f885 	uxth.w	r8, r5
 8000eba:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ebe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ec2:	fb07 f308 	mul.w	r3, r7, r8
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ecc:	d907      	bls.n	8000ede <__udivmoddi4+0x256>
 8000ece:	1869      	adds	r1, r5, r1
 8000ed0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ed4:	d22f      	bcs.n	8000f36 <__udivmoddi4+0x2ae>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	d92d      	bls.n	8000f36 <__udivmoddi4+0x2ae>
 8000eda:	3f02      	subs	r7, #2
 8000edc:	4429      	add	r1, r5
 8000ede:	1acb      	subs	r3, r1, r3
 8000ee0:	b281      	uxth	r1, r0
 8000ee2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eee:	fb00 f308 	mul.w	r3, r0, r8
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x27e>
 8000ef6:	1869      	adds	r1, r5, r1
 8000ef8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000efc:	d217      	bcs.n	8000f2e <__udivmoddi4+0x2a6>
 8000efe:	428b      	cmp	r3, r1
 8000f00:	d915      	bls.n	8000f2e <__udivmoddi4+0x2a6>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4429      	add	r1, r5
 8000f06:	1ac9      	subs	r1, r1, r3
 8000f08:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f0c:	e73b      	b.n	8000d86 <__udivmoddi4+0xfe>
 8000f0e:	4637      	mov	r7, r6
 8000f10:	4630      	mov	r0, r6
 8000f12:	e709      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f14:	4607      	mov	r7, r0
 8000f16:	e6e7      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f18:	4618      	mov	r0, r3
 8000f1a:	e6fb      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f1c:	4541      	cmp	r1, r8
 8000f1e:	d2ab      	bcs.n	8000e78 <__udivmoddi4+0x1f0>
 8000f20:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f24:	eb69 020e 	sbc.w	r2, r9, lr
 8000f28:	3801      	subs	r0, #1
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	e7a4      	b.n	8000e78 <__udivmoddi4+0x1f0>
 8000f2e:	4660      	mov	r0, ip
 8000f30:	e7e9      	b.n	8000f06 <__udivmoddi4+0x27e>
 8000f32:	4618      	mov	r0, r3
 8000f34:	e795      	b.n	8000e62 <__udivmoddi4+0x1da>
 8000f36:	4667      	mov	r7, ip
 8000f38:	e7d1      	b.n	8000ede <__udivmoddi4+0x256>
 8000f3a:	4681      	mov	r9, r0
 8000f3c:	e77c      	b.n	8000e38 <__udivmoddi4+0x1b0>
 8000f3e:	3802      	subs	r0, #2
 8000f40:	442c      	add	r4, r5
 8000f42:	e747      	b.n	8000dd4 <__udivmoddi4+0x14c>
 8000f44:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f48:	442b      	add	r3, r5
 8000f4a:	e72f      	b.n	8000dac <__udivmoddi4+0x124>
 8000f4c:	4638      	mov	r0, r7
 8000f4e:	e708      	b.n	8000d62 <__udivmoddi4+0xda>
 8000f50:	4637      	mov	r7, r6
 8000f52:	e6e9      	b.n	8000d28 <__udivmoddi4+0xa0>

08000f54 <__aeabi_idiv0>:
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop

08000f58 <set_s7_output>:
	}
	HAL_Delay(1000);
}

void set_s7_output(float display_value, uint8_t seg_choice) //seg_choice in 0...3
{
 8000f58:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f5c:	b090      	sub	sp, #64	; 0x40
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	ed87 0a01 	vstr	s0, [r7, #4]
 8000f64:	4603      	mov	r3, r0
 8000f66:	70fb      	strb	r3, [r7, #3]
			0b00000000, // 8
			0b00010000  // 9
	};

	// digit position choice
	for(uint8_t seg_ix = 0; seg_ix < 4; ++seg_ix)
 8000f68:	2300      	movs	r3, #0
 8000f6a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8000f6e:	e016      	b.n	8000f9e <set_s7_output+0x46>
	{
		GPIO_TypeDef* seg7_gpio_port = seg_choice2seg_gpio_port[seg_ix];
 8000f70:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000f74:	4a8c      	ldr	r2, [pc, #560]	; (80011a8 <set_s7_output+0x250>)
 8000f76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f7a:	613b      	str	r3, [r7, #16]
		uint16_t seg7_pin = seg_choice2seg_pin[seg_ix];
 8000f7c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000f80:	4a8a      	ldr	r2, [pc, #552]	; (80011ac <set_s7_output+0x254>)
 8000f82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f86:	81fb      	strh	r3, [r7, #14]
		HAL_GPIO_WritePin(seg7_gpio_port, seg7_pin, SET);
 8000f88:	89fb      	ldrh	r3, [r7, #14]
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	6938      	ldr	r0, [r7, #16]
 8000f90:	f001 fc42 	bl	8002818 <HAL_GPIO_WritePin>
	for(uint8_t seg_ix = 0; seg_ix < 4; ++seg_ix)
 8000f94:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000f98:	3301      	adds	r3, #1
 8000f9a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8000f9e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000fa2:	2b03      	cmp	r3, #3
 8000fa4:	d9e4      	bls.n	8000f70 <set_s7_output+0x18>
	}
	GPIO_TypeDef* seg7_gpio_port = seg_choice2seg_gpio_port[3-seg_choice];
 8000fa6:	78fb      	ldrb	r3, [r7, #3]
 8000fa8:	f1c3 0303 	rsb	r3, r3, #3
 8000fac:	4a7e      	ldr	r2, [pc, #504]	; (80011a8 <set_s7_output+0x250>)
 8000fae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fb2:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t seg7_pin = seg_choice2seg_pin[3-seg_choice];
 8000fb4:	78fb      	ldrb	r3, [r7, #3]
 8000fb6:	f1c3 0303 	rsb	r3, r3, #3
 8000fba:	4a7c      	ldr	r2, [pc, #496]	; (80011ac <set_s7_output+0x254>)
 8000fbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fc0:	84fb      	strh	r3, [r7, #38]	; 0x26
	HAL_GPIO_WritePin(seg7_gpio_port, seg7_pin, RESET);
 8000fc2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000fca:	f001 fc25 	bl	8002818 <HAL_GPIO_WritePin>

	// digit show choice
	double minus_space_shift;
	if(display_value < (double)(+0))
 8000fce:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fd2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fda:	d50b      	bpl.n	8000ff4 <set_s7_output+0x9c>
	{
		display_value *= -1;
 8000fdc:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fe0:	eef1 7a67 	vneg.f32	s15, s15
 8000fe4:	edc7 7a01 	vstr	s15, [r7, #4]
		minus_space_shift = 1;
 8000fe8:	f04f 0300 	mov.w	r3, #0
 8000fec:	4c70      	ldr	r4, [pc, #448]	; (80011b0 <set_s7_output+0x258>)
 8000fee:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
 8000ff2:	e004      	b.n	8000ffe <set_s7_output+0xa6>
//			HAL_GPIO_WritePin(SEG7_G_GPIO_Port, SEG7_P_Pin, SET);
//			HAL_GPIO_WritePin(SEG7_P_GPIO_Port, SEG7_P_Pin, RESET);
//			return;
//		}
	}
	else minus_space_shift = 1;
 8000ff4:	f04f 0300 	mov.w	r3, #0
 8000ff8:	4c6d      	ldr	r4, [pc, #436]	; (80011b0 <set_s7_output+0x258>)
 8000ffa:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

	uint8_t display_value_rank10 = (int)log10(display_value);
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f7ff faaa 	bl	8000558 <__aeabi_f2d>
 8001004:	4603      	mov	r3, r0
 8001006:	460c      	mov	r4, r1
 8001008:	ec44 3b10 	vmov	d0, r3, r4
 800100c:	f005 fbe8 	bl	80067e0 <log10>
 8001010:	ec54 3b10 	vmov	r3, r4, d0
 8001014:	4618      	mov	r0, r3
 8001016:	4621      	mov	r1, r4
 8001018:	f7ff fda6 	bl	8000b68 <__aeabi_d2iz>
 800101c:	4603      	mov	r3, r0
 800101e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if(display_value_rank10 < 0) display_value_rank10 = 0;
	if(display_value_rank10 > 3) display_value_rank10 = 3;
 8001022:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001026:	2b03      	cmp	r3, #3
 8001028:	d902      	bls.n	8001030 <set_s7_output+0xd8>
 800102a:	2303      	movs	r3, #3
 800102c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	int rank_coeff = pow(10, display_value_rank10);
 8001030:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff fa6d 	bl	8000514 <__aeabi_ui2d>
 800103a:	4603      	mov	r3, r0
 800103c:	460c      	mov	r4, r1
 800103e:	ec44 3b11 	vmov	d1, r3, r4
 8001042:	ed9f 0b57 	vldr	d0, [pc, #348]	; 80011a0 <set_s7_output+0x248>
 8001046:	f005 fc4b 	bl	80068e0 <pow>
 800104a:	ec54 3b10 	vmov	r3, r4, d0
 800104e:	4618      	mov	r0, r3
 8001050:	4621      	mov	r1, r4
 8001052:	f7ff fd89 	bl	8000b68 <__aeabi_d2iz>
 8001056:	4603      	mov	r3, r0
 8001058:	623b      	str	r3, [r7, #32]

	uint8_t digit = ((int) (display_value / (seg_choice2int_coeff[seg_choice] * rank_coeff * minus_space_shift))) % 10;
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f7ff fa7c 	bl	8000558 <__aeabi_f2d>
 8001060:	4680      	mov	r8, r0
 8001062:	4689      	mov	r9, r1
 8001064:	78fb      	ldrb	r3, [r7, #3]
 8001066:	4a53      	ldr	r2, [pc, #332]	; (80011b4 <set_s7_output+0x25c>)
 8001068:	00db      	lsls	r3, r3, #3
 800106a:	4413      	add	r3, r2
 800106c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001070:	6a38      	ldr	r0, [r7, #32]
 8001072:	f7ff fa5f 	bl	8000534 <__aeabi_i2d>
 8001076:	4602      	mov	r2, r0
 8001078:	460b      	mov	r3, r1
 800107a:	4620      	mov	r0, r4
 800107c:	4629      	mov	r1, r5
 800107e:	f7ff fac3 	bl	8000608 <__aeabi_dmul>
 8001082:	4603      	mov	r3, r0
 8001084:	460c      	mov	r4, r1
 8001086:	4618      	mov	r0, r3
 8001088:	4621      	mov	r1, r4
 800108a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800108e:	f7ff fabb 	bl	8000608 <__aeabi_dmul>
 8001092:	4603      	mov	r3, r0
 8001094:	460c      	mov	r4, r1
 8001096:	461a      	mov	r2, r3
 8001098:	4623      	mov	r3, r4
 800109a:	4640      	mov	r0, r8
 800109c:	4649      	mov	r1, r9
 800109e:	f7ff fbdd 	bl	800085c <__aeabi_ddiv>
 80010a2:	4603      	mov	r3, r0
 80010a4:	460c      	mov	r4, r1
 80010a6:	4618      	mov	r0, r3
 80010a8:	4621      	mov	r1, r4
 80010aa:	f7ff fd5d 	bl	8000b68 <__aeabi_d2iz>
 80010ae:	4601      	mov	r1, r0
 80010b0:	4b41      	ldr	r3, [pc, #260]	; (80011b8 <set_s7_output+0x260>)
 80010b2:	fb83 2301 	smull	r2, r3, r3, r1
 80010b6:	109a      	asrs	r2, r3, #2
 80010b8:	17cb      	asrs	r3, r1, #31
 80010ba:	1ad2      	subs	r2, r2, r3
 80010bc:	4613      	mov	r3, r2
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	4413      	add	r3, r2
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	1aca      	subs	r2, r1, r3
 80010c6:	4613      	mov	r3, r2
 80010c8:	77fb      	strb	r3, [r7, #31]
	uint8_t seg_binding = digit2seg_binding[digit];
 80010ca:	7ffb      	ldrb	r3, [r7, #31]
 80010cc:	4a3b      	ldr	r2, [pc, #236]	; (80011bc <set_s7_output+0x264>)
 80010ce:	5cd3      	ldrb	r3, [r2, r3]
 80010d0:	77bb      	strb	r3, [r7, #30]

	for(uint8_t bitshift = 0; bitshift < 7; ++bitshift)
 80010d2:	2300      	movs	r3, #0
 80010d4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80010d8:	e02a      	b.n	8001130 <set_s7_output+0x1d8>
	{
		uint8_t current_seg7_pin_state_flag_extractor = 1 << bitshift;
 80010da:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80010de:	2201      	movs	r2, #1
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	777b      	strb	r3, [r7, #29]
		GPIO_PinState current_seg7_pin_state;
		if(seg_binding & current_seg7_pin_state_flag_extractor)
 80010e6:	7fba      	ldrb	r2, [r7, #30]
 80010e8:	7f7b      	ldrb	r3, [r7, #29]
 80010ea:	4013      	ands	r3, r2
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d003      	beq.n	80010fa <set_s7_output+0x1a2>
			current_seg7_pin_state = RESET;
 80010f2:	2300      	movs	r3, #0
 80010f4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 80010f8:	e002      	b.n	8001100 <set_s7_output+0x1a8>
		else current_seg7_pin_state = SET;
 80010fa:	2301      	movs	r3, #1
 80010fc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

		GPIO_TypeDef* current_seg7_gpio_port = seg_binding_bitshift2seg_gpio_port[bitshift];
 8001100:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001104:	4a2e      	ldr	r2, [pc, #184]	; (80011c0 <set_s7_output+0x268>)
 8001106:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800110a:	61bb      	str	r3, [r7, #24]
		uint16_t current_seg7_pin = seg_binding_bitshift2seg_pin[bitshift];
 800110c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001110:	4a2c      	ldr	r2, [pc, #176]	; (80011c4 <set_s7_output+0x26c>)
 8001112:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001116:	82fb      	strh	r3, [r7, #22]

		HAL_GPIO_WritePin(current_seg7_gpio_port,
 8001118:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800111c:	8afb      	ldrh	r3, [r7, #22]
 800111e:	4619      	mov	r1, r3
 8001120:	69b8      	ldr	r0, [r7, #24]
 8001122:	f001 fb79 	bl	8002818 <HAL_GPIO_WritePin>
	for(uint8_t bitshift = 0; bitshift < 7; ++bitshift)
 8001126:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800112a:	3301      	adds	r3, #1
 800112c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8001130:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001134:	2b06      	cmp	r3, #6
 8001136:	d9d0      	bls.n	80010da <set_s7_output+0x182>
				current_seg7_pin,
				current_seg7_pin_state);
	}

	if(seg_choice2int_coeff[seg_choice] * rank_coeff * minus_space_shift == 1)
 8001138:	78fb      	ldrb	r3, [r7, #3]
 800113a:	4a1e      	ldr	r2, [pc, #120]	; (80011b4 <set_s7_output+0x25c>)
 800113c:	00db      	lsls	r3, r3, #3
 800113e:	4413      	add	r3, r2
 8001140:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001144:	6a38      	ldr	r0, [r7, #32]
 8001146:	f7ff f9f5 	bl	8000534 <__aeabi_i2d>
 800114a:	4602      	mov	r2, r0
 800114c:	460b      	mov	r3, r1
 800114e:	4620      	mov	r0, r4
 8001150:	4629      	mov	r1, r5
 8001152:	f7ff fa59 	bl	8000608 <__aeabi_dmul>
 8001156:	4603      	mov	r3, r0
 8001158:	460c      	mov	r4, r1
 800115a:	4618      	mov	r0, r3
 800115c:	4621      	mov	r1, r4
 800115e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001162:	f7ff fa51 	bl	8000608 <__aeabi_dmul>
 8001166:	4603      	mov	r3, r0
 8001168:	460c      	mov	r4, r1
 800116a:	4618      	mov	r0, r3
 800116c:	4621      	mov	r1, r4
 800116e:	f04f 0200 	mov.w	r2, #0
 8001172:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <set_s7_output+0x258>)
 8001174:	f7ff fcb0 	bl	8000ad8 <__aeabi_dcmpeq>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d005      	beq.n	800118a <set_s7_output+0x232>
		HAL_GPIO_WritePin(SEG7_P_GPIO_Port, SEG7_P_Pin, SET);
 800117e:	2201      	movs	r2, #1
 8001180:	2180      	movs	r1, #128	; 0x80
 8001182:	4811      	ldr	r0, [pc, #68]	; (80011c8 <set_s7_output+0x270>)
 8001184:	f001 fb48 	bl	8002818 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(SEG7_P_GPIO_Port, SEG7_P_Pin, RESET);



}
 8001188:	e004      	b.n	8001194 <set_s7_output+0x23c>
	else HAL_GPIO_WritePin(SEG7_P_GPIO_Port, SEG7_P_Pin, RESET);
 800118a:	2200      	movs	r2, #0
 800118c:	2180      	movs	r1, #128	; 0x80
 800118e:	480e      	ldr	r0, [pc, #56]	; (80011c8 <set_s7_output+0x270>)
 8001190:	f001 fb42 	bl	8002818 <HAL_GPIO_WritePin>
}
 8001194:	bf00      	nop
 8001196:	3740      	adds	r7, #64	; 0x40
 8001198:	46bd      	mov	sp, r7
 800119a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800119e:	bf00      	nop
 80011a0:	00000000 	.word	0x00000000
 80011a4:	40240000 	.word	0x40240000
 80011a8:	20000000 	.word	0x20000000
 80011ac:	20000010 	.word	0x20000010
 80011b0:	3ff00000 	.word	0x3ff00000
 80011b4:	20000018 	.word	0x20000018
 80011b8:	66666667 	.word	0x66666667
 80011bc:	20000038 	.word	0x20000038
 80011c0:	20000044 	.word	0x20000044
 80011c4:	20000064 	.word	0x20000064
 80011c8:	40020800 	.word	0x40020800

080011cc <Com_SPI_Write>:

void Com_SPI_Write(uint8_t add, uint8_t val){
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b086      	sub	sp, #24
 80011d0:	af02      	add	r7, sp, #8
 80011d2:	4603      	mov	r3, r0
 80011d4:	460a      	mov	r2, r1
 80011d6:	71fb      	strb	r3, [r7, #7]
 80011d8:	4613      	mov	r3, r2
 80011da:	71bb      	strb	r3, [r7, #6]
    uint8_t DataReceived[2];
    uint8_t DataToTransmit[2];

    DataToTransmit[0]=add;
 80011dc:	79fb      	ldrb	r3, [r7, #7]
 80011de:	723b      	strb	r3, [r7, #8]
    DataToTransmit[1]=val;
 80011e0:	79bb      	ldrb	r3, [r7, #6]
 80011e2:	727b      	strb	r3, [r7, #9]

    HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 80011e4:	2200      	movs	r2, #0
 80011e6:	2110      	movs	r1, #16
 80011e8:	480b      	ldr	r0, [pc, #44]	; (8001218 <Com_SPI_Write+0x4c>)
 80011ea:	f001 fb15 	bl	8002818 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1, DataToTransmit, DataReceived, 2, HAL_MAX_DELAY);
 80011ee:	f107 020c 	add.w	r2, r7, #12
 80011f2:	f107 0108 	add.w	r1, r7, #8
 80011f6:	f04f 33ff 	mov.w	r3, #4294967295
 80011fa:	9300      	str	r3, [sp, #0]
 80011fc:	2302      	movs	r3, #2
 80011fe:	4807      	ldr	r0, [pc, #28]	; (800121c <Com_SPI_Write+0x50>)
 8001200:	f001 ffea 	bl	80031d8 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 8001204:	2201      	movs	r2, #1
 8001206:	2110      	movs	r1, #16
 8001208:	4803      	ldr	r0, [pc, #12]	; (8001218 <Com_SPI_Write+0x4c>)
 800120a:	f001 fb05 	bl	8002818 <HAL_GPIO_WritePin>
}
 800120e:	bf00      	nop
 8001210:	3710      	adds	r7, #16
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	40020000 	.word	0x40020000
 800121c:	20000310 	.word	0x20000310

08001220 <Com_SPI_Read>:

void Com_SPI_Read(uint8_t reg, uint8_t* rec){
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af02      	add	r7, sp, #8
 8001226:	4603      	mov	r3, r0
 8001228:	6039      	str	r1, [r7, #0]
 800122a:	71fb      	strb	r3, [r7, #7]
    uint8_t DataReceived[2];
    uint8_t DataToTransmit[2];

    DataToTransmit[0]=LIS35_READ|reg;
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001232:	b2db      	uxtb	r3, r3
 8001234:	723b      	strb	r3, [r7, #8]
    DataToTransmit[1]=0;
 8001236:	2300      	movs	r3, #0
 8001238:	727b      	strb	r3, [r7, #9]

    HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 800123a:	2200      	movs	r2, #0
 800123c:	2110      	movs	r1, #16
 800123e:	480d      	ldr	r0, [pc, #52]	; (8001274 <Com_SPI_Read+0x54>)
 8001240:	f001 faea 	bl	8002818 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1, DataToTransmit, DataReceived, 2, HAL_MAX_DELAY);
 8001244:	f107 020c 	add.w	r2, r7, #12
 8001248:	f107 0108 	add.w	r1, r7, #8
 800124c:	f04f 33ff 	mov.w	r3, #4294967295
 8001250:	9300      	str	r3, [sp, #0]
 8001252:	2302      	movs	r3, #2
 8001254:	4808      	ldr	r0, [pc, #32]	; (8001278 <Com_SPI_Read+0x58>)
 8001256:	f001 ffbf 	bl	80031d8 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 800125a:	2201      	movs	r2, #1
 800125c:	2110      	movs	r1, #16
 800125e:	4805      	ldr	r0, [pc, #20]	; (8001274 <Com_SPI_Read+0x54>)
 8001260:	f001 fada 	bl	8002818 <HAL_GPIO_WritePin>

    *rec = DataReceived[1];
 8001264:	7b7a      	ldrb	r2, [r7, #13]
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	701a      	strb	r2, [r3, #0]
}
 800126a:	bf00      	nop
 800126c:	3710      	adds	r7, #16
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	40020000 	.word	0x40020000
 8001278:	20000310 	.word	0x20000310
 800127c:	00000000 	.word	0x00000000

08001280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001280:	b590      	push	{r4, r7, lr}
 8001282:	b089      	sub	sp, #36	; 0x24
 8001284:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001286:	f000 fc0f 	bl	8001aa8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800128a:	f000 f8a1 	bl	80013d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800128e:	f000 f99d 	bl	80015cc <MX_GPIO_Init>
  MX_DMA_Init();
 8001292:	f000 f97b 	bl	800158c <MX_DMA_Init>
  MX_SPI1_Init();
 8001296:	f000 f905 	bl	80014a4 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 800129a:	f000 f94d 	bl	8001538 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  uint8_t seg_choice = 0;
 800129e:	2300      	movs	r3, #0
 80012a0:	75fb      	strb	r3, [r7, #23]
  int delay_mgr_ctr = 0;
 80012a2:	2300      	movs	r3, #0
 80012a4:	613b      	str	r3, [r7, #16]
  Com_SPI_Write(LIS35_REG_CR1,0x47);
 80012a6:	2147      	movs	r1, #71	; 0x47
 80012a8:	2020      	movs	r0, #32
 80012aa:	f7ff ff8f 	bl	80011cc <Com_SPI_Write>
  uint8_t acceleration;
  double acc_converted;
  uint8_t pusch = 0;
 80012ae:	2300      	movs	r3, #0
 80012b0:	71fb      	strb	r3, [r7, #7]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(delay_mgr_ctr % 200 == 0)
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	4b42      	ldr	r3, [pc, #264]	; (80013c0 <main+0x140>)
 80012b6:	fb83 1302 	smull	r1, r3, r3, r2
 80012ba:	1199      	asrs	r1, r3, #6
 80012bc:	17d3      	asrs	r3, r2, #31
 80012be:	1acb      	subs	r3, r1, r3
 80012c0:	21c8      	movs	r1, #200	; 0xc8
 80012c2:	fb01 f303 	mul.w	r3, r1, r3
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d13f      	bne.n	800134c <main+0xcc>
//		  {
//			  pusch += 1;
//			  if(pusch >= 3) pusch = 0;
//			  display_char(pusch);
//		  }
		  Com_SPI_Read(LIS35_REG_OUTZ, &acceleration);
 80012cc:	1d7b      	adds	r3, r7, #5
 80012ce:	4619      	mov	r1, r3
 80012d0:	202d      	movs	r0, #45	; 0x2d
 80012d2:	f7ff ffa5 	bl	8001220 <Com_SPI_Read>

		  if(acceleration & 0x80) acceleration = ~acceleration - 1;
 80012d6:	797b      	ldrb	r3, [r7, #5]
 80012d8:	b25b      	sxtb	r3, r3
 80012da:	2b00      	cmp	r3, #0
 80012dc:	da05      	bge.n	80012ea <main+0x6a>
 80012de:	797a      	ldrb	r2, [r7, #5]
 80012e0:	f06f 0301 	mvn.w	r3, #1
 80012e4:	1a9b      	subs	r3, r3, r2
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	717b      	strb	r3, [r7, #5]
		  acc_converted = acceleration *0.02 /1.04 /1.018;
 80012ea:	797b      	ldrb	r3, [r7, #5]
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff f921 	bl	8000534 <__aeabi_i2d>
 80012f2:	a32b      	add	r3, pc, #172	; (adr r3, 80013a0 <main+0x120>)
 80012f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f8:	f7ff f986 	bl	8000608 <__aeabi_dmul>
 80012fc:	4603      	mov	r3, r0
 80012fe:	460c      	mov	r4, r1
 8001300:	4618      	mov	r0, r3
 8001302:	4621      	mov	r1, r4
 8001304:	a328      	add	r3, pc, #160	; (adr r3, 80013a8 <main+0x128>)
 8001306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800130a:	f7ff faa7 	bl	800085c <__aeabi_ddiv>
 800130e:	4603      	mov	r3, r0
 8001310:	460c      	mov	r4, r1
 8001312:	4618      	mov	r0, r3
 8001314:	4621      	mov	r1, r4
 8001316:	a326      	add	r3, pc, #152	; (adr r3, 80013b0 <main+0x130>)
 8001318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800131c:	f7ff fa9e 	bl	800085c <__aeabi_ddiv>
 8001320:	4603      	mov	r3, r0
 8001322:	460c      	mov	r4, r1
 8001324:	e9c7 3402 	strd	r3, r4, [r7, #8]

		  uint8_t TxSize;
		  TxSize = snprintf(TxBuf, sizeof(TxBuf), "Acceleration Z -> %f [g] \r\n", acc_converted);
 8001328:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800132c:	e9cd 3400 	strd	r3, r4, [sp]
 8001330:	4a24      	ldr	r2, [pc, #144]	; (80013c4 <main+0x144>)
 8001332:	2132      	movs	r1, #50	; 0x32
 8001334:	4824      	ldr	r0, [pc, #144]	; (80013c8 <main+0x148>)
 8001336:	f003 fe5f 	bl	8004ff8 <sniprintf>
 800133a:	4603      	mov	r3, r0
 800133c:	71bb      	strb	r3, [r7, #6]
		  HAL_UART_Transmit_DMA(&huart2, TxBuf, TxSize);
 800133e:	79bb      	ldrb	r3, [r7, #6]
 8001340:	b29b      	uxth	r3, r3
 8001342:	461a      	mov	r2, r3
 8001344:	4920      	ldr	r1, [pc, #128]	; (80013c8 <main+0x148>)
 8001346:	4821      	ldr	r0, [pc, #132]	; (80013cc <main+0x14c>)
 8001348:	f002 fb00 	bl	800394c <HAL_UART_Transmit_DMA>
	  }

	  if(delay_mgr_ctr % 2 == 0)
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	f003 0301 	and.w	r3, r3, #1
 8001352:	2b00      	cmp	r3, #0
 8001354:	d11a      	bne.n	800138c <main+0x10c>
	  {
		  set_s7_output(acc_converted  *9.8, seg_choice);
 8001356:	a318      	add	r3, pc, #96	; (adr r3, 80013b8 <main+0x138>)
 8001358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800135c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001360:	f7ff f952 	bl	8000608 <__aeabi_dmul>
 8001364:	4603      	mov	r3, r0
 8001366:	460c      	mov	r4, r1
 8001368:	4618      	mov	r0, r3
 800136a:	4621      	mov	r1, r4
 800136c:	f7ff fc24 	bl	8000bb8 <__aeabi_d2f>
 8001370:	4602      	mov	r2, r0
 8001372:	7dfb      	ldrb	r3, [r7, #23]
 8001374:	4618      	mov	r0, r3
 8001376:	ee00 2a10 	vmov	s0, r2
 800137a:	f7ff fded 	bl	8000f58 <set_s7_output>
		  seg_choice = (++seg_choice) % 4;
 800137e:	7dfb      	ldrb	r3, [r7, #23]
 8001380:	3301      	adds	r3, #1
 8001382:	75fb      	strb	r3, [r7, #23]
 8001384:	7dfb      	ldrb	r3, [r7, #23]
 8001386:	f003 0303 	and.w	r3, r3, #3
 800138a:	75fb      	strb	r3, [r7, #23]
	  }

	  ++delay_mgr_ctr;
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	3301      	adds	r3, #1
 8001390:	613b      	str	r3, [r7, #16]
	  HAL_Delay(1);
 8001392:	2001      	movs	r0, #1
 8001394:	f000 fbfa 	bl	8001b8c <HAL_Delay>
	  if(delay_mgr_ctr % 200 == 0)
 8001398:	e78b      	b.n	80012b2 <main+0x32>
 800139a:	bf00      	nop
 800139c:	f3af 8000 	nop.w
 80013a0:	47ae147b 	.word	0x47ae147b
 80013a4:	3f947ae1 	.word	0x3f947ae1
 80013a8:	0a3d70a4 	.word	0x0a3d70a4
 80013ac:	3ff0a3d7 	.word	0x3ff0a3d7
 80013b0:	5e353f7d 	.word	0x5e353f7d
 80013b4:	3ff049ba 	.word	0x3ff049ba
 80013b8:	9999999a 	.word	0x9999999a
 80013bc:	40239999 	.word	0x40239999
 80013c0:	51eb851f 	.word	0x51eb851f
 80013c4:	08007e28 	.word	0x08007e28
 80013c8:	2000027c 	.word	0x2000027c
 80013cc:	20000368 	.word	0x20000368

080013d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b094      	sub	sp, #80	; 0x50
 80013d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013d6:	f107 0320 	add.w	r3, r7, #32
 80013da:	2230      	movs	r2, #48	; 0x30
 80013dc:	2100      	movs	r1, #0
 80013de:	4618      	mov	r0, r3
 80013e0:	f003 f9a6 	bl	8004730 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013e4:	f107 030c 	add.w	r3, r7, #12
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	605a      	str	r2, [r3, #4]
 80013ee:	609a      	str	r2, [r3, #8]
 80013f0:	60da      	str	r2, [r3, #12]
 80013f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013f4:	2300      	movs	r3, #0
 80013f6:	60bb      	str	r3, [r7, #8]
 80013f8:	4b28      	ldr	r3, [pc, #160]	; (800149c <SystemClock_Config+0xcc>)
 80013fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fc:	4a27      	ldr	r2, [pc, #156]	; (800149c <SystemClock_Config+0xcc>)
 80013fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001402:	6413      	str	r3, [r2, #64]	; 0x40
 8001404:	4b25      	ldr	r3, [pc, #148]	; (800149c <SystemClock_Config+0xcc>)
 8001406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001408:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800140c:	60bb      	str	r3, [r7, #8]
 800140e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001410:	2300      	movs	r3, #0
 8001412:	607b      	str	r3, [r7, #4]
 8001414:	4b22      	ldr	r3, [pc, #136]	; (80014a0 <SystemClock_Config+0xd0>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a21      	ldr	r2, [pc, #132]	; (80014a0 <SystemClock_Config+0xd0>)
 800141a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800141e:	6013      	str	r3, [r2, #0]
 8001420:	4b1f      	ldr	r3, [pc, #124]	; (80014a0 <SystemClock_Config+0xd0>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001428:	607b      	str	r3, [r7, #4]
 800142a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800142c:	2302      	movs	r3, #2
 800142e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001430:	2301      	movs	r3, #1
 8001432:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001434:	2310      	movs	r3, #16
 8001436:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001438:	2302      	movs	r3, #2
 800143a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800143c:	2300      	movs	r3, #0
 800143e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001440:	2310      	movs	r3, #16
 8001442:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001444:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001448:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800144a:	2304      	movs	r3, #4
 800144c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800144e:	2304      	movs	r3, #4
 8001450:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001452:	f107 0320 	add.w	r3, r7, #32
 8001456:	4618      	mov	r0, r3
 8001458:	f001 f9f8 	bl	800284c <HAL_RCC_OscConfig>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001462:	f000 f945 	bl	80016f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001466:	230f      	movs	r3, #15
 8001468:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800146a:	2302      	movs	r3, #2
 800146c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800146e:	2300      	movs	r3, #0
 8001470:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001472:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001476:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001478:	2300      	movs	r3, #0
 800147a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800147c:	f107 030c 	add.w	r3, r7, #12
 8001480:	2102      	movs	r1, #2
 8001482:	4618      	mov	r0, r3
 8001484:	f001 fc52 	bl	8002d2c <HAL_RCC_ClockConfig>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800148e:	f000 f92f 	bl	80016f0 <Error_Handler>
  }
}
 8001492:	bf00      	nop
 8001494:	3750      	adds	r7, #80	; 0x50
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	40023800 	.word	0x40023800
 80014a0:	40007000 	.word	0x40007000

080014a4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */
	__HAL_RCC_SPI1_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	607b      	str	r3, [r7, #4]
 80014ae:	4b1f      	ldr	r3, [pc, #124]	; (800152c <MX_SPI1_Init+0x88>)
 80014b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b2:	4a1e      	ldr	r2, [pc, #120]	; (800152c <MX_SPI1_Init+0x88>)
 80014b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014b8:	6453      	str	r3, [r2, #68]	; 0x44
 80014ba:	4b1c      	ldr	r3, [pc, #112]	; (800152c <MX_SPI1_Init+0x88>)
 80014bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014c2:	607b      	str	r3, [r7, #4]
 80014c4:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80014c6:	4b1a      	ldr	r3, [pc, #104]	; (8001530 <MX_SPI1_Init+0x8c>)
 80014c8:	4a1a      	ldr	r2, [pc, #104]	; (8001534 <MX_SPI1_Init+0x90>)
 80014ca:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80014cc:	4b18      	ldr	r3, [pc, #96]	; (8001530 <MX_SPI1_Init+0x8c>)
 80014ce:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014d2:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80014d4:	4b16      	ldr	r3, [pc, #88]	; (8001530 <MX_SPI1_Init+0x8c>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80014da:	4b15      	ldr	r3, [pc, #84]	; (8001530 <MX_SPI1_Init+0x8c>)
 80014dc:	2200      	movs	r2, #0
 80014de:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80014e0:	4b13      	ldr	r3, [pc, #76]	; (8001530 <MX_SPI1_Init+0x8c>)
 80014e2:	2202      	movs	r2, #2
 80014e4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80014e6:	4b12      	ldr	r3, [pc, #72]	; (8001530 <MX_SPI1_Init+0x8c>)
 80014e8:	2201      	movs	r2, #1
 80014ea:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80014ec:	4b10      	ldr	r3, [pc, #64]	; (8001530 <MX_SPI1_Init+0x8c>)
 80014ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014f2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80014f4:	4b0e      	ldr	r3, [pc, #56]	; (8001530 <MX_SPI1_Init+0x8c>)
 80014f6:	2238      	movs	r2, #56	; 0x38
 80014f8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014fa:	4b0d      	ldr	r3, [pc, #52]	; (8001530 <MX_SPI1_Init+0x8c>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001500:	4b0b      	ldr	r3, [pc, #44]	; (8001530 <MX_SPI1_Init+0x8c>)
 8001502:	2200      	movs	r2, #0
 8001504:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001506:	4b0a      	ldr	r3, [pc, #40]	; (8001530 <MX_SPI1_Init+0x8c>)
 8001508:	2200      	movs	r2, #0
 800150a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800150c:	4b08      	ldr	r3, [pc, #32]	; (8001530 <MX_SPI1_Init+0x8c>)
 800150e:	220a      	movs	r2, #10
 8001510:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001512:	4807      	ldr	r0, [pc, #28]	; (8001530 <MX_SPI1_Init+0x8c>)
 8001514:	f001 fdfc 	bl	8003110 <HAL_SPI_Init>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <MX_SPI1_Init+0x7e>
  {
    Error_Handler();
 800151e:	f000 f8e7 	bl	80016f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001522:	bf00      	nop
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	40023800 	.word	0x40023800
 8001530:	20000310 	.word	0x20000310
 8001534:	40013000 	.word	0x40013000

08001538 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800153c:	4b11      	ldr	r3, [pc, #68]	; (8001584 <MX_USART2_UART_Init+0x4c>)
 800153e:	4a12      	ldr	r2, [pc, #72]	; (8001588 <MX_USART2_UART_Init+0x50>)
 8001540:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001542:	4b10      	ldr	r3, [pc, #64]	; (8001584 <MX_USART2_UART_Init+0x4c>)
 8001544:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001548:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800154a:	4b0e      	ldr	r3, [pc, #56]	; (8001584 <MX_USART2_UART_Init+0x4c>)
 800154c:	2200      	movs	r2, #0
 800154e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001550:	4b0c      	ldr	r3, [pc, #48]	; (8001584 <MX_USART2_UART_Init+0x4c>)
 8001552:	2200      	movs	r2, #0
 8001554:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001556:	4b0b      	ldr	r3, [pc, #44]	; (8001584 <MX_USART2_UART_Init+0x4c>)
 8001558:	2200      	movs	r2, #0
 800155a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800155c:	4b09      	ldr	r3, [pc, #36]	; (8001584 <MX_USART2_UART_Init+0x4c>)
 800155e:	220c      	movs	r2, #12
 8001560:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001562:	4b08      	ldr	r3, [pc, #32]	; (8001584 <MX_USART2_UART_Init+0x4c>)
 8001564:	2200      	movs	r2, #0
 8001566:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001568:	4b06      	ldr	r3, [pc, #24]	; (8001584 <MX_USART2_UART_Init+0x4c>)
 800156a:	2200      	movs	r2, #0
 800156c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800156e:	4805      	ldr	r0, [pc, #20]	; (8001584 <MX_USART2_UART_Init+0x4c>)
 8001570:	f002 f99e 	bl	80038b0 <HAL_UART_Init>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800157a:	f000 f8b9 	bl	80016f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800157e:	bf00      	nop
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	20000368 	.word	0x20000368
 8001588:	40004400 	.word	0x40004400

0800158c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	607b      	str	r3, [r7, #4]
 8001596:	4b0c      	ldr	r3, [pc, #48]	; (80015c8 <MX_DMA_Init+0x3c>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	4a0b      	ldr	r2, [pc, #44]	; (80015c8 <MX_DMA_Init+0x3c>)
 800159c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015a0:	6313      	str	r3, [r2, #48]	; 0x30
 80015a2:	4b09      	ldr	r3, [pc, #36]	; (80015c8 <MX_DMA_Init+0x3c>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015aa:	607b      	str	r3, [r7, #4]
 80015ac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80015ae:	2200      	movs	r2, #0
 80015b0:	2100      	movs	r1, #0
 80015b2:	2011      	movs	r0, #17
 80015b4:	f000 fbe7 	bl	8001d86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80015b8:	2011      	movs	r0, #17
 80015ba:	f000 fc00 	bl	8001dbe <HAL_NVIC_EnableIRQ>

}
 80015be:	bf00      	nop
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	40023800 	.word	0x40023800

080015cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b08a      	sub	sp, #40	; 0x28
 80015d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d2:	f107 0314 	add.w	r3, r7, #20
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]
 80015da:	605a      	str	r2, [r3, #4]
 80015dc:	609a      	str	r2, [r3, #8]
 80015de:	60da      	str	r2, [r3, #12]
 80015e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	613b      	str	r3, [r7, #16]
 80015e6:	4b3d      	ldr	r3, [pc, #244]	; (80016dc <MX_GPIO_Init+0x110>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	4a3c      	ldr	r2, [pc, #240]	; (80016dc <MX_GPIO_Init+0x110>)
 80015ec:	f043 0304 	orr.w	r3, r3, #4
 80015f0:	6313      	str	r3, [r2, #48]	; 0x30
 80015f2:	4b3a      	ldr	r3, [pc, #232]	; (80016dc <MX_GPIO_Init+0x110>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	f003 0304 	and.w	r3, r3, #4
 80015fa:	613b      	str	r3, [r7, #16]
 80015fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015fe:	2300      	movs	r3, #0
 8001600:	60fb      	str	r3, [r7, #12]
 8001602:	4b36      	ldr	r3, [pc, #216]	; (80016dc <MX_GPIO_Init+0x110>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001606:	4a35      	ldr	r2, [pc, #212]	; (80016dc <MX_GPIO_Init+0x110>)
 8001608:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800160c:	6313      	str	r3, [r2, #48]	; 0x30
 800160e:	4b33      	ldr	r3, [pc, #204]	; (80016dc <MX_GPIO_Init+0x110>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	60bb      	str	r3, [r7, #8]
 800161e:	4b2f      	ldr	r3, [pc, #188]	; (80016dc <MX_GPIO_Init+0x110>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	4a2e      	ldr	r2, [pc, #184]	; (80016dc <MX_GPIO_Init+0x110>)
 8001624:	f043 0301 	orr.w	r3, r3, #1
 8001628:	6313      	str	r3, [r2, #48]	; 0x30
 800162a:	4b2c      	ldr	r3, [pc, #176]	; (80016dc <MX_GPIO_Init+0x110>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	f003 0301 	and.w	r3, r3, #1
 8001632:	60bb      	str	r3, [r7, #8]
 8001634:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	607b      	str	r3, [r7, #4]
 800163a:	4b28      	ldr	r3, [pc, #160]	; (80016dc <MX_GPIO_Init+0x110>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163e:	4a27      	ldr	r2, [pc, #156]	; (80016dc <MX_GPIO_Init+0x110>)
 8001640:	f043 0302 	orr.w	r3, r3, #2
 8001644:	6313      	str	r3, [r2, #48]	; 0x30
 8001646:	4b25      	ldr	r3, [pc, #148]	; (80016dc <MX_GPIO_Init+0x110>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	607b      	str	r3, [r7, #4]
 8001650:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SEG7_G_Pin|SEG7_D_Pin|SEG7_E_Pin|SEG7_C_Pin
 8001652:	2200      	movs	r2, #0
 8001654:	f640 71ff 	movw	r1, #4095	; 0xfff
 8001658:	4821      	ldr	r0, [pc, #132]	; (80016e0 <MX_GPIO_Init+0x114>)
 800165a:	f001 f8dd 	bl	8002818 <HAL_GPIO_WritePin>
                          |SEG7_B_Pin|SEG7_F_Pin|SEG7_A_Pin|SEG7_P_Pin
                          |SEG7_1_Pin|SEG7_2_Pin|SEG7_3_Pin|SEG7_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 800165e:	2200      	movs	r2, #0
 8001660:	2110      	movs	r1, #16
 8001662:	4820      	ldr	r0, [pc, #128]	; (80016e4 <MX_GPIO_Init+0x118>)
 8001664:	f001 f8d8 	bl	8002818 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001668:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800166c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800166e:	4b1e      	ldr	r3, [pc, #120]	; (80016e8 <MX_GPIO_Init+0x11c>)
 8001670:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001672:	2300      	movs	r3, #0
 8001674:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001676:	f107 0314 	add.w	r3, r7, #20
 800167a:	4619      	mov	r1, r3
 800167c:	4818      	ldr	r0, [pc, #96]	; (80016e0 <MX_GPIO_Init+0x114>)
 800167e:	f000 ff49 	bl	8002514 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG7_G_Pin SEG7_D_Pin SEG7_E_Pin SEG7_C_Pin
                           SEG7_B_Pin SEG7_F_Pin SEG7_A_Pin SEG7_P_Pin
                           SEG7_1_Pin SEG7_2_Pin SEG7_3_Pin SEG7_4_Pin */
  GPIO_InitStruct.Pin = SEG7_G_Pin|SEG7_D_Pin|SEG7_E_Pin|SEG7_C_Pin
 8001682:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001686:	617b      	str	r3, [r7, #20]
                          |SEG7_B_Pin|SEG7_F_Pin|SEG7_A_Pin|SEG7_P_Pin
                          |SEG7_1_Pin|SEG7_2_Pin|SEG7_3_Pin|SEG7_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001688:	2301      	movs	r3, #1
 800168a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168c:	2300      	movs	r3, #0
 800168e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001690:	2300      	movs	r3, #0
 8001692:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001694:	f107 0314 	add.w	r3, r7, #20
 8001698:	4619      	mov	r1, r3
 800169a:	4811      	ldr	r0, [pc, #68]	; (80016e0 <MX_GPIO_Init+0x114>)
 800169c:	f000 ff3a 	bl	8002514 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_NSS_Pin */
  GPIO_InitStruct.Pin = SPI1_NSS_Pin;
 80016a0:	2310      	movs	r3, #16
 80016a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016a4:	2301      	movs	r3, #1
 80016a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a8:	2300      	movs	r3, #0
 80016aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ac:	2300      	movs	r3, #0
 80016ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_NSS_GPIO_Port, &GPIO_InitStruct);
 80016b0:	f107 0314 	add.w	r3, r7, #20
 80016b4:	4619      	mov	r1, r3
 80016b6:	480b      	ldr	r0, [pc, #44]	; (80016e4 <MX_GPIO_Init+0x118>)
 80016b8:	f000 ff2c 	bl	8002514 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 80016bc:	2320      	movs	r3, #32
 80016be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016c0:	2300      	movs	r3, #0
 80016c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c4:	2300      	movs	r3, #0
 80016c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 80016c8:	f107 0314 	add.w	r3, r7, #20
 80016cc:	4619      	mov	r1, r3
 80016ce:	4807      	ldr	r0, [pc, #28]	; (80016ec <MX_GPIO_Init+0x120>)
 80016d0:	f000 ff20 	bl	8002514 <HAL_GPIO_Init>

}
 80016d4:	bf00      	nop
 80016d6:	3728      	adds	r7, #40	; 0x28
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	40023800 	.word	0x40023800
 80016e0:	40020800 	.word	0x40020800
 80016e4:	40020000 	.word	0x40020000
 80016e8:	10210000 	.word	0x10210000
 80016ec:	40020400 	.word	0x40020400

080016f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016f4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016f6:	e7fe      	b.n	80016f6 <Error_Handler+0x6>

080016f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016fe:	2300      	movs	r3, #0
 8001700:	607b      	str	r3, [r7, #4]
 8001702:	4b10      	ldr	r3, [pc, #64]	; (8001744 <HAL_MspInit+0x4c>)
 8001704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001706:	4a0f      	ldr	r2, [pc, #60]	; (8001744 <HAL_MspInit+0x4c>)
 8001708:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800170c:	6453      	str	r3, [r2, #68]	; 0x44
 800170e:	4b0d      	ldr	r3, [pc, #52]	; (8001744 <HAL_MspInit+0x4c>)
 8001710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001712:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001716:	607b      	str	r3, [r7, #4]
 8001718:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800171a:	2300      	movs	r3, #0
 800171c:	603b      	str	r3, [r7, #0]
 800171e:	4b09      	ldr	r3, [pc, #36]	; (8001744 <HAL_MspInit+0x4c>)
 8001720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001722:	4a08      	ldr	r2, [pc, #32]	; (8001744 <HAL_MspInit+0x4c>)
 8001724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001728:	6413      	str	r3, [r2, #64]	; 0x40
 800172a:	4b06      	ldr	r3, [pc, #24]	; (8001744 <HAL_MspInit+0x4c>)
 800172c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001732:	603b      	str	r3, [r7, #0]
 8001734:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001736:	2007      	movs	r0, #7
 8001738:	f000 fb1a 	bl	8001d70 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800173c:	bf00      	nop
 800173e:	3708      	adds	r7, #8
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	40023800 	.word	0x40023800

08001748 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b08a      	sub	sp, #40	; 0x28
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001750:	f107 0314 	add.w	r3, r7, #20
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	605a      	str	r2, [r3, #4]
 800175a:	609a      	str	r2, [r3, #8]
 800175c:	60da      	str	r2, [r3, #12]
 800175e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a2c      	ldr	r2, [pc, #176]	; (8001818 <HAL_SPI_MspInit+0xd0>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d151      	bne.n	800180e <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800176a:	2300      	movs	r3, #0
 800176c:	613b      	str	r3, [r7, #16]
 800176e:	4b2b      	ldr	r3, [pc, #172]	; (800181c <HAL_SPI_MspInit+0xd4>)
 8001770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001772:	4a2a      	ldr	r2, [pc, #168]	; (800181c <HAL_SPI_MspInit+0xd4>)
 8001774:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001778:	6453      	str	r3, [r2, #68]	; 0x44
 800177a:	4b28      	ldr	r3, [pc, #160]	; (800181c <HAL_SPI_MspInit+0xd4>)
 800177c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001782:	613b      	str	r3, [r7, #16]
 8001784:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001786:	2300      	movs	r3, #0
 8001788:	60fb      	str	r3, [r7, #12]
 800178a:	4b24      	ldr	r3, [pc, #144]	; (800181c <HAL_SPI_MspInit+0xd4>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178e:	4a23      	ldr	r2, [pc, #140]	; (800181c <HAL_SPI_MspInit+0xd4>)
 8001790:	f043 0301 	orr.w	r3, r3, #1
 8001794:	6313      	str	r3, [r2, #48]	; 0x30
 8001796:	4b21      	ldr	r3, [pc, #132]	; (800181c <HAL_SPI_MspInit+0xd4>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179a:	f003 0301 	and.w	r3, r3, #1
 800179e:	60fb      	str	r3, [r7, #12]
 80017a0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017a2:	2300      	movs	r3, #0
 80017a4:	60bb      	str	r3, [r7, #8]
 80017a6:	4b1d      	ldr	r3, [pc, #116]	; (800181c <HAL_SPI_MspInit+0xd4>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017aa:	4a1c      	ldr	r2, [pc, #112]	; (800181c <HAL_SPI_MspInit+0xd4>)
 80017ac:	f043 0302 	orr.w	r3, r3, #2
 80017b0:	6313      	str	r3, [r2, #48]	; 0x30
 80017b2:	4b1a      	ldr	r3, [pc, #104]	; (800181c <HAL_SPI_MspInit+0xd4>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	60bb      	str	r3, [r7, #8]
 80017bc:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80017be:	23c0      	movs	r3, #192	; 0xc0
 80017c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c2:	2302      	movs	r3, #2
 80017c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c6:	2300      	movs	r3, #0
 80017c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ca:	2303      	movs	r3, #3
 80017cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017ce:	2305      	movs	r3, #5
 80017d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d2:	f107 0314 	add.w	r3, r7, #20
 80017d6:	4619      	mov	r1, r3
 80017d8:	4811      	ldr	r0, [pc, #68]	; (8001820 <HAL_SPI_MspInit+0xd8>)
 80017da:	f000 fe9b 	bl	8002514 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80017de:	2308      	movs	r3, #8
 80017e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e2:	2302      	movs	r3, #2
 80017e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e6:	2300      	movs	r3, #0
 80017e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ea:	2303      	movs	r3, #3
 80017ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017ee:	2305      	movs	r3, #5
 80017f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017f2:	f107 0314 	add.w	r3, r7, #20
 80017f6:	4619      	mov	r1, r3
 80017f8:	480a      	ldr	r0, [pc, #40]	; (8001824 <HAL_SPI_MspInit+0xdc>)
 80017fa:	f000 fe8b 	bl	8002514 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80017fe:	2200      	movs	r2, #0
 8001800:	2100      	movs	r1, #0
 8001802:	2023      	movs	r0, #35	; 0x23
 8001804:	f000 fabf 	bl	8001d86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001808:	2023      	movs	r0, #35	; 0x23
 800180a:	f000 fad8 	bl	8001dbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800180e:	bf00      	nop
 8001810:	3728      	adds	r7, #40	; 0x28
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	40013000 	.word	0x40013000
 800181c:	40023800 	.word	0x40023800
 8001820:	40020000 	.word	0x40020000
 8001824:	40020400 	.word	0x40020400

08001828 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b08a      	sub	sp, #40	; 0x28
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001830:	f107 0314 	add.w	r3, r7, #20
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	605a      	str	r2, [r3, #4]
 800183a:	609a      	str	r2, [r3, #8]
 800183c:	60da      	str	r2, [r3, #12]
 800183e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a34      	ldr	r2, [pc, #208]	; (8001918 <HAL_UART_MspInit+0xf0>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d161      	bne.n	800190e <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800184a:	2300      	movs	r3, #0
 800184c:	613b      	str	r3, [r7, #16]
 800184e:	4b33      	ldr	r3, [pc, #204]	; (800191c <HAL_UART_MspInit+0xf4>)
 8001850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001852:	4a32      	ldr	r2, [pc, #200]	; (800191c <HAL_UART_MspInit+0xf4>)
 8001854:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001858:	6413      	str	r3, [r2, #64]	; 0x40
 800185a:	4b30      	ldr	r3, [pc, #192]	; (800191c <HAL_UART_MspInit+0xf4>)
 800185c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001862:	613b      	str	r3, [r7, #16]
 8001864:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001866:	2300      	movs	r3, #0
 8001868:	60fb      	str	r3, [r7, #12]
 800186a:	4b2c      	ldr	r3, [pc, #176]	; (800191c <HAL_UART_MspInit+0xf4>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	4a2b      	ldr	r2, [pc, #172]	; (800191c <HAL_UART_MspInit+0xf4>)
 8001870:	f043 0301 	orr.w	r3, r3, #1
 8001874:	6313      	str	r3, [r2, #48]	; 0x30
 8001876:	4b29      	ldr	r3, [pc, #164]	; (800191c <HAL_UART_MspInit+0xf4>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	f003 0301 	and.w	r3, r3, #1
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001882:	230c      	movs	r3, #12
 8001884:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001886:	2302      	movs	r3, #2
 8001888:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188a:	2300      	movs	r3, #0
 800188c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800188e:	2303      	movs	r3, #3
 8001890:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001892:	2307      	movs	r3, #7
 8001894:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001896:	f107 0314 	add.w	r3, r7, #20
 800189a:	4619      	mov	r1, r3
 800189c:	4820      	ldr	r0, [pc, #128]	; (8001920 <HAL_UART_MspInit+0xf8>)
 800189e:	f000 fe39 	bl	8002514 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80018a2:	4b20      	ldr	r3, [pc, #128]	; (8001924 <HAL_UART_MspInit+0xfc>)
 80018a4:	4a20      	ldr	r2, [pc, #128]	; (8001928 <HAL_UART_MspInit+0x100>)
 80018a6:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80018a8:	4b1e      	ldr	r3, [pc, #120]	; (8001924 <HAL_UART_MspInit+0xfc>)
 80018aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018ae:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80018b0:	4b1c      	ldr	r3, [pc, #112]	; (8001924 <HAL_UART_MspInit+0xfc>)
 80018b2:	2240      	movs	r2, #64	; 0x40
 80018b4:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018b6:	4b1b      	ldr	r3, [pc, #108]	; (8001924 <HAL_UART_MspInit+0xfc>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80018bc:	4b19      	ldr	r3, [pc, #100]	; (8001924 <HAL_UART_MspInit+0xfc>)
 80018be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018c2:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018c4:	4b17      	ldr	r3, [pc, #92]	; (8001924 <HAL_UART_MspInit+0xfc>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018ca:	4b16      	ldr	r3, [pc, #88]	; (8001924 <HAL_UART_MspInit+0xfc>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80018d0:	4b14      	ldr	r3, [pc, #80]	; (8001924 <HAL_UART_MspInit+0xfc>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80018d6:	4b13      	ldr	r3, [pc, #76]	; (8001924 <HAL_UART_MspInit+0xfc>)
 80018d8:	2200      	movs	r2, #0
 80018da:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018dc:	4b11      	ldr	r3, [pc, #68]	; (8001924 <HAL_UART_MspInit+0xfc>)
 80018de:	2200      	movs	r2, #0
 80018e0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80018e2:	4810      	ldr	r0, [pc, #64]	; (8001924 <HAL_UART_MspInit+0xfc>)
 80018e4:	f000 fa86 	bl	8001df4 <HAL_DMA_Init>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80018ee:	f7ff feff 	bl	80016f0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4a0b      	ldr	r2, [pc, #44]	; (8001924 <HAL_UART_MspInit+0xfc>)
 80018f6:	631a      	str	r2, [r3, #48]	; 0x30
 80018f8:	4a0a      	ldr	r2, [pc, #40]	; (8001924 <HAL_UART_MspInit+0xfc>)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80018fe:	2200      	movs	r2, #0
 8001900:	2100      	movs	r1, #0
 8001902:	2026      	movs	r0, #38	; 0x26
 8001904:	f000 fa3f 	bl	8001d86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001908:	2026      	movs	r0, #38	; 0x26
 800190a:	f000 fa58 	bl	8001dbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800190e:	bf00      	nop
 8001910:	3728      	adds	r7, #40	; 0x28
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	40004400 	.word	0x40004400
 800191c:	40023800 	.word	0x40023800
 8001920:	40020000 	.word	0x40020000
 8001924:	200002b0 	.word	0x200002b0
 8001928:	400260a0 	.word	0x400260a0

0800192c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001930:	e7fe      	b.n	8001930 <NMI_Handler+0x4>

08001932 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001932:	b480      	push	{r7}
 8001934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001936:	e7fe      	b.n	8001936 <HardFault_Handler+0x4>

08001938 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800193c:	e7fe      	b.n	800193c <MemManage_Handler+0x4>

0800193e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800193e:	b480      	push	{r7}
 8001940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001942:	e7fe      	b.n	8001942 <BusFault_Handler+0x4>

08001944 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001948:	e7fe      	b.n	8001948 <UsageFault_Handler+0x4>

0800194a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800194a:	b480      	push	{r7}
 800194c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800194e:	bf00      	nop
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800195c:	bf00      	nop
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr

08001966 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001966:	b480      	push	{r7}
 8001968:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800196a:	bf00      	nop
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001978:	f000 f8e8 	bl	8001b4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800197c:	bf00      	nop
 800197e:	bd80      	pop	{r7, pc}

08001980 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001984:	4802      	ldr	r0, [pc, #8]	; (8001990 <DMA1_Stream6_IRQHandler+0x10>)
 8001986:	f000 fb5d 	bl	8002044 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800198a:	bf00      	nop
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	200002b0 	.word	0x200002b0

08001994 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001998:	4802      	ldr	r0, [pc, #8]	; (80019a4 <SPI1_IRQHandler+0x10>)
 800199a:	f001 fdbf 	bl	800351c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800199e:	bf00      	nop
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	20000310 	.word	0x20000310

080019a8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80019ac:	4802      	ldr	r0, [pc, #8]	; (80019b8 <USART2_IRQHandler+0x10>)
 80019ae:	f002 f839 	bl	8003a24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80019b2:	bf00      	nop
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	20000368 	.word	0x20000368

080019bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b086      	sub	sp, #24
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019c4:	4a14      	ldr	r2, [pc, #80]	; (8001a18 <_sbrk+0x5c>)
 80019c6:	4b15      	ldr	r3, [pc, #84]	; (8001a1c <_sbrk+0x60>)
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019d0:	4b13      	ldr	r3, [pc, #76]	; (8001a20 <_sbrk+0x64>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d102      	bne.n	80019de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019d8:	4b11      	ldr	r3, [pc, #68]	; (8001a20 <_sbrk+0x64>)
 80019da:	4a12      	ldr	r2, [pc, #72]	; (8001a24 <_sbrk+0x68>)
 80019dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019de:	4b10      	ldr	r3, [pc, #64]	; (8001a20 <_sbrk+0x64>)
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4413      	add	r3, r2
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d207      	bcs.n	80019fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019ec:	f002 fe76 	bl	80046dc <__errno>
 80019f0:	4602      	mov	r2, r0
 80019f2:	230c      	movs	r3, #12
 80019f4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80019f6:	f04f 33ff 	mov.w	r3, #4294967295
 80019fa:	e009      	b.n	8001a10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019fc:	4b08      	ldr	r3, [pc, #32]	; (8001a20 <_sbrk+0x64>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a02:	4b07      	ldr	r3, [pc, #28]	; (8001a20 <_sbrk+0x64>)
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4413      	add	r3, r2
 8001a0a:	4a05      	ldr	r2, [pc, #20]	; (8001a20 <_sbrk+0x64>)
 8001a0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3718      	adds	r7, #24
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	20020000 	.word	0x20020000
 8001a1c:	00000400 	.word	0x00000400
 8001a20:	20000270 	.word	0x20000270
 8001a24:	200003b0 	.word	0x200003b0

08001a28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a2c:	4b08      	ldr	r3, [pc, #32]	; (8001a50 <SystemInit+0x28>)
 8001a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a32:	4a07      	ldr	r2, [pc, #28]	; (8001a50 <SystemInit+0x28>)
 8001a34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a3c:	4b04      	ldr	r3, [pc, #16]	; (8001a50 <SystemInit+0x28>)
 8001a3e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a42:	609a      	str	r2, [r3, #8]
#endif
}
 8001a44:	bf00      	nop
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	e000ed00 	.word	0xe000ed00

08001a54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a8c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001a58:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001a5a:	e003      	b.n	8001a64 <LoopCopyDataInit>

08001a5c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001a5c:	4b0c      	ldr	r3, [pc, #48]	; (8001a90 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001a5e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001a60:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001a62:	3104      	adds	r1, #4

08001a64 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001a64:	480b      	ldr	r0, [pc, #44]	; (8001a94 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001a66:	4b0c      	ldr	r3, [pc, #48]	; (8001a98 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001a68:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001a6a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001a6c:	d3f6      	bcc.n	8001a5c <CopyDataInit>
  ldr  r2, =_sbss
 8001a6e:	4a0b      	ldr	r2, [pc, #44]	; (8001a9c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001a70:	e002      	b.n	8001a78 <LoopFillZerobss>

08001a72 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001a72:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001a74:	f842 3b04 	str.w	r3, [r2], #4

08001a78 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001a78:	4b09      	ldr	r3, [pc, #36]	; (8001aa0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001a7a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001a7c:	d3f9      	bcc.n	8001a72 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001a7e:	f7ff ffd3 	bl	8001a28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a82:	f002 fe31 	bl	80046e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a86:	f7ff fbfb 	bl	8001280 <main>
  bx  lr    
 8001a8a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a8c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001a90:	08008120 	.word	0x08008120
  ldr  r0, =_sdata
 8001a94:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001a98:	20000254 	.word	0x20000254
  ldr  r2, =_sbss
 8001a9c:	20000254 	.word	0x20000254
  ldr  r3, = _ebss
 8001aa0:	200003b0 	.word	0x200003b0

08001aa4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001aa4:	e7fe      	b.n	8001aa4 <ADC_IRQHandler>
	...

08001aa8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001aac:	4b0e      	ldr	r3, [pc, #56]	; (8001ae8 <HAL_Init+0x40>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a0d      	ldr	r2, [pc, #52]	; (8001ae8 <HAL_Init+0x40>)
 8001ab2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ab6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ab8:	4b0b      	ldr	r3, [pc, #44]	; (8001ae8 <HAL_Init+0x40>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a0a      	ldr	r2, [pc, #40]	; (8001ae8 <HAL_Init+0x40>)
 8001abe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ac2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ac4:	4b08      	ldr	r3, [pc, #32]	; (8001ae8 <HAL_Init+0x40>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a07      	ldr	r2, [pc, #28]	; (8001ae8 <HAL_Init+0x40>)
 8001aca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ace:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ad0:	2003      	movs	r0, #3
 8001ad2:	f000 f94d 	bl	8001d70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ad6:	2000      	movs	r0, #0
 8001ad8:	f000 f808 	bl	8001aec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001adc:	f7ff fe0c 	bl	80016f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	40023c00 	.word	0x40023c00

08001aec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001af4:	4b12      	ldr	r3, [pc, #72]	; (8001b40 <HAL_InitTick+0x54>)
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	4b12      	ldr	r3, [pc, #72]	; (8001b44 <HAL_InitTick+0x58>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	4619      	mov	r1, r3
 8001afe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b02:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f000 f965 	bl	8001dda <HAL_SYSTICK_Config>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e00e      	b.n	8001b38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2b0f      	cmp	r3, #15
 8001b1e:	d80a      	bhi.n	8001b36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b20:	2200      	movs	r2, #0
 8001b22:	6879      	ldr	r1, [r7, #4]
 8001b24:	f04f 30ff 	mov.w	r0, #4294967295
 8001b28:	f000 f92d 	bl	8001d86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b2c:	4a06      	ldr	r2, [pc, #24]	; (8001b48 <HAL_InitTick+0x5c>)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b32:	2300      	movs	r3, #0
 8001b34:	e000      	b.n	8001b38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3708      	adds	r7, #8
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	20000074 	.word	0x20000074
 8001b44:	2000007c 	.word	0x2000007c
 8001b48:	20000078 	.word	0x20000078

08001b4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b50:	4b06      	ldr	r3, [pc, #24]	; (8001b6c <HAL_IncTick+0x20>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	461a      	mov	r2, r3
 8001b56:	4b06      	ldr	r3, [pc, #24]	; (8001b70 <HAL_IncTick+0x24>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	4a04      	ldr	r2, [pc, #16]	; (8001b70 <HAL_IncTick+0x24>)
 8001b5e:	6013      	str	r3, [r2, #0]
}
 8001b60:	bf00      	nop
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	2000007c 	.word	0x2000007c
 8001b70:	200003a8 	.word	0x200003a8

08001b74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  return uwTick;
 8001b78:	4b03      	ldr	r3, [pc, #12]	; (8001b88 <HAL_GetTick+0x14>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	200003a8 	.word	0x200003a8

08001b8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b94:	f7ff ffee 	bl	8001b74 <HAL_GetTick>
 8001b98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ba4:	d005      	beq.n	8001bb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ba6:	4b09      	ldr	r3, [pc, #36]	; (8001bcc <HAL_Delay+0x40>)
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	461a      	mov	r2, r3
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	4413      	add	r3, r2
 8001bb0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001bb2:	bf00      	nop
 8001bb4:	f7ff ffde 	bl	8001b74 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	68fa      	ldr	r2, [r7, #12]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d8f7      	bhi.n	8001bb4 <HAL_Delay+0x28>
  {
  }
}
 8001bc4:	bf00      	nop
 8001bc6:	3710      	adds	r7, #16
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	2000007c 	.word	0x2000007c

08001bd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b085      	sub	sp, #20
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f003 0307 	and.w	r3, r3, #7
 8001bde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001be0:	4b0c      	ldr	r3, [pc, #48]	; (8001c14 <__NVIC_SetPriorityGrouping+0x44>)
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001be6:	68ba      	ldr	r2, [r7, #8]
 8001be8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bec:	4013      	ands	r3, r2
 8001bee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bf8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c02:	4a04      	ldr	r2, [pc, #16]	; (8001c14 <__NVIC_SetPriorityGrouping+0x44>)
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	60d3      	str	r3, [r2, #12]
}
 8001c08:	bf00      	nop
 8001c0a:	3714      	adds	r7, #20
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr
 8001c14:	e000ed00 	.word	0xe000ed00

08001c18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c1c:	4b04      	ldr	r3, [pc, #16]	; (8001c30 <__NVIC_GetPriorityGrouping+0x18>)
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	0a1b      	lsrs	r3, r3, #8
 8001c22:	f003 0307 	and.w	r3, r3, #7
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr
 8001c30:	e000ed00 	.word	0xe000ed00

08001c34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	db0b      	blt.n	8001c5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c46:	79fb      	ldrb	r3, [r7, #7]
 8001c48:	f003 021f 	and.w	r2, r3, #31
 8001c4c:	4907      	ldr	r1, [pc, #28]	; (8001c6c <__NVIC_EnableIRQ+0x38>)
 8001c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c52:	095b      	lsrs	r3, r3, #5
 8001c54:	2001      	movs	r0, #1
 8001c56:	fa00 f202 	lsl.w	r2, r0, r2
 8001c5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c5e:	bf00      	nop
 8001c60:	370c      	adds	r7, #12
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	e000e100 	.word	0xe000e100

08001c70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	4603      	mov	r3, r0
 8001c78:	6039      	str	r1, [r7, #0]
 8001c7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	db0a      	blt.n	8001c9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	b2da      	uxtb	r2, r3
 8001c88:	490c      	ldr	r1, [pc, #48]	; (8001cbc <__NVIC_SetPriority+0x4c>)
 8001c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8e:	0112      	lsls	r2, r2, #4
 8001c90:	b2d2      	uxtb	r2, r2
 8001c92:	440b      	add	r3, r1
 8001c94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c98:	e00a      	b.n	8001cb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	b2da      	uxtb	r2, r3
 8001c9e:	4908      	ldr	r1, [pc, #32]	; (8001cc0 <__NVIC_SetPriority+0x50>)
 8001ca0:	79fb      	ldrb	r3, [r7, #7]
 8001ca2:	f003 030f 	and.w	r3, r3, #15
 8001ca6:	3b04      	subs	r3, #4
 8001ca8:	0112      	lsls	r2, r2, #4
 8001caa:	b2d2      	uxtb	r2, r2
 8001cac:	440b      	add	r3, r1
 8001cae:	761a      	strb	r2, [r3, #24]
}
 8001cb0:	bf00      	nop
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr
 8001cbc:	e000e100 	.word	0xe000e100
 8001cc0:	e000ed00 	.word	0xe000ed00

08001cc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b089      	sub	sp, #36	; 0x24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	60b9      	str	r1, [r7, #8]
 8001cce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f003 0307 	and.w	r3, r3, #7
 8001cd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	f1c3 0307 	rsb	r3, r3, #7
 8001cde:	2b04      	cmp	r3, #4
 8001ce0:	bf28      	it	cs
 8001ce2:	2304      	movcs	r3, #4
 8001ce4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	3304      	adds	r3, #4
 8001cea:	2b06      	cmp	r3, #6
 8001cec:	d902      	bls.n	8001cf4 <NVIC_EncodePriority+0x30>
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	3b03      	subs	r3, #3
 8001cf2:	e000      	b.n	8001cf6 <NVIC_EncodePriority+0x32>
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001d02:	43da      	mvns	r2, r3
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	401a      	ands	r2, r3
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	fa01 f303 	lsl.w	r3, r1, r3
 8001d16:	43d9      	mvns	r1, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d1c:	4313      	orrs	r3, r2
         );
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3724      	adds	r7, #36	; 0x24
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
	...

08001d2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	3b01      	subs	r3, #1
 8001d38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d3c:	d301      	bcc.n	8001d42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e00f      	b.n	8001d62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d42:	4a0a      	ldr	r2, [pc, #40]	; (8001d6c <SysTick_Config+0x40>)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	3b01      	subs	r3, #1
 8001d48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d4a:	210f      	movs	r1, #15
 8001d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d50:	f7ff ff8e 	bl	8001c70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d54:	4b05      	ldr	r3, [pc, #20]	; (8001d6c <SysTick_Config+0x40>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d5a:	4b04      	ldr	r3, [pc, #16]	; (8001d6c <SysTick_Config+0x40>)
 8001d5c:	2207      	movs	r2, #7
 8001d5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	e000e010 	.word	0xe000e010

08001d70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f7ff ff29 	bl	8001bd0 <__NVIC_SetPriorityGrouping>
}
 8001d7e:	bf00      	nop
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b086      	sub	sp, #24
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	60b9      	str	r1, [r7, #8]
 8001d90:	607a      	str	r2, [r7, #4]
 8001d92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d94:	2300      	movs	r3, #0
 8001d96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d98:	f7ff ff3e 	bl	8001c18 <__NVIC_GetPriorityGrouping>
 8001d9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	68b9      	ldr	r1, [r7, #8]
 8001da2:	6978      	ldr	r0, [r7, #20]
 8001da4:	f7ff ff8e 	bl	8001cc4 <NVIC_EncodePriority>
 8001da8:	4602      	mov	r2, r0
 8001daa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dae:	4611      	mov	r1, r2
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7ff ff5d 	bl	8001c70 <__NVIC_SetPriority>
}
 8001db6:	bf00      	nop
 8001db8:	3718      	adds	r7, #24
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b082      	sub	sp, #8
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7ff ff31 	bl	8001c34 <__NVIC_EnableIRQ>
}
 8001dd2:	bf00      	nop
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b082      	sub	sp, #8
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f7ff ffa2 	bl	8001d2c <SysTick_Config>
 8001de8:	4603      	mov	r3, r0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
	...

08001df4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b086      	sub	sp, #24
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e00:	f7ff feb8 	bl	8001b74 <HAL_GetTick>
 8001e04:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d101      	bne.n	8001e10 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e099      	b.n	8001f44 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2202      	movs	r2, #2
 8001e1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f022 0201 	bic.w	r2, r2, #1
 8001e2e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e30:	e00f      	b.n	8001e52 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e32:	f7ff fe9f 	bl	8001b74 <HAL_GetTick>
 8001e36:	4602      	mov	r2, r0
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	2b05      	cmp	r3, #5
 8001e3e:	d908      	bls.n	8001e52 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2220      	movs	r2, #32
 8001e44:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2203      	movs	r2, #3
 8001e4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e078      	b.n	8001f44 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0301 	and.w	r3, r3, #1
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d1e8      	bne.n	8001e32 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e68:	697a      	ldr	r2, [r7, #20]
 8001e6a:	4b38      	ldr	r3, [pc, #224]	; (8001f4c <HAL_DMA_Init+0x158>)
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	685a      	ldr	r2, [r3, #4]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	691b      	ldr	r3, [r3, #16]
 8001e84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	699b      	ldr	r3, [r3, #24]
 8001e90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e96:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6a1b      	ldr	r3, [r3, #32]
 8001e9c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e9e:	697a      	ldr	r2, [r7, #20]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea8:	2b04      	cmp	r3, #4
 8001eaa:	d107      	bne.n	8001ebc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	697a      	ldr	r2, [r7, #20]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	697a      	ldr	r2, [r7, #20]
 8001ec2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	695b      	ldr	r3, [r3, #20]
 8001eca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	f023 0307 	bic.w	r3, r3, #7
 8001ed2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed8:	697a      	ldr	r2, [r7, #20]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee2:	2b04      	cmp	r3, #4
 8001ee4:	d117      	bne.n	8001f16 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eea:	697a      	ldr	r2, [r7, #20]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d00e      	beq.n	8001f16 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f000 fa91 	bl	8002420 <DMA_CheckFifoParam>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d008      	beq.n	8001f16 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2240      	movs	r2, #64	; 0x40
 8001f08:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001f12:	2301      	movs	r3, #1
 8001f14:	e016      	b.n	8001f44 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	697a      	ldr	r2, [r7, #20]
 8001f1c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f000 fa48 	bl	80023b4 <DMA_CalcBaseAndBitshift>
 8001f24:	4603      	mov	r3, r0
 8001f26:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f2c:	223f      	movs	r2, #63	; 0x3f
 8001f2e:	409a      	lsls	r2, r3
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2200      	movs	r2, #0
 8001f38:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001f42:	2300      	movs	r3, #0
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3718      	adds	r7, #24
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	f010803f 	.word	0xf010803f

08001f50 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b086      	sub	sp, #24
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	60f8      	str	r0, [r7, #12]
 8001f58:	60b9      	str	r1, [r7, #8]
 8001f5a:	607a      	str	r2, [r7, #4]
 8001f5c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f66:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d101      	bne.n	8001f76 <HAL_DMA_Start_IT+0x26>
 8001f72:	2302      	movs	r3, #2
 8001f74:	e040      	b.n	8001ff8 <HAL_DMA_Start_IT+0xa8>
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2201      	movs	r2, #1
 8001f7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d12f      	bne.n	8001fea <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2202      	movs	r2, #2
 8001f8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2200      	movs	r2, #0
 8001f96:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	68b9      	ldr	r1, [r7, #8]
 8001f9e:	68f8      	ldr	r0, [r7, #12]
 8001fa0:	f000 f9da 	bl	8002358 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fa8:	223f      	movs	r2, #63	; 0x3f
 8001faa:	409a      	lsls	r2, r3
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f042 0216 	orr.w	r2, r2, #22
 8001fbe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d007      	beq.n	8001fd8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f042 0208 	orr.w	r2, r2, #8
 8001fd6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f042 0201 	orr.w	r2, r2, #1
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	e005      	b.n	8001ff6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2200      	movs	r2, #0
 8001fee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001ff6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3718      	adds	r7, #24
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800200e:	b2db      	uxtb	r3, r3
 8002010:	2b02      	cmp	r3, #2
 8002012:	d004      	beq.n	800201e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2280      	movs	r2, #128	; 0x80
 8002018:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e00c      	b.n	8002038 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2205      	movs	r2, #5
 8002022:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f022 0201 	bic.w	r2, r2, #1
 8002034:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002036:	2300      	movs	r3, #0
}
 8002038:	4618      	mov	r0, r3
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b086      	sub	sp, #24
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800204c:	2300      	movs	r3, #0
 800204e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002050:	4b92      	ldr	r3, [pc, #584]	; (800229c <HAL_DMA_IRQHandler+0x258>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a92      	ldr	r2, [pc, #584]	; (80022a0 <HAL_DMA_IRQHandler+0x25c>)
 8002056:	fba2 2303 	umull	r2, r3, r2, r3
 800205a:	0a9b      	lsrs	r3, r3, #10
 800205c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002062:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800206e:	2208      	movs	r2, #8
 8002070:	409a      	lsls	r2, r3
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	4013      	ands	r3, r2
 8002076:	2b00      	cmp	r3, #0
 8002078:	d01a      	beq.n	80020b0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0304 	and.w	r3, r3, #4
 8002084:	2b00      	cmp	r3, #0
 8002086:	d013      	beq.n	80020b0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f022 0204 	bic.w	r2, r2, #4
 8002096:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800209c:	2208      	movs	r2, #8
 800209e:	409a      	lsls	r2, r3
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020a8:	f043 0201 	orr.w	r2, r3, #1
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020b4:	2201      	movs	r2, #1
 80020b6:	409a      	lsls	r2, r3
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	4013      	ands	r3, r2
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d012      	beq.n	80020e6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	695b      	ldr	r3, [r3, #20]
 80020c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d00b      	beq.n	80020e6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d2:	2201      	movs	r2, #1
 80020d4:	409a      	lsls	r2, r3
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020de:	f043 0202 	orr.w	r2, r3, #2
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ea:	2204      	movs	r2, #4
 80020ec:	409a      	lsls	r2, r3
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	4013      	ands	r3, r2
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d012      	beq.n	800211c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0302 	and.w	r3, r3, #2
 8002100:	2b00      	cmp	r3, #0
 8002102:	d00b      	beq.n	800211c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002108:	2204      	movs	r2, #4
 800210a:	409a      	lsls	r2, r3
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002114:	f043 0204 	orr.w	r2, r3, #4
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002120:	2210      	movs	r2, #16
 8002122:	409a      	lsls	r2, r3
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	4013      	ands	r3, r2
 8002128:	2b00      	cmp	r3, #0
 800212a:	d043      	beq.n	80021b4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0308 	and.w	r3, r3, #8
 8002136:	2b00      	cmp	r3, #0
 8002138:	d03c      	beq.n	80021b4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800213e:	2210      	movs	r2, #16
 8002140:	409a      	lsls	r2, r3
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d018      	beq.n	8002186 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d108      	bne.n	8002174 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002166:	2b00      	cmp	r3, #0
 8002168:	d024      	beq.n	80021b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	4798      	blx	r3
 8002172:	e01f      	b.n	80021b4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002178:	2b00      	cmp	r3, #0
 800217a:	d01b      	beq.n	80021b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	4798      	blx	r3
 8002184:	e016      	b.n	80021b4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002190:	2b00      	cmp	r3, #0
 8002192:	d107      	bne.n	80021a4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f022 0208 	bic.w	r2, r2, #8
 80021a2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d003      	beq.n	80021b4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021b8:	2220      	movs	r2, #32
 80021ba:	409a      	lsls	r2, r3
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	4013      	ands	r3, r2
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	f000 808e 	beq.w	80022e2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0310 	and.w	r3, r3, #16
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	f000 8086 	beq.w	80022e2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021da:	2220      	movs	r2, #32
 80021dc:	409a      	lsls	r2, r3
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	2b05      	cmp	r3, #5
 80021ec:	d136      	bne.n	800225c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f022 0216 	bic.w	r2, r2, #22
 80021fc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	695a      	ldr	r2, [r3, #20]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800220c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002212:	2b00      	cmp	r3, #0
 8002214:	d103      	bne.n	800221e <HAL_DMA_IRQHandler+0x1da>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800221a:	2b00      	cmp	r3, #0
 800221c:	d007      	beq.n	800222e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f022 0208 	bic.w	r2, r2, #8
 800222c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002232:	223f      	movs	r2, #63	; 0x3f
 8002234:	409a      	lsls	r2, r3
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2201      	movs	r2, #1
 8002246:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800224e:	2b00      	cmp	r3, #0
 8002250:	d07d      	beq.n	800234e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	4798      	blx	r3
        }
        return;
 800225a:	e078      	b.n	800234e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d01c      	beq.n	80022a4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d108      	bne.n	800228a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227c:	2b00      	cmp	r3, #0
 800227e:	d030      	beq.n	80022e2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	4798      	blx	r3
 8002288:	e02b      	b.n	80022e2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800228e:	2b00      	cmp	r3, #0
 8002290:	d027      	beq.n	80022e2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	4798      	blx	r3
 800229a:	e022      	b.n	80022e2 <HAL_DMA_IRQHandler+0x29e>
 800229c:	20000074 	.word	0x20000074
 80022a0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d10f      	bne.n	80022d2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f022 0210 	bic.w	r2, r2, #16
 80022c0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2201      	movs	r2, #1
 80022ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d003      	beq.n	80022e2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d032      	beq.n	8002350 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ee:	f003 0301 	and.w	r3, r3, #1
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d022      	beq.n	800233c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2205      	movs	r2, #5
 80022fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f022 0201 	bic.w	r2, r2, #1
 800230c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	3301      	adds	r3, #1
 8002312:	60bb      	str	r3, [r7, #8]
 8002314:	697a      	ldr	r2, [r7, #20]
 8002316:	429a      	cmp	r2, r3
 8002318:	d307      	bcc.n	800232a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0301 	and.w	r3, r3, #1
 8002324:	2b00      	cmp	r3, #0
 8002326:	d1f2      	bne.n	800230e <HAL_DMA_IRQHandler+0x2ca>
 8002328:	e000      	b.n	800232c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800232a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2200      	movs	r2, #0
 8002330:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2201      	movs	r2, #1
 8002338:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002340:	2b00      	cmp	r3, #0
 8002342:	d005      	beq.n	8002350 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	4798      	blx	r3
 800234c:	e000      	b.n	8002350 <HAL_DMA_IRQHandler+0x30c>
        return;
 800234e:	bf00      	nop
    }
  }
}
 8002350:	3718      	adds	r7, #24
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop

08002358 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002358:	b480      	push	{r7}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	60f8      	str	r0, [r7, #12]
 8002360:	60b9      	str	r1, [r7, #8]
 8002362:	607a      	str	r2, [r7, #4]
 8002364:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002374:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	683a      	ldr	r2, [r7, #0]
 800237c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	2b40      	cmp	r3, #64	; 0x40
 8002384:	d108      	bne.n	8002398 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	68ba      	ldr	r2, [r7, #8]
 8002394:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002396:	e007      	b.n	80023a8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	68ba      	ldr	r2, [r7, #8]
 800239e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	60da      	str	r2, [r3, #12]
}
 80023a8:	bf00      	nop
 80023aa:	3714      	adds	r7, #20
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b085      	sub	sp, #20
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	3b10      	subs	r3, #16
 80023c4:	4a14      	ldr	r2, [pc, #80]	; (8002418 <DMA_CalcBaseAndBitshift+0x64>)
 80023c6:	fba2 2303 	umull	r2, r3, r2, r3
 80023ca:	091b      	lsrs	r3, r3, #4
 80023cc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80023ce:	4a13      	ldr	r2, [pc, #76]	; (800241c <DMA_CalcBaseAndBitshift+0x68>)
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	4413      	add	r3, r2
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	461a      	mov	r2, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2b03      	cmp	r3, #3
 80023e0:	d909      	bls.n	80023f6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80023ea:	f023 0303 	bic.w	r3, r3, #3
 80023ee:	1d1a      	adds	r2, r3, #4
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	659a      	str	r2, [r3, #88]	; 0x58
 80023f4:	e007      	b.n	8002406 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80023fe:	f023 0303 	bic.w	r3, r3, #3
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800240a:	4618      	mov	r0, r3
 800240c:	3714      	adds	r7, #20
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	aaaaaaab 	.word	0xaaaaaaab
 800241c:	08007e5c 	.word	0x08007e5c

08002420 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002420:	b480      	push	{r7}
 8002422:	b085      	sub	sp, #20
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002428:	2300      	movs	r3, #0
 800242a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002430:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	699b      	ldr	r3, [r3, #24]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d11f      	bne.n	800247a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	2b03      	cmp	r3, #3
 800243e:	d855      	bhi.n	80024ec <DMA_CheckFifoParam+0xcc>
 8002440:	a201      	add	r2, pc, #4	; (adr r2, 8002448 <DMA_CheckFifoParam+0x28>)
 8002442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002446:	bf00      	nop
 8002448:	08002459 	.word	0x08002459
 800244c:	0800246b 	.word	0x0800246b
 8002450:	08002459 	.word	0x08002459
 8002454:	080024ed 	.word	0x080024ed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800245c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d045      	beq.n	80024f0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002468:	e042      	b.n	80024f0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800246e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002472:	d13f      	bne.n	80024f4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002478:	e03c      	b.n	80024f4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	699b      	ldr	r3, [r3, #24]
 800247e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002482:	d121      	bne.n	80024c8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	2b03      	cmp	r3, #3
 8002488:	d836      	bhi.n	80024f8 <DMA_CheckFifoParam+0xd8>
 800248a:	a201      	add	r2, pc, #4	; (adr r2, 8002490 <DMA_CheckFifoParam+0x70>)
 800248c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002490:	080024a1 	.word	0x080024a1
 8002494:	080024a7 	.word	0x080024a7
 8002498:	080024a1 	.word	0x080024a1
 800249c:	080024b9 	.word	0x080024b9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	73fb      	strb	r3, [r7, #15]
      break;
 80024a4:	e02f      	b.n	8002506 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d024      	beq.n	80024fc <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024b6:	e021      	b.n	80024fc <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024bc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80024c0:	d11e      	bne.n	8002500 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80024c6:	e01b      	b.n	8002500 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d902      	bls.n	80024d4 <DMA_CheckFifoParam+0xb4>
 80024ce:	2b03      	cmp	r3, #3
 80024d0:	d003      	beq.n	80024da <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80024d2:	e018      	b.n	8002506 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	73fb      	strb	r3, [r7, #15]
      break;
 80024d8:	e015      	b.n	8002506 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d00e      	beq.n	8002504 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	73fb      	strb	r3, [r7, #15]
      break;
 80024ea:	e00b      	b.n	8002504 <DMA_CheckFifoParam+0xe4>
      break;
 80024ec:	bf00      	nop
 80024ee:	e00a      	b.n	8002506 <DMA_CheckFifoParam+0xe6>
      break;
 80024f0:	bf00      	nop
 80024f2:	e008      	b.n	8002506 <DMA_CheckFifoParam+0xe6>
      break;
 80024f4:	bf00      	nop
 80024f6:	e006      	b.n	8002506 <DMA_CheckFifoParam+0xe6>
      break;
 80024f8:	bf00      	nop
 80024fa:	e004      	b.n	8002506 <DMA_CheckFifoParam+0xe6>
      break;
 80024fc:	bf00      	nop
 80024fe:	e002      	b.n	8002506 <DMA_CheckFifoParam+0xe6>
      break;   
 8002500:	bf00      	nop
 8002502:	e000      	b.n	8002506 <DMA_CheckFifoParam+0xe6>
      break;
 8002504:	bf00      	nop
    }
  } 
  
  return status; 
 8002506:	7bfb      	ldrb	r3, [r7, #15]
}
 8002508:	4618      	mov	r0, r3
 800250a:	3714      	adds	r7, #20
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr

08002514 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002514:	b480      	push	{r7}
 8002516:	b089      	sub	sp, #36	; 0x24
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800251e:	2300      	movs	r3, #0
 8002520:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002522:	2300      	movs	r3, #0
 8002524:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002526:	2300      	movs	r3, #0
 8002528:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800252a:	2300      	movs	r3, #0
 800252c:	61fb      	str	r3, [r7, #28]
 800252e:	e159      	b.n	80027e4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002530:	2201      	movs	r2, #1
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	fa02 f303 	lsl.w	r3, r2, r3
 8002538:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	697a      	ldr	r2, [r7, #20]
 8002540:	4013      	ands	r3, r2
 8002542:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002544:	693a      	ldr	r2, [r7, #16]
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	429a      	cmp	r2, r3
 800254a:	f040 8148 	bne.w	80027de <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d00b      	beq.n	800256e <HAL_GPIO_Init+0x5a>
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	2b02      	cmp	r3, #2
 800255c:	d007      	beq.n	800256e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002562:	2b11      	cmp	r3, #17
 8002564:	d003      	beq.n	800256e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	2b12      	cmp	r3, #18
 800256c:	d130      	bne.n	80025d0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	005b      	lsls	r3, r3, #1
 8002578:	2203      	movs	r2, #3
 800257a:	fa02 f303 	lsl.w	r3, r2, r3
 800257e:	43db      	mvns	r3, r3
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	4013      	ands	r3, r2
 8002584:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	68da      	ldr	r2, [r3, #12]
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	fa02 f303 	lsl.w	r3, r2, r3
 8002592:	69ba      	ldr	r2, [r7, #24]
 8002594:	4313      	orrs	r3, r2
 8002596:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	69ba      	ldr	r2, [r7, #24]
 800259c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025a4:	2201      	movs	r2, #1
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	43db      	mvns	r3, r3
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	4013      	ands	r3, r2
 80025b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	091b      	lsrs	r3, r3, #4
 80025ba:	f003 0201 	and.w	r2, r3, #1
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	fa02 f303 	lsl.w	r3, r2, r3
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	2203      	movs	r2, #3
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	43db      	mvns	r3, r3
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	4013      	ands	r3, r2
 80025e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	689a      	ldr	r2, [r3, #8]
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	2b02      	cmp	r3, #2
 8002606:	d003      	beq.n	8002610 <HAL_GPIO_Init+0xfc>
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	2b12      	cmp	r3, #18
 800260e:	d123      	bne.n	8002658 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	08da      	lsrs	r2, r3, #3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	3208      	adds	r2, #8
 8002618:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800261c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	f003 0307 	and.w	r3, r3, #7
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	220f      	movs	r2, #15
 8002628:	fa02 f303 	lsl.w	r3, r2, r3
 800262c:	43db      	mvns	r3, r3
 800262e:	69ba      	ldr	r2, [r7, #24]
 8002630:	4013      	ands	r3, r2
 8002632:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	691a      	ldr	r2, [r3, #16]
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	f003 0307 	and.w	r3, r3, #7
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	fa02 f303 	lsl.w	r3, r2, r3
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	4313      	orrs	r3, r2
 8002648:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	08da      	lsrs	r2, r3, #3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	3208      	adds	r2, #8
 8002652:	69b9      	ldr	r1, [r7, #24]
 8002654:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	005b      	lsls	r3, r3, #1
 8002662:	2203      	movs	r2, #3
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	43db      	mvns	r3, r3
 800266a:	69ba      	ldr	r2, [r7, #24]
 800266c:	4013      	ands	r3, r2
 800266e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f003 0203 	and.w	r2, r3, #3
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	005b      	lsls	r3, r3, #1
 800267c:	fa02 f303 	lsl.w	r3, r2, r3
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	4313      	orrs	r3, r2
 8002684:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002694:	2b00      	cmp	r3, #0
 8002696:	f000 80a2 	beq.w	80027de <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800269a:	2300      	movs	r3, #0
 800269c:	60fb      	str	r3, [r7, #12]
 800269e:	4b56      	ldr	r3, [pc, #344]	; (80027f8 <HAL_GPIO_Init+0x2e4>)
 80026a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a2:	4a55      	ldr	r2, [pc, #340]	; (80027f8 <HAL_GPIO_Init+0x2e4>)
 80026a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026a8:	6453      	str	r3, [r2, #68]	; 0x44
 80026aa:	4b53      	ldr	r3, [pc, #332]	; (80027f8 <HAL_GPIO_Init+0x2e4>)
 80026ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026b2:	60fb      	str	r3, [r7, #12]
 80026b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026b6:	4a51      	ldr	r2, [pc, #324]	; (80027fc <HAL_GPIO_Init+0x2e8>)
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	089b      	lsrs	r3, r3, #2
 80026bc:	3302      	adds	r3, #2
 80026be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	f003 0303 	and.w	r3, r3, #3
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	220f      	movs	r2, #15
 80026ce:	fa02 f303 	lsl.w	r3, r2, r3
 80026d2:	43db      	mvns	r3, r3
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	4013      	ands	r3, r2
 80026d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a48      	ldr	r2, [pc, #288]	; (8002800 <HAL_GPIO_Init+0x2ec>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d019      	beq.n	8002716 <HAL_GPIO_Init+0x202>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a47      	ldr	r2, [pc, #284]	; (8002804 <HAL_GPIO_Init+0x2f0>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d013      	beq.n	8002712 <HAL_GPIO_Init+0x1fe>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a46      	ldr	r2, [pc, #280]	; (8002808 <HAL_GPIO_Init+0x2f4>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d00d      	beq.n	800270e <HAL_GPIO_Init+0x1fa>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a45      	ldr	r2, [pc, #276]	; (800280c <HAL_GPIO_Init+0x2f8>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d007      	beq.n	800270a <HAL_GPIO_Init+0x1f6>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a44      	ldr	r2, [pc, #272]	; (8002810 <HAL_GPIO_Init+0x2fc>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d101      	bne.n	8002706 <HAL_GPIO_Init+0x1f2>
 8002702:	2304      	movs	r3, #4
 8002704:	e008      	b.n	8002718 <HAL_GPIO_Init+0x204>
 8002706:	2307      	movs	r3, #7
 8002708:	e006      	b.n	8002718 <HAL_GPIO_Init+0x204>
 800270a:	2303      	movs	r3, #3
 800270c:	e004      	b.n	8002718 <HAL_GPIO_Init+0x204>
 800270e:	2302      	movs	r3, #2
 8002710:	e002      	b.n	8002718 <HAL_GPIO_Init+0x204>
 8002712:	2301      	movs	r3, #1
 8002714:	e000      	b.n	8002718 <HAL_GPIO_Init+0x204>
 8002716:	2300      	movs	r3, #0
 8002718:	69fa      	ldr	r2, [r7, #28]
 800271a:	f002 0203 	and.w	r2, r2, #3
 800271e:	0092      	lsls	r2, r2, #2
 8002720:	4093      	lsls	r3, r2
 8002722:	69ba      	ldr	r2, [r7, #24]
 8002724:	4313      	orrs	r3, r2
 8002726:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002728:	4934      	ldr	r1, [pc, #208]	; (80027fc <HAL_GPIO_Init+0x2e8>)
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	089b      	lsrs	r3, r3, #2
 800272e:	3302      	adds	r3, #2
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002736:	4b37      	ldr	r3, [pc, #220]	; (8002814 <HAL_GPIO_Init+0x300>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	43db      	mvns	r3, r3
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	4013      	ands	r3, r2
 8002744:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d003      	beq.n	800275a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002752:	69ba      	ldr	r2, [r7, #24]
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	4313      	orrs	r3, r2
 8002758:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800275a:	4a2e      	ldr	r2, [pc, #184]	; (8002814 <HAL_GPIO_Init+0x300>)
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002760:	4b2c      	ldr	r3, [pc, #176]	; (8002814 <HAL_GPIO_Init+0x300>)
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	43db      	mvns	r3, r3
 800276a:	69ba      	ldr	r2, [r7, #24]
 800276c:	4013      	ands	r3, r2
 800276e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d003      	beq.n	8002784 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	4313      	orrs	r3, r2
 8002782:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002784:	4a23      	ldr	r2, [pc, #140]	; (8002814 <HAL_GPIO_Init+0x300>)
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800278a:	4b22      	ldr	r3, [pc, #136]	; (8002814 <HAL_GPIO_Init+0x300>)
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	43db      	mvns	r3, r3
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	4013      	ands	r3, r2
 8002798:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d003      	beq.n	80027ae <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80027a6:	69ba      	ldr	r2, [r7, #24]
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027ae:	4a19      	ldr	r2, [pc, #100]	; (8002814 <HAL_GPIO_Init+0x300>)
 80027b0:	69bb      	ldr	r3, [r7, #24]
 80027b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027b4:	4b17      	ldr	r3, [pc, #92]	; (8002814 <HAL_GPIO_Init+0x300>)
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	43db      	mvns	r3, r3
 80027be:	69ba      	ldr	r2, [r7, #24]
 80027c0:	4013      	ands	r3, r2
 80027c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d003      	beq.n	80027d8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	4313      	orrs	r3, r2
 80027d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027d8:	4a0e      	ldr	r2, [pc, #56]	; (8002814 <HAL_GPIO_Init+0x300>)
 80027da:	69bb      	ldr	r3, [r7, #24]
 80027dc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	3301      	adds	r3, #1
 80027e2:	61fb      	str	r3, [r7, #28]
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	2b0f      	cmp	r3, #15
 80027e8:	f67f aea2 	bls.w	8002530 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027ec:	bf00      	nop
 80027ee:	3724      	adds	r7, #36	; 0x24
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr
 80027f8:	40023800 	.word	0x40023800
 80027fc:	40013800 	.word	0x40013800
 8002800:	40020000 	.word	0x40020000
 8002804:	40020400 	.word	0x40020400
 8002808:	40020800 	.word	0x40020800
 800280c:	40020c00 	.word	0x40020c00
 8002810:	40021000 	.word	0x40021000
 8002814:	40013c00 	.word	0x40013c00

08002818 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	460b      	mov	r3, r1
 8002822:	807b      	strh	r3, [r7, #2]
 8002824:	4613      	mov	r3, r2
 8002826:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002828:	787b      	ldrb	r3, [r7, #1]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d003      	beq.n	8002836 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800282e:	887a      	ldrh	r2, [r7, #2]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002834:	e003      	b.n	800283e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002836:	887b      	ldrh	r3, [r7, #2]
 8002838:	041a      	lsls	r2, r3, #16
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	619a      	str	r2, [r3, #24]
}
 800283e:	bf00      	nop
 8002840:	370c      	adds	r7, #12
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
	...

0800284c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b086      	sub	sp, #24
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d101      	bne.n	800285e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e25b      	b.n	8002d16 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0301 	and.w	r3, r3, #1
 8002866:	2b00      	cmp	r3, #0
 8002868:	d075      	beq.n	8002956 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800286a:	4ba3      	ldr	r3, [pc, #652]	; (8002af8 <HAL_RCC_OscConfig+0x2ac>)
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	f003 030c 	and.w	r3, r3, #12
 8002872:	2b04      	cmp	r3, #4
 8002874:	d00c      	beq.n	8002890 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002876:	4ba0      	ldr	r3, [pc, #640]	; (8002af8 <HAL_RCC_OscConfig+0x2ac>)
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800287e:	2b08      	cmp	r3, #8
 8002880:	d112      	bne.n	80028a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002882:	4b9d      	ldr	r3, [pc, #628]	; (8002af8 <HAL_RCC_OscConfig+0x2ac>)
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800288a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800288e:	d10b      	bne.n	80028a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002890:	4b99      	ldr	r3, [pc, #612]	; (8002af8 <HAL_RCC_OscConfig+0x2ac>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d05b      	beq.n	8002954 <HAL_RCC_OscConfig+0x108>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d157      	bne.n	8002954 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e236      	b.n	8002d16 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028b0:	d106      	bne.n	80028c0 <HAL_RCC_OscConfig+0x74>
 80028b2:	4b91      	ldr	r3, [pc, #580]	; (8002af8 <HAL_RCC_OscConfig+0x2ac>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a90      	ldr	r2, [pc, #576]	; (8002af8 <HAL_RCC_OscConfig+0x2ac>)
 80028b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028bc:	6013      	str	r3, [r2, #0]
 80028be:	e01d      	b.n	80028fc <HAL_RCC_OscConfig+0xb0>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028c8:	d10c      	bne.n	80028e4 <HAL_RCC_OscConfig+0x98>
 80028ca:	4b8b      	ldr	r3, [pc, #556]	; (8002af8 <HAL_RCC_OscConfig+0x2ac>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a8a      	ldr	r2, [pc, #552]	; (8002af8 <HAL_RCC_OscConfig+0x2ac>)
 80028d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028d4:	6013      	str	r3, [r2, #0]
 80028d6:	4b88      	ldr	r3, [pc, #544]	; (8002af8 <HAL_RCC_OscConfig+0x2ac>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a87      	ldr	r2, [pc, #540]	; (8002af8 <HAL_RCC_OscConfig+0x2ac>)
 80028dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028e0:	6013      	str	r3, [r2, #0]
 80028e2:	e00b      	b.n	80028fc <HAL_RCC_OscConfig+0xb0>
 80028e4:	4b84      	ldr	r3, [pc, #528]	; (8002af8 <HAL_RCC_OscConfig+0x2ac>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a83      	ldr	r2, [pc, #524]	; (8002af8 <HAL_RCC_OscConfig+0x2ac>)
 80028ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028ee:	6013      	str	r3, [r2, #0]
 80028f0:	4b81      	ldr	r3, [pc, #516]	; (8002af8 <HAL_RCC_OscConfig+0x2ac>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a80      	ldr	r2, [pc, #512]	; (8002af8 <HAL_RCC_OscConfig+0x2ac>)
 80028f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d013      	beq.n	800292c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002904:	f7ff f936 	bl	8001b74 <HAL_GetTick>
 8002908:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800290a:	e008      	b.n	800291e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800290c:	f7ff f932 	bl	8001b74 <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	2b64      	cmp	r3, #100	; 0x64
 8002918:	d901      	bls.n	800291e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e1fb      	b.n	8002d16 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800291e:	4b76      	ldr	r3, [pc, #472]	; (8002af8 <HAL_RCC_OscConfig+0x2ac>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d0f0      	beq.n	800290c <HAL_RCC_OscConfig+0xc0>
 800292a:	e014      	b.n	8002956 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800292c:	f7ff f922 	bl	8001b74 <HAL_GetTick>
 8002930:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002932:	e008      	b.n	8002946 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002934:	f7ff f91e 	bl	8001b74 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b64      	cmp	r3, #100	; 0x64
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e1e7      	b.n	8002d16 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002946:	4b6c      	ldr	r3, [pc, #432]	; (8002af8 <HAL_RCC_OscConfig+0x2ac>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d1f0      	bne.n	8002934 <HAL_RCC_OscConfig+0xe8>
 8002952:	e000      	b.n	8002956 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002954:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0302 	and.w	r3, r3, #2
 800295e:	2b00      	cmp	r3, #0
 8002960:	d063      	beq.n	8002a2a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002962:	4b65      	ldr	r3, [pc, #404]	; (8002af8 <HAL_RCC_OscConfig+0x2ac>)
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	f003 030c 	and.w	r3, r3, #12
 800296a:	2b00      	cmp	r3, #0
 800296c:	d00b      	beq.n	8002986 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800296e:	4b62      	ldr	r3, [pc, #392]	; (8002af8 <HAL_RCC_OscConfig+0x2ac>)
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002976:	2b08      	cmp	r3, #8
 8002978:	d11c      	bne.n	80029b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800297a:	4b5f      	ldr	r3, [pc, #380]	; (8002af8 <HAL_RCC_OscConfig+0x2ac>)
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d116      	bne.n	80029b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002986:	4b5c      	ldr	r3, [pc, #368]	; (8002af8 <HAL_RCC_OscConfig+0x2ac>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	2b00      	cmp	r3, #0
 8002990:	d005      	beq.n	800299e <HAL_RCC_OscConfig+0x152>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	2b01      	cmp	r3, #1
 8002998:	d001      	beq.n	800299e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e1bb      	b.n	8002d16 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800299e:	4b56      	ldr	r3, [pc, #344]	; (8002af8 <HAL_RCC_OscConfig+0x2ac>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	00db      	lsls	r3, r3, #3
 80029ac:	4952      	ldr	r1, [pc, #328]	; (8002af8 <HAL_RCC_OscConfig+0x2ac>)
 80029ae:	4313      	orrs	r3, r2
 80029b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029b2:	e03a      	b.n	8002a2a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d020      	beq.n	80029fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029bc:	4b4f      	ldr	r3, [pc, #316]	; (8002afc <HAL_RCC_OscConfig+0x2b0>)
 80029be:	2201      	movs	r2, #1
 80029c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c2:	f7ff f8d7 	bl	8001b74 <HAL_GetTick>
 80029c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029c8:	e008      	b.n	80029dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029ca:	f7ff f8d3 	bl	8001b74 <HAL_GetTick>
 80029ce:	4602      	mov	r2, r0
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d901      	bls.n	80029dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80029d8:	2303      	movs	r3, #3
 80029da:	e19c      	b.n	8002d16 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029dc:	4b46      	ldr	r3, [pc, #280]	; (8002af8 <HAL_RCC_OscConfig+0x2ac>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0302 	and.w	r3, r3, #2
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d0f0      	beq.n	80029ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029e8:	4b43      	ldr	r3, [pc, #268]	; (8002af8 <HAL_RCC_OscConfig+0x2ac>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	691b      	ldr	r3, [r3, #16]
 80029f4:	00db      	lsls	r3, r3, #3
 80029f6:	4940      	ldr	r1, [pc, #256]	; (8002af8 <HAL_RCC_OscConfig+0x2ac>)
 80029f8:	4313      	orrs	r3, r2
 80029fa:	600b      	str	r3, [r1, #0]
 80029fc:	e015      	b.n	8002a2a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029fe:	4b3f      	ldr	r3, [pc, #252]	; (8002afc <HAL_RCC_OscConfig+0x2b0>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a04:	f7ff f8b6 	bl	8001b74 <HAL_GetTick>
 8002a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a0a:	e008      	b.n	8002a1e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a0c:	f7ff f8b2 	bl	8001b74 <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d901      	bls.n	8002a1e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e17b      	b.n	8002d16 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a1e:	4b36      	ldr	r3, [pc, #216]	; (8002af8 <HAL_RCC_OscConfig+0x2ac>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d1f0      	bne.n	8002a0c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0308 	and.w	r3, r3, #8
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d030      	beq.n	8002a98 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	695b      	ldr	r3, [r3, #20]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d016      	beq.n	8002a6c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a3e:	4b30      	ldr	r3, [pc, #192]	; (8002b00 <HAL_RCC_OscConfig+0x2b4>)
 8002a40:	2201      	movs	r2, #1
 8002a42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a44:	f7ff f896 	bl	8001b74 <HAL_GetTick>
 8002a48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a4a:	e008      	b.n	8002a5e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a4c:	f7ff f892 	bl	8001b74 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e15b      	b.n	8002d16 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a5e:	4b26      	ldr	r3, [pc, #152]	; (8002af8 <HAL_RCC_OscConfig+0x2ac>)
 8002a60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d0f0      	beq.n	8002a4c <HAL_RCC_OscConfig+0x200>
 8002a6a:	e015      	b.n	8002a98 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a6c:	4b24      	ldr	r3, [pc, #144]	; (8002b00 <HAL_RCC_OscConfig+0x2b4>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a72:	f7ff f87f 	bl	8001b74 <HAL_GetTick>
 8002a76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a78:	e008      	b.n	8002a8c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a7a:	f7ff f87b 	bl	8001b74 <HAL_GetTick>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d901      	bls.n	8002a8c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	e144      	b.n	8002d16 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a8c:	4b1a      	ldr	r3, [pc, #104]	; (8002af8 <HAL_RCC_OscConfig+0x2ac>)
 8002a8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a90:	f003 0302 	and.w	r3, r3, #2
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d1f0      	bne.n	8002a7a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0304 	and.w	r3, r3, #4
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	f000 80a0 	beq.w	8002be6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002aaa:	4b13      	ldr	r3, [pc, #76]	; (8002af8 <HAL_RCC_OscConfig+0x2ac>)
 8002aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d10f      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	60bb      	str	r3, [r7, #8]
 8002aba:	4b0f      	ldr	r3, [pc, #60]	; (8002af8 <HAL_RCC_OscConfig+0x2ac>)
 8002abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abe:	4a0e      	ldr	r2, [pc, #56]	; (8002af8 <HAL_RCC_OscConfig+0x2ac>)
 8002ac0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ac4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ac6:	4b0c      	ldr	r3, [pc, #48]	; (8002af8 <HAL_RCC_OscConfig+0x2ac>)
 8002ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ace:	60bb      	str	r3, [r7, #8]
 8002ad0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ad6:	4b0b      	ldr	r3, [pc, #44]	; (8002b04 <HAL_RCC_OscConfig+0x2b8>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d121      	bne.n	8002b26 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ae2:	4b08      	ldr	r3, [pc, #32]	; (8002b04 <HAL_RCC_OscConfig+0x2b8>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a07      	ldr	r2, [pc, #28]	; (8002b04 <HAL_RCC_OscConfig+0x2b8>)
 8002ae8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002aee:	f7ff f841 	bl	8001b74 <HAL_GetTick>
 8002af2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002af4:	e011      	b.n	8002b1a <HAL_RCC_OscConfig+0x2ce>
 8002af6:	bf00      	nop
 8002af8:	40023800 	.word	0x40023800
 8002afc:	42470000 	.word	0x42470000
 8002b00:	42470e80 	.word	0x42470e80
 8002b04:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b08:	f7ff f834 	bl	8001b74 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e0fd      	b.n	8002d16 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b1a:	4b81      	ldr	r3, [pc, #516]	; (8002d20 <HAL_RCC_OscConfig+0x4d4>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d0f0      	beq.n	8002b08 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d106      	bne.n	8002b3c <HAL_RCC_OscConfig+0x2f0>
 8002b2e:	4b7d      	ldr	r3, [pc, #500]	; (8002d24 <HAL_RCC_OscConfig+0x4d8>)
 8002b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b32:	4a7c      	ldr	r2, [pc, #496]	; (8002d24 <HAL_RCC_OscConfig+0x4d8>)
 8002b34:	f043 0301 	orr.w	r3, r3, #1
 8002b38:	6713      	str	r3, [r2, #112]	; 0x70
 8002b3a:	e01c      	b.n	8002b76 <HAL_RCC_OscConfig+0x32a>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	2b05      	cmp	r3, #5
 8002b42:	d10c      	bne.n	8002b5e <HAL_RCC_OscConfig+0x312>
 8002b44:	4b77      	ldr	r3, [pc, #476]	; (8002d24 <HAL_RCC_OscConfig+0x4d8>)
 8002b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b48:	4a76      	ldr	r2, [pc, #472]	; (8002d24 <HAL_RCC_OscConfig+0x4d8>)
 8002b4a:	f043 0304 	orr.w	r3, r3, #4
 8002b4e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b50:	4b74      	ldr	r3, [pc, #464]	; (8002d24 <HAL_RCC_OscConfig+0x4d8>)
 8002b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b54:	4a73      	ldr	r2, [pc, #460]	; (8002d24 <HAL_RCC_OscConfig+0x4d8>)
 8002b56:	f043 0301 	orr.w	r3, r3, #1
 8002b5a:	6713      	str	r3, [r2, #112]	; 0x70
 8002b5c:	e00b      	b.n	8002b76 <HAL_RCC_OscConfig+0x32a>
 8002b5e:	4b71      	ldr	r3, [pc, #452]	; (8002d24 <HAL_RCC_OscConfig+0x4d8>)
 8002b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b62:	4a70      	ldr	r2, [pc, #448]	; (8002d24 <HAL_RCC_OscConfig+0x4d8>)
 8002b64:	f023 0301 	bic.w	r3, r3, #1
 8002b68:	6713      	str	r3, [r2, #112]	; 0x70
 8002b6a:	4b6e      	ldr	r3, [pc, #440]	; (8002d24 <HAL_RCC_OscConfig+0x4d8>)
 8002b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b6e:	4a6d      	ldr	r2, [pc, #436]	; (8002d24 <HAL_RCC_OscConfig+0x4d8>)
 8002b70:	f023 0304 	bic.w	r3, r3, #4
 8002b74:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d015      	beq.n	8002baa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b7e:	f7fe fff9 	bl	8001b74 <HAL_GetTick>
 8002b82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b84:	e00a      	b.n	8002b9c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b86:	f7fe fff5 	bl	8001b74 <HAL_GetTick>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d901      	bls.n	8002b9c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002b98:	2303      	movs	r3, #3
 8002b9a:	e0bc      	b.n	8002d16 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b9c:	4b61      	ldr	r3, [pc, #388]	; (8002d24 <HAL_RCC_OscConfig+0x4d8>)
 8002b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba0:	f003 0302 	and.w	r3, r3, #2
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d0ee      	beq.n	8002b86 <HAL_RCC_OscConfig+0x33a>
 8002ba8:	e014      	b.n	8002bd4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002baa:	f7fe ffe3 	bl	8001b74 <HAL_GetTick>
 8002bae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bb0:	e00a      	b.n	8002bc8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bb2:	f7fe ffdf 	bl	8001b74 <HAL_GetTick>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d901      	bls.n	8002bc8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	e0a6      	b.n	8002d16 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bc8:	4b56      	ldr	r3, [pc, #344]	; (8002d24 <HAL_RCC_OscConfig+0x4d8>)
 8002bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bcc:	f003 0302 	and.w	r3, r3, #2
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d1ee      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bd4:	7dfb      	ldrb	r3, [r7, #23]
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d105      	bne.n	8002be6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bda:	4b52      	ldr	r3, [pc, #328]	; (8002d24 <HAL_RCC_OscConfig+0x4d8>)
 8002bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bde:	4a51      	ldr	r2, [pc, #324]	; (8002d24 <HAL_RCC_OscConfig+0x4d8>)
 8002be0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002be4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	699b      	ldr	r3, [r3, #24]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	f000 8092 	beq.w	8002d14 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002bf0:	4b4c      	ldr	r3, [pc, #304]	; (8002d24 <HAL_RCC_OscConfig+0x4d8>)
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f003 030c 	and.w	r3, r3, #12
 8002bf8:	2b08      	cmp	r3, #8
 8002bfa:	d05c      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	699b      	ldr	r3, [r3, #24]
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d141      	bne.n	8002c88 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c04:	4b48      	ldr	r3, [pc, #288]	; (8002d28 <HAL_RCC_OscConfig+0x4dc>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c0a:	f7fe ffb3 	bl	8001b74 <HAL_GetTick>
 8002c0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c10:	e008      	b.n	8002c24 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c12:	f7fe ffaf 	bl	8001b74 <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d901      	bls.n	8002c24 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e078      	b.n	8002d16 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c24:	4b3f      	ldr	r3, [pc, #252]	; (8002d24 <HAL_RCC_OscConfig+0x4d8>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d1f0      	bne.n	8002c12 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	69da      	ldr	r2, [r3, #28]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6a1b      	ldr	r3, [r3, #32]
 8002c38:	431a      	orrs	r2, r3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3e:	019b      	lsls	r3, r3, #6
 8002c40:	431a      	orrs	r2, r3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c46:	085b      	lsrs	r3, r3, #1
 8002c48:	3b01      	subs	r3, #1
 8002c4a:	041b      	lsls	r3, r3, #16
 8002c4c:	431a      	orrs	r2, r3
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c52:	061b      	lsls	r3, r3, #24
 8002c54:	4933      	ldr	r1, [pc, #204]	; (8002d24 <HAL_RCC_OscConfig+0x4d8>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c5a:	4b33      	ldr	r3, [pc, #204]	; (8002d28 <HAL_RCC_OscConfig+0x4dc>)
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c60:	f7fe ff88 	bl	8001b74 <HAL_GetTick>
 8002c64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c66:	e008      	b.n	8002c7a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c68:	f7fe ff84 	bl	8001b74 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e04d      	b.n	8002d16 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c7a:	4b2a      	ldr	r3, [pc, #168]	; (8002d24 <HAL_RCC_OscConfig+0x4d8>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d0f0      	beq.n	8002c68 <HAL_RCC_OscConfig+0x41c>
 8002c86:	e045      	b.n	8002d14 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c88:	4b27      	ldr	r3, [pc, #156]	; (8002d28 <HAL_RCC_OscConfig+0x4dc>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c8e:	f7fe ff71 	bl	8001b74 <HAL_GetTick>
 8002c92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c94:	e008      	b.n	8002ca8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c96:	f7fe ff6d 	bl	8001b74 <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d901      	bls.n	8002ca8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e036      	b.n	8002d16 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ca8:	4b1e      	ldr	r3, [pc, #120]	; (8002d24 <HAL_RCC_OscConfig+0x4d8>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d1f0      	bne.n	8002c96 <HAL_RCC_OscConfig+0x44a>
 8002cb4:	e02e      	b.n	8002d14 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	699b      	ldr	r3, [r3, #24]
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d101      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e029      	b.n	8002d16 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002cc2:	4b18      	ldr	r3, [pc, #96]	; (8002d24 <HAL_RCC_OscConfig+0x4d8>)
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	69db      	ldr	r3, [r3, #28]
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d11c      	bne.n	8002d10 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d115      	bne.n	8002d10 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002ce4:	68fa      	ldr	r2, [r7, #12]
 8002ce6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002cea:	4013      	ands	r3, r2
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d10d      	bne.n	8002d10 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d106      	bne.n	8002d10 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d001      	beq.n	8002d14 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e000      	b.n	8002d16 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002d14:	2300      	movs	r3, #0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3718      	adds	r7, #24
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	40007000 	.word	0x40007000
 8002d24:	40023800 	.word	0x40023800
 8002d28:	42470060 	.word	0x42470060

08002d2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d101      	bne.n	8002d40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e0cc      	b.n	8002eda <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d40:	4b68      	ldr	r3, [pc, #416]	; (8002ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 030f 	and.w	r3, r3, #15
 8002d48:	683a      	ldr	r2, [r7, #0]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d90c      	bls.n	8002d68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d4e:	4b65      	ldr	r3, [pc, #404]	; (8002ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d50:	683a      	ldr	r2, [r7, #0]
 8002d52:	b2d2      	uxtb	r2, r2
 8002d54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d56:	4b63      	ldr	r3, [pc, #396]	; (8002ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 030f 	and.w	r3, r3, #15
 8002d5e:	683a      	ldr	r2, [r7, #0]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d001      	beq.n	8002d68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e0b8      	b.n	8002eda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0302 	and.w	r3, r3, #2
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d020      	beq.n	8002db6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0304 	and.w	r3, r3, #4
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d005      	beq.n	8002d8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d80:	4b59      	ldr	r3, [pc, #356]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	4a58      	ldr	r2, [pc, #352]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d86:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d8a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0308 	and.w	r3, r3, #8
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d005      	beq.n	8002da4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d98:	4b53      	ldr	r3, [pc, #332]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	4a52      	ldr	r2, [pc, #328]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d9e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002da2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002da4:	4b50      	ldr	r3, [pc, #320]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	494d      	ldr	r1, [pc, #308]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0301 	and.w	r3, r3, #1
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d044      	beq.n	8002e4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d107      	bne.n	8002dda <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dca:	4b47      	ldr	r3, [pc, #284]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d119      	bne.n	8002e0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e07f      	b.n	8002eda <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d003      	beq.n	8002dea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002de6:	2b03      	cmp	r3, #3
 8002de8:	d107      	bne.n	8002dfa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dea:	4b3f      	ldr	r3, [pc, #252]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d109      	bne.n	8002e0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e06f      	b.n	8002eda <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dfa:	4b3b      	ldr	r3, [pc, #236]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d101      	bne.n	8002e0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e067      	b.n	8002eda <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e0a:	4b37      	ldr	r3, [pc, #220]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f023 0203 	bic.w	r2, r3, #3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	4934      	ldr	r1, [pc, #208]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e1c:	f7fe feaa 	bl	8001b74 <HAL_GetTick>
 8002e20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e22:	e00a      	b.n	8002e3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e24:	f7fe fea6 	bl	8001b74 <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d901      	bls.n	8002e3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e04f      	b.n	8002eda <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e3a:	4b2b      	ldr	r3, [pc, #172]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f003 020c 	and.w	r2, r3, #12
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d1eb      	bne.n	8002e24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e4c:	4b25      	ldr	r3, [pc, #148]	; (8002ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 030f 	and.w	r3, r3, #15
 8002e54:	683a      	ldr	r2, [r7, #0]
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d20c      	bcs.n	8002e74 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e5a:	4b22      	ldr	r3, [pc, #136]	; (8002ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e5c:	683a      	ldr	r2, [r7, #0]
 8002e5e:	b2d2      	uxtb	r2, r2
 8002e60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e62:	4b20      	ldr	r3, [pc, #128]	; (8002ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 030f 	and.w	r3, r3, #15
 8002e6a:	683a      	ldr	r2, [r7, #0]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d001      	beq.n	8002e74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e032      	b.n	8002eda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0304 	and.w	r3, r3, #4
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d008      	beq.n	8002e92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e80:	4b19      	ldr	r3, [pc, #100]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	4916      	ldr	r1, [pc, #88]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0308 	and.w	r3, r3, #8
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d009      	beq.n	8002eb2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e9e:	4b12      	ldr	r3, [pc, #72]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	691b      	ldr	r3, [r3, #16]
 8002eaa:	00db      	lsls	r3, r3, #3
 8002eac:	490e      	ldr	r1, [pc, #56]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002eb2:	f000 f821 	bl	8002ef8 <HAL_RCC_GetSysClockFreq>
 8002eb6:	4601      	mov	r1, r0
 8002eb8:	4b0b      	ldr	r3, [pc, #44]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	091b      	lsrs	r3, r3, #4
 8002ebe:	f003 030f 	and.w	r3, r3, #15
 8002ec2:	4a0a      	ldr	r2, [pc, #40]	; (8002eec <HAL_RCC_ClockConfig+0x1c0>)
 8002ec4:	5cd3      	ldrb	r3, [r2, r3]
 8002ec6:	fa21 f303 	lsr.w	r3, r1, r3
 8002eca:	4a09      	ldr	r2, [pc, #36]	; (8002ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ecc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ece:	4b09      	ldr	r3, [pc, #36]	; (8002ef4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7fe fe0a 	bl	8001aec <HAL_InitTick>

  return HAL_OK;
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3710      	adds	r7, #16
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	40023c00 	.word	0x40023c00
 8002ee8:	40023800 	.word	0x40023800
 8002eec:	08007e44 	.word	0x08007e44
 8002ef0:	20000074 	.word	0x20000074
 8002ef4:	20000078 	.word	0x20000078

08002ef8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002efa:	b085      	sub	sp, #20
 8002efc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002efe:	2300      	movs	r3, #0
 8002f00:	607b      	str	r3, [r7, #4]
 8002f02:	2300      	movs	r3, #0
 8002f04:	60fb      	str	r3, [r7, #12]
 8002f06:	2300      	movs	r3, #0
 8002f08:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f0e:	4b63      	ldr	r3, [pc, #396]	; (800309c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	f003 030c 	and.w	r3, r3, #12
 8002f16:	2b04      	cmp	r3, #4
 8002f18:	d007      	beq.n	8002f2a <HAL_RCC_GetSysClockFreq+0x32>
 8002f1a:	2b08      	cmp	r3, #8
 8002f1c:	d008      	beq.n	8002f30 <HAL_RCC_GetSysClockFreq+0x38>
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	f040 80b4 	bne.w	800308c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f24:	4b5e      	ldr	r3, [pc, #376]	; (80030a0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002f26:	60bb      	str	r3, [r7, #8]
       break;
 8002f28:	e0b3      	b.n	8003092 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f2a:	4b5e      	ldr	r3, [pc, #376]	; (80030a4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002f2c:	60bb      	str	r3, [r7, #8]
      break;
 8002f2e:	e0b0      	b.n	8003092 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f30:	4b5a      	ldr	r3, [pc, #360]	; (800309c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f38:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f3a:	4b58      	ldr	r3, [pc, #352]	; (800309c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d04a      	beq.n	8002fdc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f46:	4b55      	ldr	r3, [pc, #340]	; (800309c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	099b      	lsrs	r3, r3, #6
 8002f4c:	f04f 0400 	mov.w	r4, #0
 8002f50:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002f54:	f04f 0200 	mov.w	r2, #0
 8002f58:	ea03 0501 	and.w	r5, r3, r1
 8002f5c:	ea04 0602 	and.w	r6, r4, r2
 8002f60:	4629      	mov	r1, r5
 8002f62:	4632      	mov	r2, r6
 8002f64:	f04f 0300 	mov.w	r3, #0
 8002f68:	f04f 0400 	mov.w	r4, #0
 8002f6c:	0154      	lsls	r4, r2, #5
 8002f6e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002f72:	014b      	lsls	r3, r1, #5
 8002f74:	4619      	mov	r1, r3
 8002f76:	4622      	mov	r2, r4
 8002f78:	1b49      	subs	r1, r1, r5
 8002f7a:	eb62 0206 	sbc.w	r2, r2, r6
 8002f7e:	f04f 0300 	mov.w	r3, #0
 8002f82:	f04f 0400 	mov.w	r4, #0
 8002f86:	0194      	lsls	r4, r2, #6
 8002f88:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002f8c:	018b      	lsls	r3, r1, #6
 8002f8e:	1a5b      	subs	r3, r3, r1
 8002f90:	eb64 0402 	sbc.w	r4, r4, r2
 8002f94:	f04f 0100 	mov.w	r1, #0
 8002f98:	f04f 0200 	mov.w	r2, #0
 8002f9c:	00e2      	lsls	r2, r4, #3
 8002f9e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002fa2:	00d9      	lsls	r1, r3, #3
 8002fa4:	460b      	mov	r3, r1
 8002fa6:	4614      	mov	r4, r2
 8002fa8:	195b      	adds	r3, r3, r5
 8002faa:	eb44 0406 	adc.w	r4, r4, r6
 8002fae:	f04f 0100 	mov.w	r1, #0
 8002fb2:	f04f 0200 	mov.w	r2, #0
 8002fb6:	0262      	lsls	r2, r4, #9
 8002fb8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002fbc:	0259      	lsls	r1, r3, #9
 8002fbe:	460b      	mov	r3, r1
 8002fc0:	4614      	mov	r4, r2
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	4621      	mov	r1, r4
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f04f 0400 	mov.w	r4, #0
 8002fcc:	461a      	mov	r2, r3
 8002fce:	4623      	mov	r3, r4
 8002fd0:	f7fd fe42 	bl	8000c58 <__aeabi_uldivmod>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	460c      	mov	r4, r1
 8002fd8:	60fb      	str	r3, [r7, #12]
 8002fda:	e049      	b.n	8003070 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fdc:	4b2f      	ldr	r3, [pc, #188]	; (800309c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	099b      	lsrs	r3, r3, #6
 8002fe2:	f04f 0400 	mov.w	r4, #0
 8002fe6:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002fea:	f04f 0200 	mov.w	r2, #0
 8002fee:	ea03 0501 	and.w	r5, r3, r1
 8002ff2:	ea04 0602 	and.w	r6, r4, r2
 8002ff6:	4629      	mov	r1, r5
 8002ff8:	4632      	mov	r2, r6
 8002ffa:	f04f 0300 	mov.w	r3, #0
 8002ffe:	f04f 0400 	mov.w	r4, #0
 8003002:	0154      	lsls	r4, r2, #5
 8003004:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003008:	014b      	lsls	r3, r1, #5
 800300a:	4619      	mov	r1, r3
 800300c:	4622      	mov	r2, r4
 800300e:	1b49      	subs	r1, r1, r5
 8003010:	eb62 0206 	sbc.w	r2, r2, r6
 8003014:	f04f 0300 	mov.w	r3, #0
 8003018:	f04f 0400 	mov.w	r4, #0
 800301c:	0194      	lsls	r4, r2, #6
 800301e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003022:	018b      	lsls	r3, r1, #6
 8003024:	1a5b      	subs	r3, r3, r1
 8003026:	eb64 0402 	sbc.w	r4, r4, r2
 800302a:	f04f 0100 	mov.w	r1, #0
 800302e:	f04f 0200 	mov.w	r2, #0
 8003032:	00e2      	lsls	r2, r4, #3
 8003034:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003038:	00d9      	lsls	r1, r3, #3
 800303a:	460b      	mov	r3, r1
 800303c:	4614      	mov	r4, r2
 800303e:	195b      	adds	r3, r3, r5
 8003040:	eb44 0406 	adc.w	r4, r4, r6
 8003044:	f04f 0100 	mov.w	r1, #0
 8003048:	f04f 0200 	mov.w	r2, #0
 800304c:	02a2      	lsls	r2, r4, #10
 800304e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003052:	0299      	lsls	r1, r3, #10
 8003054:	460b      	mov	r3, r1
 8003056:	4614      	mov	r4, r2
 8003058:	4618      	mov	r0, r3
 800305a:	4621      	mov	r1, r4
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f04f 0400 	mov.w	r4, #0
 8003062:	461a      	mov	r2, r3
 8003064:	4623      	mov	r3, r4
 8003066:	f7fd fdf7 	bl	8000c58 <__aeabi_uldivmod>
 800306a:	4603      	mov	r3, r0
 800306c:	460c      	mov	r4, r1
 800306e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003070:	4b0a      	ldr	r3, [pc, #40]	; (800309c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	0c1b      	lsrs	r3, r3, #16
 8003076:	f003 0303 	and.w	r3, r3, #3
 800307a:	3301      	adds	r3, #1
 800307c:	005b      	lsls	r3, r3, #1
 800307e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003080:	68fa      	ldr	r2, [r7, #12]
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	fbb2 f3f3 	udiv	r3, r2, r3
 8003088:	60bb      	str	r3, [r7, #8]
      break;
 800308a:	e002      	b.n	8003092 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800308c:	4b04      	ldr	r3, [pc, #16]	; (80030a0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800308e:	60bb      	str	r3, [r7, #8]
      break;
 8003090:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003092:	68bb      	ldr	r3, [r7, #8]
}
 8003094:	4618      	mov	r0, r3
 8003096:	3714      	adds	r7, #20
 8003098:	46bd      	mov	sp, r7
 800309a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800309c:	40023800 	.word	0x40023800
 80030a0:	00f42400 	.word	0x00f42400
 80030a4:	007a1200 	.word	0x007a1200

080030a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030a8:	b480      	push	{r7}
 80030aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030ac:	4b03      	ldr	r3, [pc, #12]	; (80030bc <HAL_RCC_GetHCLKFreq+0x14>)
 80030ae:	681b      	ldr	r3, [r3, #0]
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	20000074 	.word	0x20000074

080030c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80030c4:	f7ff fff0 	bl	80030a8 <HAL_RCC_GetHCLKFreq>
 80030c8:	4601      	mov	r1, r0
 80030ca:	4b05      	ldr	r3, [pc, #20]	; (80030e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	0a9b      	lsrs	r3, r3, #10
 80030d0:	f003 0307 	and.w	r3, r3, #7
 80030d4:	4a03      	ldr	r2, [pc, #12]	; (80030e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030d6:	5cd3      	ldrb	r3, [r2, r3]
 80030d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80030dc:	4618      	mov	r0, r3
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	40023800 	.word	0x40023800
 80030e4:	08007e54 	.word	0x08007e54

080030e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80030ec:	f7ff ffdc 	bl	80030a8 <HAL_RCC_GetHCLKFreq>
 80030f0:	4601      	mov	r1, r0
 80030f2:	4b05      	ldr	r3, [pc, #20]	; (8003108 <HAL_RCC_GetPCLK2Freq+0x20>)
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	0b5b      	lsrs	r3, r3, #13
 80030f8:	f003 0307 	and.w	r3, r3, #7
 80030fc:	4a03      	ldr	r2, [pc, #12]	; (800310c <HAL_RCC_GetPCLK2Freq+0x24>)
 80030fe:	5cd3      	ldrb	r3, [r2, r3]
 8003100:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003104:	4618      	mov	r0, r3
 8003106:	bd80      	pop	{r7, pc}
 8003108:	40023800 	.word	0x40023800
 800310c:	08007e54 	.word	0x08007e54

08003110 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d101      	bne.n	8003122 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e056      	b.n	80031d0 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800312e:	b2db      	uxtb	r3, r3
 8003130:	2b00      	cmp	r3, #0
 8003132:	d106      	bne.n	8003142 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f7fe fb03 	bl	8001748 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2202      	movs	r2, #2
 8003146:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003158:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685a      	ldr	r2, [r3, #4]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	431a      	orrs	r2, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	431a      	orrs	r2, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	691b      	ldr	r3, [r3, #16]
 800316e:	431a      	orrs	r2, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	695b      	ldr	r3, [r3, #20]
 8003174:	431a      	orrs	r2, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	699b      	ldr	r3, [r3, #24]
 800317a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800317e:	431a      	orrs	r2, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	69db      	ldr	r3, [r3, #28]
 8003184:	431a      	orrs	r2, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a1b      	ldr	r3, [r3, #32]
 800318a:	ea42 0103 	orr.w	r1, r2, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	430a      	orrs	r2, r1
 8003198:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	699b      	ldr	r3, [r3, #24]
 800319e:	0c1b      	lsrs	r3, r3, #16
 80031a0:	f003 0104 	and.w	r1, r3, #4
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	430a      	orrs	r2, r1
 80031ae:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	69da      	ldr	r2, [r3, #28]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031be:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2201      	movs	r2, #1
 80031ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80031ce:	2300      	movs	r3, #0
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3708      	adds	r7, #8
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b08c      	sub	sp, #48	; 0x30
 80031dc:	af00      	add	r7, sp, #0
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	60b9      	str	r1, [r7, #8]
 80031e2:	607a      	str	r2, [r7, #4]
 80031e4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80031e6:	2301      	movs	r3, #1
 80031e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80031ea:	2300      	movs	r3, #0
 80031ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d101      	bne.n	80031fe <HAL_SPI_TransmitReceive+0x26>
 80031fa:	2302      	movs	r3, #2
 80031fc:	e18a      	b.n	8003514 <HAL_SPI_TransmitReceive+0x33c>
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2201      	movs	r2, #1
 8003202:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003206:	f7fe fcb5 	bl	8001b74 <HAL_GetTick>
 800320a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003212:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800321c:	887b      	ldrh	r3, [r7, #2]
 800321e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003220:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003224:	2b01      	cmp	r3, #1
 8003226:	d00f      	beq.n	8003248 <HAL_SPI_TransmitReceive+0x70>
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800322e:	d107      	bne.n	8003240 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d103      	bne.n	8003240 <HAL_SPI_TransmitReceive+0x68>
 8003238:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800323c:	2b04      	cmp	r3, #4
 800323e:	d003      	beq.n	8003248 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003240:	2302      	movs	r3, #2
 8003242:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003246:	e15b      	b.n	8003500 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d005      	beq.n	800325a <HAL_SPI_TransmitReceive+0x82>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d002      	beq.n	800325a <HAL_SPI_TransmitReceive+0x82>
 8003254:	887b      	ldrh	r3, [r7, #2]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d103      	bne.n	8003262 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003260:	e14e      	b.n	8003500 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003268:	b2db      	uxtb	r3, r3
 800326a:	2b04      	cmp	r3, #4
 800326c:	d003      	beq.n	8003276 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2205      	movs	r2, #5
 8003272:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2200      	movs	r2, #0
 800327a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	887a      	ldrh	r2, [r7, #2]
 8003286:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	887a      	ldrh	r2, [r7, #2]
 800328c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	68ba      	ldr	r2, [r7, #8]
 8003292:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	887a      	ldrh	r2, [r7, #2]
 8003298:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	887a      	ldrh	r2, [r7, #2]
 800329e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2200      	movs	r2, #0
 80032a4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2200      	movs	r2, #0
 80032aa:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032b6:	2b40      	cmp	r3, #64	; 0x40
 80032b8:	d007      	beq.n	80032ca <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032c8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032d2:	d178      	bne.n	80033c6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d002      	beq.n	80032e2 <HAL_SPI_TransmitReceive+0x10a>
 80032dc:	8b7b      	ldrh	r3, [r7, #26]
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d166      	bne.n	80033b0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e6:	881a      	ldrh	r2, [r3, #0]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f2:	1c9a      	adds	r2, r3, #2
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	3b01      	subs	r3, #1
 8003300:	b29a      	uxth	r2, r3
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003306:	e053      	b.n	80033b0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	f003 0302 	and.w	r3, r3, #2
 8003312:	2b02      	cmp	r3, #2
 8003314:	d11b      	bne.n	800334e <HAL_SPI_TransmitReceive+0x176>
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800331a:	b29b      	uxth	r3, r3
 800331c:	2b00      	cmp	r3, #0
 800331e:	d016      	beq.n	800334e <HAL_SPI_TransmitReceive+0x176>
 8003320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003322:	2b01      	cmp	r3, #1
 8003324:	d113      	bne.n	800334e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332a:	881a      	ldrh	r2, [r3, #0]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003336:	1c9a      	adds	r2, r3, #2
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003340:	b29b      	uxth	r3, r3
 8003342:	3b01      	subs	r3, #1
 8003344:	b29a      	uxth	r2, r3
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800334a:	2300      	movs	r3, #0
 800334c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	f003 0301 	and.w	r3, r3, #1
 8003358:	2b01      	cmp	r3, #1
 800335a:	d119      	bne.n	8003390 <HAL_SPI_TransmitReceive+0x1b8>
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003360:	b29b      	uxth	r3, r3
 8003362:	2b00      	cmp	r3, #0
 8003364:	d014      	beq.n	8003390 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	68da      	ldr	r2, [r3, #12]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003370:	b292      	uxth	r2, r2
 8003372:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003378:	1c9a      	adds	r2, r3, #2
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003382:	b29b      	uxth	r3, r3
 8003384:	3b01      	subs	r3, #1
 8003386:	b29a      	uxth	r2, r3
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800338c:	2301      	movs	r3, #1
 800338e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003390:	f7fe fbf0 	bl	8001b74 <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800339c:	429a      	cmp	r2, r3
 800339e:	d807      	bhi.n	80033b0 <HAL_SPI_TransmitReceive+0x1d8>
 80033a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033a6:	d003      	beq.n	80033b0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80033a8:	2303      	movs	r3, #3
 80033aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80033ae:	e0a7      	b.n	8003500 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d1a6      	bne.n	8003308 <HAL_SPI_TransmitReceive+0x130>
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033be:	b29b      	uxth	r3, r3
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d1a1      	bne.n	8003308 <HAL_SPI_TransmitReceive+0x130>
 80033c4:	e07c      	b.n	80034c0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d002      	beq.n	80033d4 <HAL_SPI_TransmitReceive+0x1fc>
 80033ce:	8b7b      	ldrh	r3, [r7, #26]
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d16b      	bne.n	80034ac <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	330c      	adds	r3, #12
 80033de:	7812      	ldrb	r2, [r2, #0]
 80033e0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e6:	1c5a      	adds	r2, r3, #1
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	3b01      	subs	r3, #1
 80033f4:	b29a      	uxth	r2, r3
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033fa:	e057      	b.n	80034ac <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	2b02      	cmp	r3, #2
 8003408:	d11c      	bne.n	8003444 <HAL_SPI_TransmitReceive+0x26c>
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800340e:	b29b      	uxth	r3, r3
 8003410:	2b00      	cmp	r3, #0
 8003412:	d017      	beq.n	8003444 <HAL_SPI_TransmitReceive+0x26c>
 8003414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003416:	2b01      	cmp	r3, #1
 8003418:	d114      	bne.n	8003444 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	330c      	adds	r3, #12
 8003424:	7812      	ldrb	r2, [r2, #0]
 8003426:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342c:	1c5a      	adds	r2, r3, #1
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003436:	b29b      	uxth	r3, r3
 8003438:	3b01      	subs	r3, #1
 800343a:	b29a      	uxth	r2, r3
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003440:	2300      	movs	r3, #0
 8003442:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	f003 0301 	and.w	r3, r3, #1
 800344e:	2b01      	cmp	r3, #1
 8003450:	d119      	bne.n	8003486 <HAL_SPI_TransmitReceive+0x2ae>
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003456:	b29b      	uxth	r3, r3
 8003458:	2b00      	cmp	r3, #0
 800345a:	d014      	beq.n	8003486 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	68da      	ldr	r2, [r3, #12]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003466:	b2d2      	uxtb	r2, r2
 8003468:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800346e:	1c5a      	adds	r2, r3, #1
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003478:	b29b      	uxth	r3, r3
 800347a:	3b01      	subs	r3, #1
 800347c:	b29a      	uxth	r2, r3
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003482:	2301      	movs	r3, #1
 8003484:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003486:	f7fe fb75 	bl	8001b74 <HAL_GetTick>
 800348a:	4602      	mov	r2, r0
 800348c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003492:	429a      	cmp	r2, r3
 8003494:	d803      	bhi.n	800349e <HAL_SPI_TransmitReceive+0x2c6>
 8003496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800349c:	d102      	bne.n	80034a4 <HAL_SPI_TransmitReceive+0x2cc>
 800349e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d103      	bne.n	80034ac <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80034aa:	e029      	b.n	8003500 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d1a2      	bne.n	80033fc <HAL_SPI_TransmitReceive+0x224>
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d19d      	bne.n	80033fc <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80034c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034c2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80034c4:	68f8      	ldr	r0, [r7, #12]
 80034c6:	f000 f9b1 	bl	800382c <SPI_EndRxTxTransaction>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d006      	beq.n	80034de <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2220      	movs	r2, #32
 80034da:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80034dc:	e010      	b.n	8003500 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d10b      	bne.n	80034fe <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80034e6:	2300      	movs	r3, #0
 80034e8:	617b      	str	r3, [r7, #20]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	617b      	str	r3, [r7, #20]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	617b      	str	r3, [r7, #20]
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	e000      	b.n	8003500 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80034fe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2200      	movs	r2, #0
 800350c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003510:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003514:	4618      	mov	r0, r3
 8003516:	3730      	adds	r7, #48	; 0x30
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b088      	sub	sp, #32
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003534:	69bb      	ldr	r3, [r7, #24]
 8003536:	099b      	lsrs	r3, r3, #6
 8003538:	f003 0301 	and.w	r3, r3, #1
 800353c:	2b00      	cmp	r3, #0
 800353e:	d10f      	bne.n	8003560 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003546:	2b00      	cmp	r3, #0
 8003548:	d00a      	beq.n	8003560 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	099b      	lsrs	r3, r3, #6
 800354e:	f003 0301 	and.w	r3, r3, #1
 8003552:	2b00      	cmp	r3, #0
 8003554:	d004      	beq.n	8003560 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	4798      	blx	r3
    return;
 800355e:	e0d8      	b.n	8003712 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003560:	69bb      	ldr	r3, [r7, #24]
 8003562:	085b      	lsrs	r3, r3, #1
 8003564:	f003 0301 	and.w	r3, r3, #1
 8003568:	2b00      	cmp	r3, #0
 800356a:	d00a      	beq.n	8003582 <HAL_SPI_IRQHandler+0x66>
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	09db      	lsrs	r3, r3, #7
 8003570:	f003 0301 	and.w	r3, r3, #1
 8003574:	2b00      	cmp	r3, #0
 8003576:	d004      	beq.n	8003582 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	4798      	blx	r3
    return;
 8003580:	e0c7      	b.n	8003712 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	095b      	lsrs	r3, r3, #5
 8003586:	f003 0301 	and.w	r3, r3, #1
 800358a:	2b00      	cmp	r3, #0
 800358c:	d10c      	bne.n	80035a8 <HAL_SPI_IRQHandler+0x8c>
 800358e:	69bb      	ldr	r3, [r7, #24]
 8003590:	099b      	lsrs	r3, r3, #6
 8003592:	f003 0301 	and.w	r3, r3, #1
 8003596:	2b00      	cmp	r3, #0
 8003598:	d106      	bne.n	80035a8 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800359a:	69bb      	ldr	r3, [r7, #24]
 800359c:	0a1b      	lsrs	r3, r3, #8
 800359e:	f003 0301 	and.w	r3, r3, #1
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	f000 80b5 	beq.w	8003712 <HAL_SPI_IRQHandler+0x1f6>
 80035a8:	69fb      	ldr	r3, [r7, #28]
 80035aa:	095b      	lsrs	r3, r3, #5
 80035ac:	f003 0301 	and.w	r3, r3, #1
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	f000 80ae 	beq.w	8003712 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	099b      	lsrs	r3, r3, #6
 80035ba:	f003 0301 	and.w	r3, r3, #1
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d023      	beq.n	800360a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	2b03      	cmp	r3, #3
 80035cc:	d011      	beq.n	80035f2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035d2:	f043 0204 	orr.w	r2, r3, #4
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80035da:	2300      	movs	r3, #0
 80035dc:	617b      	str	r3, [r7, #20]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	617b      	str	r3, [r7, #20]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	617b      	str	r3, [r7, #20]
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	e00b      	b.n	800360a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80035f2:	2300      	movs	r3, #0
 80035f4:	613b      	str	r3, [r7, #16]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	613b      	str	r3, [r7, #16]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	613b      	str	r3, [r7, #16]
 8003606:	693b      	ldr	r3, [r7, #16]
        return;
 8003608:	e083      	b.n	8003712 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800360a:	69bb      	ldr	r3, [r7, #24]
 800360c:	095b      	lsrs	r3, r3, #5
 800360e:	f003 0301 	and.w	r3, r3, #1
 8003612:	2b00      	cmp	r3, #0
 8003614:	d014      	beq.n	8003640 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800361a:	f043 0201 	orr.w	r2, r3, #1
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003622:	2300      	movs	r3, #0
 8003624:	60fb      	str	r3, [r7, #12]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	60fb      	str	r3, [r7, #12]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800363c:	601a      	str	r2, [r3, #0]
 800363e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	0a1b      	lsrs	r3, r3, #8
 8003644:	f003 0301 	and.w	r3, r3, #1
 8003648:	2b00      	cmp	r3, #0
 800364a:	d00c      	beq.n	8003666 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003650:	f043 0208 	orr.w	r2, r3, #8
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003658:	2300      	movs	r3, #0
 800365a:	60bb      	str	r3, [r7, #8]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	60bb      	str	r3, [r7, #8]
 8003664:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800366a:	2b00      	cmp	r3, #0
 800366c:	d050      	beq.n	8003710 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	685a      	ldr	r2, [r3, #4]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800367c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2201      	movs	r2, #1
 8003682:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	f003 0302 	and.w	r3, r3, #2
 800368c:	2b00      	cmp	r3, #0
 800368e:	d104      	bne.n	800369a <HAL_SPI_IRQHandler+0x17e>
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	f003 0301 	and.w	r3, r3, #1
 8003696:	2b00      	cmp	r3, #0
 8003698:	d034      	beq.n	8003704 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	685a      	ldr	r2, [r3, #4]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f022 0203 	bic.w	r2, r2, #3
 80036a8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d011      	beq.n	80036d6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036b6:	4a18      	ldr	r2, [pc, #96]	; (8003718 <HAL_SPI_IRQHandler+0x1fc>)
 80036b8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036be:	4618      	mov	r0, r3
 80036c0:	f7fe fc9e 	bl	8002000 <HAL_DMA_Abort_IT>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d005      	beq.n	80036d6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d016      	beq.n	800370c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036e2:	4a0d      	ldr	r2, [pc, #52]	; (8003718 <HAL_SPI_IRQHandler+0x1fc>)
 80036e4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036ea:	4618      	mov	r0, r3
 80036ec:	f7fe fc88 	bl	8002000 <HAL_DMA_Abort_IT>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d00a      	beq.n	800370c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036fa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8003702:	e003      	b.n	800370c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f000 f809 	bl	800371c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800370a:	e000      	b.n	800370e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800370c:	bf00      	nop
    return;
 800370e:	bf00      	nop
 8003710:	bf00      	nop
  }
}
 8003712:	3720      	adds	r7, #32
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}
 8003718:	08003731 	.word	0x08003731

0800371c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003724:	bf00      	nop
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800373c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2200      	movs	r2, #0
 8003742:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2200      	movs	r2, #0
 8003748:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800374a:	68f8      	ldr	r0, [r7, #12]
 800374c:	f7ff ffe6 	bl	800371c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003750:	bf00      	nop
 8003752:	3710      	adds	r7, #16
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}

08003758 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	603b      	str	r3, [r7, #0]
 8003764:	4613      	mov	r3, r2
 8003766:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003768:	e04c      	b.n	8003804 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003770:	d048      	beq.n	8003804 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003772:	f7fe f9ff 	bl	8001b74 <HAL_GetTick>
 8003776:	4602      	mov	r2, r0
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	683a      	ldr	r2, [r7, #0]
 800377e:	429a      	cmp	r2, r3
 8003780:	d902      	bls.n	8003788 <SPI_WaitFlagStateUntilTimeout+0x30>
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d13d      	bne.n	8003804 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	685a      	ldr	r2, [r3, #4]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003796:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037a0:	d111      	bne.n	80037c6 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037aa:	d004      	beq.n	80037b6 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037b4:	d107      	bne.n	80037c6 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037c4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037ce:	d10f      	bne.n	80037f0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037de:	601a      	str	r2, [r3, #0]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037ee:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003800:	2303      	movs	r3, #3
 8003802:	e00f      	b.n	8003824 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	689a      	ldr	r2, [r3, #8]
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	4013      	ands	r3, r2
 800380e:	68ba      	ldr	r2, [r7, #8]
 8003810:	429a      	cmp	r2, r3
 8003812:	bf0c      	ite	eq
 8003814:	2301      	moveq	r3, #1
 8003816:	2300      	movne	r3, #0
 8003818:	b2db      	uxtb	r3, r3
 800381a:	461a      	mov	r2, r3
 800381c:	79fb      	ldrb	r3, [r7, #7]
 800381e:	429a      	cmp	r2, r3
 8003820:	d1a3      	bne.n	800376a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003822:	2300      	movs	r3, #0
}
 8003824:	4618      	mov	r0, r3
 8003826:	3710      	adds	r7, #16
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}

0800382c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b088      	sub	sp, #32
 8003830:	af02      	add	r7, sp, #8
 8003832:	60f8      	str	r0, [r7, #12]
 8003834:	60b9      	str	r1, [r7, #8]
 8003836:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003838:	4b1b      	ldr	r3, [pc, #108]	; (80038a8 <SPI_EndRxTxTransaction+0x7c>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a1b      	ldr	r2, [pc, #108]	; (80038ac <SPI_EndRxTxTransaction+0x80>)
 800383e:	fba2 2303 	umull	r2, r3, r2, r3
 8003842:	0d5b      	lsrs	r3, r3, #21
 8003844:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003848:	fb02 f303 	mul.w	r3, r2, r3
 800384c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003856:	d112      	bne.n	800387e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	9300      	str	r3, [sp, #0]
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	2200      	movs	r2, #0
 8003860:	2180      	movs	r1, #128	; 0x80
 8003862:	68f8      	ldr	r0, [r7, #12]
 8003864:	f7ff ff78 	bl	8003758 <SPI_WaitFlagStateUntilTimeout>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d016      	beq.n	800389c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003872:	f043 0220 	orr.w	r2, r3, #32
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e00f      	b.n	800389e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d00a      	beq.n	800389a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	3b01      	subs	r3, #1
 8003888:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003894:	2b80      	cmp	r3, #128	; 0x80
 8003896:	d0f2      	beq.n	800387e <SPI_EndRxTxTransaction+0x52>
 8003898:	e000      	b.n	800389c <SPI_EndRxTxTransaction+0x70>
        break;
 800389a:	bf00      	nop
  }

  return HAL_OK;
 800389c:	2300      	movs	r3, #0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3718      	adds	r7, #24
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	20000074 	.word	0x20000074
 80038ac:	165e9f81 	.word	0x165e9f81

080038b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d101      	bne.n	80038c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e03f      	b.n	8003942 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d106      	bne.n	80038dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f7fd ffa6 	bl	8001828 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2224      	movs	r2, #36	; 0x24
 80038e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	68da      	ldr	r2, [r3, #12]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f000 fb75 	bl	8003fe4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	691a      	ldr	r2, [r3, #16]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003908:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	695a      	ldr	r2, [r3, #20]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003918:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	68da      	ldr	r2, [r3, #12]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003928:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2220      	movs	r2, #32
 8003934:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2220      	movs	r2, #32
 800393c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	3708      	adds	r7, #8
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
	...

0800394c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b086      	sub	sp, #24
 8003950:	af00      	add	r7, sp, #0
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	60b9      	str	r1, [r7, #8]
 8003956:	4613      	mov	r3, r2
 8003958:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003960:	b2db      	uxtb	r3, r3
 8003962:	2b20      	cmp	r3, #32
 8003964:	d153      	bne.n	8003a0e <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d002      	beq.n	8003972 <HAL_UART_Transmit_DMA+0x26>
 800396c:	88fb      	ldrh	r3, [r7, #6]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d101      	bne.n	8003976 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e04c      	b.n	8003a10 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800397c:	2b01      	cmp	r3, #1
 800397e:	d101      	bne.n	8003984 <HAL_UART_Transmit_DMA+0x38>
 8003980:	2302      	movs	r3, #2
 8003982:	e045      	b.n	8003a10 <HAL_UART_Transmit_DMA+0xc4>
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800398c:	68ba      	ldr	r2, [r7, #8]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	88fa      	ldrh	r2, [r7, #6]
 8003996:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	88fa      	ldrh	r2, [r7, #6]
 800399c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2200      	movs	r2, #0
 80039a2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2221      	movs	r2, #33	; 0x21
 80039a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b0:	4a19      	ldr	r2, [pc, #100]	; (8003a18 <HAL_UART_Transmit_DMA+0xcc>)
 80039b2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b8:	4a18      	ldr	r2, [pc, #96]	; (8003a1c <HAL_UART_Transmit_DMA+0xd0>)
 80039ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c0:	4a17      	ldr	r2, [pc, #92]	; (8003a20 <HAL_UART_Transmit_DMA+0xd4>)
 80039c2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c8:	2200      	movs	r2, #0
 80039ca:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 80039cc:	f107 0308 	add.w	r3, r7, #8
 80039d0:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	6819      	ldr	r1, [r3, #0]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	3304      	adds	r3, #4
 80039e0:	461a      	mov	r2, r3
 80039e2:	88fb      	ldrh	r3, [r7, #6]
 80039e4:	f7fe fab4 	bl	8001f50 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80039f0:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	695a      	ldr	r2, [r3, #20]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003a08:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	e000      	b.n	8003a10 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8003a0e:	2302      	movs	r3, #2
  }
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3718      	adds	r7, #24
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	08003c75 	.word	0x08003c75
 8003a1c:	08003cc7 	.word	0x08003cc7
 8003a20:	08003ce3 	.word	0x08003ce3

08003a24 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b088      	sub	sp, #32
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	695b      	ldr	r3, [r3, #20]
 8003a42:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003a44:	2300      	movs	r3, #0
 8003a46:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	f003 030f 	and.w	r3, r3, #15
 8003a52:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d10d      	bne.n	8003a76 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	f003 0320 	and.w	r3, r3, #32
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d008      	beq.n	8003a76 <HAL_UART_IRQHandler+0x52>
 8003a64:	69bb      	ldr	r3, [r7, #24]
 8003a66:	f003 0320 	and.w	r3, r3, #32
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d003      	beq.n	8003a76 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 fa37 	bl	8003ee2 <UART_Receive_IT>
      return;
 8003a74:	e0d1      	b.n	8003c1a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	f000 80b0 	beq.w	8003bde <HAL_UART_IRQHandler+0x1ba>
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	f003 0301 	and.w	r3, r3, #1
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d105      	bne.n	8003a94 <HAL_UART_IRQHandler+0x70>
 8003a88:	69bb      	ldr	r3, [r7, #24]
 8003a8a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	f000 80a5 	beq.w	8003bde <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	f003 0301 	and.w	r3, r3, #1
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d00a      	beq.n	8003ab4 <HAL_UART_IRQHandler+0x90>
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d005      	beq.n	8003ab4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aac:	f043 0201 	orr.w	r2, r3, #1
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	f003 0304 	and.w	r3, r3, #4
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d00a      	beq.n	8003ad4 <HAL_UART_IRQHandler+0xb0>
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	f003 0301 	and.w	r3, r3, #1
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d005      	beq.n	8003ad4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003acc:	f043 0202 	orr.w	r2, r3, #2
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	f003 0302 	and.w	r3, r3, #2
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d00a      	beq.n	8003af4 <HAL_UART_IRQHandler+0xd0>
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	f003 0301 	and.w	r3, r3, #1
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d005      	beq.n	8003af4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aec:	f043 0204 	orr.w	r2, r3, #4
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	f003 0308 	and.w	r3, r3, #8
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d00f      	beq.n	8003b1e <HAL_UART_IRQHandler+0xfa>
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	f003 0320 	and.w	r3, r3, #32
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d104      	bne.n	8003b12 <HAL_UART_IRQHandler+0xee>
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	f003 0301 	and.w	r3, r3, #1
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d005      	beq.n	8003b1e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b16:	f043 0208 	orr.w	r2, r3, #8
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d078      	beq.n	8003c18 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	f003 0320 	and.w	r3, r3, #32
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d007      	beq.n	8003b40 <HAL_UART_IRQHandler+0x11c>
 8003b30:	69bb      	ldr	r3, [r7, #24]
 8003b32:	f003 0320 	and.w	r3, r3, #32
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d002      	beq.n	8003b40 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f000 f9d1 	bl	8003ee2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	695b      	ldr	r3, [r3, #20]
 8003b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b4a:	2b40      	cmp	r3, #64	; 0x40
 8003b4c:	bf0c      	ite	eq
 8003b4e:	2301      	moveq	r3, #1
 8003b50:	2300      	movne	r3, #0
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b5a:	f003 0308 	and.w	r3, r3, #8
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d102      	bne.n	8003b68 <HAL_UART_IRQHandler+0x144>
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d031      	beq.n	8003bcc <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f000 f91a 	bl	8003da2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	695b      	ldr	r3, [r3, #20]
 8003b74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b78:	2b40      	cmp	r3, #64	; 0x40
 8003b7a:	d123      	bne.n	8003bc4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	695a      	ldr	r2, [r3, #20]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b8a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d013      	beq.n	8003bbc <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b98:	4a21      	ldr	r2, [pc, #132]	; (8003c20 <HAL_UART_IRQHandler+0x1fc>)
 8003b9a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f7fe fa2d 	bl	8002000 <HAL_DMA_Abort_IT>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d016      	beq.n	8003bda <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003bb6:	4610      	mov	r0, r2
 8003bb8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bba:	e00e      	b.n	8003bda <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f000 f84f 	bl	8003c60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bc2:	e00a      	b.n	8003bda <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f000 f84b 	bl	8003c60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bca:	e006      	b.n	8003bda <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f000 f847 	bl	8003c60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003bd8:	e01e      	b.n	8003c18 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bda:	bf00      	nop
    return;
 8003bdc:	e01c      	b.n	8003c18 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d008      	beq.n	8003bfa <HAL_UART_IRQHandler+0x1d6>
 8003be8:	69bb      	ldr	r3, [r7, #24]
 8003bea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d003      	beq.n	8003bfa <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f000 f907 	bl	8003e06 <UART_Transmit_IT>
    return;
 8003bf8:	e00f      	b.n	8003c1a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d00a      	beq.n	8003c1a <HAL_UART_IRQHandler+0x1f6>
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d005      	beq.n	8003c1a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f000 f94f 	bl	8003eb2 <UART_EndTransmit_IT>
    return;
 8003c14:	bf00      	nop
 8003c16:	e000      	b.n	8003c1a <HAL_UART_IRQHandler+0x1f6>
    return;
 8003c18:	bf00      	nop
  }
}
 8003c1a:	3720      	adds	r7, #32
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	08003ddf 	.word	0x08003ddf

08003c24 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003c2c:	bf00      	nop
 8003c2e:	370c      	adds	r7, #12
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003c40:	bf00      	nop
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr

08003c4c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003c54:	bf00      	nop
 8003c56:	370c      	adds	r7, #12
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003c68:	bf00      	nop
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c80:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d113      	bne.n	8003cb8 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2200      	movs	r2, #0
 8003c94:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	695a      	ldr	r2, [r3, #20]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ca4:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	68da      	ldr	r2, [r3, #12]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cb4:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003cb6:	e002      	b.n	8003cbe <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8003cb8:	68f8      	ldr	r0, [r7, #12]
 8003cba:	f7ff ffb3 	bl	8003c24 <HAL_UART_TxCpltCallback>
}
 8003cbe:	bf00      	nop
 8003cc0:	3710      	adds	r7, #16
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}

08003cc6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003cc6:	b580      	push	{r7, lr}
 8003cc8:	b084      	sub	sp, #16
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003cd4:	68f8      	ldr	r0, [r7, #12]
 8003cd6:	f7ff ffaf 	bl	8003c38 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003cda:	bf00      	nop
 8003cdc:	3710      	adds	r7, #16
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}

08003ce2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003ce2:	b580      	push	{r7, lr}
 8003ce4:	b084      	sub	sp, #16
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003cea:	2300      	movs	r3, #0
 8003cec:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	695b      	ldr	r3, [r3, #20]
 8003cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cfe:	2b80      	cmp	r3, #128	; 0x80
 8003d00:	bf0c      	ite	eq
 8003d02:	2301      	moveq	r3, #1
 8003d04:	2300      	movne	r3, #0
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	2b21      	cmp	r3, #33	; 0x21
 8003d14:	d108      	bne.n	8003d28 <UART_DMAError+0x46>
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d005      	beq.n	8003d28 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003d22:	68b8      	ldr	r0, [r7, #8]
 8003d24:	f000 f827 	bl	8003d76 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	695b      	ldr	r3, [r3, #20]
 8003d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d32:	2b40      	cmp	r3, #64	; 0x40
 8003d34:	bf0c      	ite	eq
 8003d36:	2301      	moveq	r3, #1
 8003d38:	2300      	movne	r3, #0
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	2b22      	cmp	r3, #34	; 0x22
 8003d48:	d108      	bne.n	8003d5c <UART_DMAError+0x7a>
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d005      	beq.n	8003d5c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	2200      	movs	r2, #0
 8003d54:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003d56:	68b8      	ldr	r0, [r7, #8]
 8003d58:	f000 f823 	bl	8003da2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d60:	f043 0210 	orr.w	r2, r3, #16
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d68:	68b8      	ldr	r0, [r7, #8]
 8003d6a:	f7ff ff79 	bl	8003c60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d6e:	bf00      	nop
 8003d70:	3710      	adds	r7, #16
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}

08003d76 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003d76:	b480      	push	{r7}
 8003d78:	b083      	sub	sp, #12
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	68da      	ldr	r2, [r3, #12]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003d8c:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2220      	movs	r2, #32
 8003d92:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8003d96:	bf00      	nop
 8003d98:	370c      	adds	r7, #12
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr

08003da2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003da2:	b480      	push	{r7}
 8003da4:	b083      	sub	sp, #12
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	68da      	ldr	r2, [r3, #12]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003db8:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	695a      	ldr	r2, [r3, #20]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f022 0201 	bic.w	r2, r2, #1
 8003dc8:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2220      	movs	r2, #32
 8003dce:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003dd2:	bf00      	nop
 8003dd4:	370c      	adds	r7, #12
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr

08003dde <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003dde:	b580      	push	{r7, lr}
 8003de0:	b084      	sub	sp, #16
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2200      	movs	r2, #0
 8003df0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2200      	movs	r2, #0
 8003df6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003df8:	68f8      	ldr	r0, [r7, #12]
 8003dfa:	f7ff ff31 	bl	8003c60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003dfe:	bf00      	nop
 8003e00:	3710      	adds	r7, #16
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}

08003e06 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003e06:	b480      	push	{r7}
 8003e08:	b085      	sub	sp, #20
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	2b21      	cmp	r3, #33	; 0x21
 8003e18:	d144      	bne.n	8003ea4 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e22:	d11a      	bne.n	8003e5a <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a1b      	ldr	r3, [r3, #32]
 8003e28:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	881b      	ldrh	r3, [r3, #0]
 8003e2e:	461a      	mov	r2, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e38:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	691b      	ldr	r3, [r3, #16]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d105      	bne.n	8003e4e <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a1b      	ldr	r3, [r3, #32]
 8003e46:	1c9a      	adds	r2, r3, #2
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	621a      	str	r2, [r3, #32]
 8003e4c:	e00e      	b.n	8003e6c <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a1b      	ldr	r3, [r3, #32]
 8003e52:	1c5a      	adds	r2, r3, #1
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	621a      	str	r2, [r3, #32]
 8003e58:	e008      	b.n	8003e6c <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a1b      	ldr	r3, [r3, #32]
 8003e5e:	1c59      	adds	r1, r3, #1
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	6211      	str	r1, [r2, #32]
 8003e64:	781a      	ldrb	r2, [r3, #0]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	3b01      	subs	r3, #1
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	4619      	mov	r1, r3
 8003e7a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d10f      	bne.n	8003ea0 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	68da      	ldr	r2, [r3, #12]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e8e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68da      	ldr	r2, [r3, #12]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e9e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	e000      	b.n	8003ea6 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003ea4:	2302      	movs	r3, #2
  }
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3714      	adds	r7, #20
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr

08003eb2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003eb2:	b580      	push	{r7, lr}
 8003eb4:	b082      	sub	sp, #8
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	68da      	ldr	r2, [r3, #12]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ec8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2220      	movs	r2, #32
 8003ece:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f7ff fea6 	bl	8003c24 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003ed8:	2300      	movs	r3, #0
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3708      	adds	r7, #8
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}

08003ee2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003ee2:	b580      	push	{r7, lr}
 8003ee4:	b084      	sub	sp, #16
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	2b22      	cmp	r3, #34	; 0x22
 8003ef4:	d171      	bne.n	8003fda <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003efe:	d123      	bne.n	8003f48 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f04:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	691b      	ldr	r3, [r3, #16]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d10e      	bne.n	8003f2c <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f1a:	b29a      	uxth	r2, r3
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f24:	1c9a      	adds	r2, r3, #2
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	629a      	str	r2, [r3, #40]	; 0x28
 8003f2a:	e029      	b.n	8003f80 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	b29a      	uxth	r2, r3
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f40:	1c5a      	adds	r2, r3, #1
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	629a      	str	r2, [r3, #40]	; 0x28
 8003f46:	e01b      	b.n	8003f80 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	691b      	ldr	r3, [r3, #16]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d10a      	bne.n	8003f66 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	6858      	ldr	r0, [r3, #4]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f5a:	1c59      	adds	r1, r3, #1
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	6291      	str	r1, [r2, #40]	; 0x28
 8003f60:	b2c2      	uxtb	r2, r0
 8003f62:	701a      	strb	r2, [r3, #0]
 8003f64:	e00c      	b.n	8003f80 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	b2da      	uxtb	r2, r3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f72:	1c58      	adds	r0, r3, #1
 8003f74:	6879      	ldr	r1, [r7, #4]
 8003f76:	6288      	str	r0, [r1, #40]	; 0x28
 8003f78:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003f7c:	b2d2      	uxtb	r2, r2
 8003f7e:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	3b01      	subs	r3, #1
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	4619      	mov	r1, r3
 8003f8e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d120      	bne.n	8003fd6 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	68da      	ldr	r2, [r3, #12]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f022 0220 	bic.w	r2, r2, #32
 8003fa2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	68da      	ldr	r2, [r3, #12]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003fb2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	695a      	ldr	r2, [r3, #20]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f022 0201 	bic.w	r2, r2, #1
 8003fc2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2220      	movs	r2, #32
 8003fc8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f7ff fe3d 	bl	8003c4c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	e002      	b.n	8003fdc <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	e000      	b.n	8003fdc <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003fda:	2302      	movs	r3, #2
  }
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3710      	adds	r7, #16
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}

08003fe4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fe8:	b085      	sub	sp, #20
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	691b      	ldr	r3, [r3, #16]
 8003ff4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	68da      	ldr	r2, [r3, #12]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	430a      	orrs	r2, r1
 8004002:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	689a      	ldr	r2, [r3, #8]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	691b      	ldr	r3, [r3, #16]
 800400c:	431a      	orrs	r2, r3
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	695b      	ldr	r3, [r3, #20]
 8004012:	431a      	orrs	r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	69db      	ldr	r3, [r3, #28]
 8004018:	4313      	orrs	r3, r2
 800401a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004026:	f023 030c 	bic.w	r3, r3, #12
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	6812      	ldr	r2, [r2, #0]
 800402e:	68f9      	ldr	r1, [r7, #12]
 8004030:	430b      	orrs	r3, r1
 8004032:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	695b      	ldr	r3, [r3, #20]
 800403a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	699a      	ldr	r2, [r3, #24]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	430a      	orrs	r2, r1
 8004048:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	69db      	ldr	r3, [r3, #28]
 800404e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004052:	f040 818b 	bne.w	800436c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4ac1      	ldr	r2, [pc, #772]	; (8004360 <UART_SetConfig+0x37c>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d005      	beq.n	800406c <UART_SetConfig+0x88>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4abf      	ldr	r2, [pc, #764]	; (8004364 <UART_SetConfig+0x380>)
 8004066:	4293      	cmp	r3, r2
 8004068:	f040 80bd 	bne.w	80041e6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800406c:	f7ff f83c 	bl	80030e8 <HAL_RCC_GetPCLK2Freq>
 8004070:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	461d      	mov	r5, r3
 8004076:	f04f 0600 	mov.w	r6, #0
 800407a:	46a8      	mov	r8, r5
 800407c:	46b1      	mov	r9, r6
 800407e:	eb18 0308 	adds.w	r3, r8, r8
 8004082:	eb49 0409 	adc.w	r4, r9, r9
 8004086:	4698      	mov	r8, r3
 8004088:	46a1      	mov	r9, r4
 800408a:	eb18 0805 	adds.w	r8, r8, r5
 800408e:	eb49 0906 	adc.w	r9, r9, r6
 8004092:	f04f 0100 	mov.w	r1, #0
 8004096:	f04f 0200 	mov.w	r2, #0
 800409a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800409e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80040a2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80040a6:	4688      	mov	r8, r1
 80040a8:	4691      	mov	r9, r2
 80040aa:	eb18 0005 	adds.w	r0, r8, r5
 80040ae:	eb49 0106 	adc.w	r1, r9, r6
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	461d      	mov	r5, r3
 80040b8:	f04f 0600 	mov.w	r6, #0
 80040bc:	196b      	adds	r3, r5, r5
 80040be:	eb46 0406 	adc.w	r4, r6, r6
 80040c2:	461a      	mov	r2, r3
 80040c4:	4623      	mov	r3, r4
 80040c6:	f7fc fdc7 	bl	8000c58 <__aeabi_uldivmod>
 80040ca:	4603      	mov	r3, r0
 80040cc:	460c      	mov	r4, r1
 80040ce:	461a      	mov	r2, r3
 80040d0:	4ba5      	ldr	r3, [pc, #660]	; (8004368 <UART_SetConfig+0x384>)
 80040d2:	fba3 2302 	umull	r2, r3, r3, r2
 80040d6:	095b      	lsrs	r3, r3, #5
 80040d8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	461d      	mov	r5, r3
 80040e0:	f04f 0600 	mov.w	r6, #0
 80040e4:	46a9      	mov	r9, r5
 80040e6:	46b2      	mov	sl, r6
 80040e8:	eb19 0309 	adds.w	r3, r9, r9
 80040ec:	eb4a 040a 	adc.w	r4, sl, sl
 80040f0:	4699      	mov	r9, r3
 80040f2:	46a2      	mov	sl, r4
 80040f4:	eb19 0905 	adds.w	r9, r9, r5
 80040f8:	eb4a 0a06 	adc.w	sl, sl, r6
 80040fc:	f04f 0100 	mov.w	r1, #0
 8004100:	f04f 0200 	mov.w	r2, #0
 8004104:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004108:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800410c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004110:	4689      	mov	r9, r1
 8004112:	4692      	mov	sl, r2
 8004114:	eb19 0005 	adds.w	r0, r9, r5
 8004118:	eb4a 0106 	adc.w	r1, sl, r6
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	461d      	mov	r5, r3
 8004122:	f04f 0600 	mov.w	r6, #0
 8004126:	196b      	adds	r3, r5, r5
 8004128:	eb46 0406 	adc.w	r4, r6, r6
 800412c:	461a      	mov	r2, r3
 800412e:	4623      	mov	r3, r4
 8004130:	f7fc fd92 	bl	8000c58 <__aeabi_uldivmod>
 8004134:	4603      	mov	r3, r0
 8004136:	460c      	mov	r4, r1
 8004138:	461a      	mov	r2, r3
 800413a:	4b8b      	ldr	r3, [pc, #556]	; (8004368 <UART_SetConfig+0x384>)
 800413c:	fba3 1302 	umull	r1, r3, r3, r2
 8004140:	095b      	lsrs	r3, r3, #5
 8004142:	2164      	movs	r1, #100	; 0x64
 8004144:	fb01 f303 	mul.w	r3, r1, r3
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	00db      	lsls	r3, r3, #3
 800414c:	3332      	adds	r3, #50	; 0x32
 800414e:	4a86      	ldr	r2, [pc, #536]	; (8004368 <UART_SetConfig+0x384>)
 8004150:	fba2 2303 	umull	r2, r3, r2, r3
 8004154:	095b      	lsrs	r3, r3, #5
 8004156:	005b      	lsls	r3, r3, #1
 8004158:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800415c:	4498      	add	r8, r3
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	461d      	mov	r5, r3
 8004162:	f04f 0600 	mov.w	r6, #0
 8004166:	46a9      	mov	r9, r5
 8004168:	46b2      	mov	sl, r6
 800416a:	eb19 0309 	adds.w	r3, r9, r9
 800416e:	eb4a 040a 	adc.w	r4, sl, sl
 8004172:	4699      	mov	r9, r3
 8004174:	46a2      	mov	sl, r4
 8004176:	eb19 0905 	adds.w	r9, r9, r5
 800417a:	eb4a 0a06 	adc.w	sl, sl, r6
 800417e:	f04f 0100 	mov.w	r1, #0
 8004182:	f04f 0200 	mov.w	r2, #0
 8004186:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800418a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800418e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004192:	4689      	mov	r9, r1
 8004194:	4692      	mov	sl, r2
 8004196:	eb19 0005 	adds.w	r0, r9, r5
 800419a:	eb4a 0106 	adc.w	r1, sl, r6
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	461d      	mov	r5, r3
 80041a4:	f04f 0600 	mov.w	r6, #0
 80041a8:	196b      	adds	r3, r5, r5
 80041aa:	eb46 0406 	adc.w	r4, r6, r6
 80041ae:	461a      	mov	r2, r3
 80041b0:	4623      	mov	r3, r4
 80041b2:	f7fc fd51 	bl	8000c58 <__aeabi_uldivmod>
 80041b6:	4603      	mov	r3, r0
 80041b8:	460c      	mov	r4, r1
 80041ba:	461a      	mov	r2, r3
 80041bc:	4b6a      	ldr	r3, [pc, #424]	; (8004368 <UART_SetConfig+0x384>)
 80041be:	fba3 1302 	umull	r1, r3, r3, r2
 80041c2:	095b      	lsrs	r3, r3, #5
 80041c4:	2164      	movs	r1, #100	; 0x64
 80041c6:	fb01 f303 	mul.w	r3, r1, r3
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	00db      	lsls	r3, r3, #3
 80041ce:	3332      	adds	r3, #50	; 0x32
 80041d0:	4a65      	ldr	r2, [pc, #404]	; (8004368 <UART_SetConfig+0x384>)
 80041d2:	fba2 2303 	umull	r2, r3, r2, r3
 80041d6:	095b      	lsrs	r3, r3, #5
 80041d8:	f003 0207 	and.w	r2, r3, #7
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4442      	add	r2, r8
 80041e2:	609a      	str	r2, [r3, #8]
 80041e4:	e26f      	b.n	80046c6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80041e6:	f7fe ff6b 	bl	80030c0 <HAL_RCC_GetPCLK1Freq>
 80041ea:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	461d      	mov	r5, r3
 80041f0:	f04f 0600 	mov.w	r6, #0
 80041f4:	46a8      	mov	r8, r5
 80041f6:	46b1      	mov	r9, r6
 80041f8:	eb18 0308 	adds.w	r3, r8, r8
 80041fc:	eb49 0409 	adc.w	r4, r9, r9
 8004200:	4698      	mov	r8, r3
 8004202:	46a1      	mov	r9, r4
 8004204:	eb18 0805 	adds.w	r8, r8, r5
 8004208:	eb49 0906 	adc.w	r9, r9, r6
 800420c:	f04f 0100 	mov.w	r1, #0
 8004210:	f04f 0200 	mov.w	r2, #0
 8004214:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004218:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800421c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004220:	4688      	mov	r8, r1
 8004222:	4691      	mov	r9, r2
 8004224:	eb18 0005 	adds.w	r0, r8, r5
 8004228:	eb49 0106 	adc.w	r1, r9, r6
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	461d      	mov	r5, r3
 8004232:	f04f 0600 	mov.w	r6, #0
 8004236:	196b      	adds	r3, r5, r5
 8004238:	eb46 0406 	adc.w	r4, r6, r6
 800423c:	461a      	mov	r2, r3
 800423e:	4623      	mov	r3, r4
 8004240:	f7fc fd0a 	bl	8000c58 <__aeabi_uldivmod>
 8004244:	4603      	mov	r3, r0
 8004246:	460c      	mov	r4, r1
 8004248:	461a      	mov	r2, r3
 800424a:	4b47      	ldr	r3, [pc, #284]	; (8004368 <UART_SetConfig+0x384>)
 800424c:	fba3 2302 	umull	r2, r3, r3, r2
 8004250:	095b      	lsrs	r3, r3, #5
 8004252:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	461d      	mov	r5, r3
 800425a:	f04f 0600 	mov.w	r6, #0
 800425e:	46a9      	mov	r9, r5
 8004260:	46b2      	mov	sl, r6
 8004262:	eb19 0309 	adds.w	r3, r9, r9
 8004266:	eb4a 040a 	adc.w	r4, sl, sl
 800426a:	4699      	mov	r9, r3
 800426c:	46a2      	mov	sl, r4
 800426e:	eb19 0905 	adds.w	r9, r9, r5
 8004272:	eb4a 0a06 	adc.w	sl, sl, r6
 8004276:	f04f 0100 	mov.w	r1, #0
 800427a:	f04f 0200 	mov.w	r2, #0
 800427e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004282:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004286:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800428a:	4689      	mov	r9, r1
 800428c:	4692      	mov	sl, r2
 800428e:	eb19 0005 	adds.w	r0, r9, r5
 8004292:	eb4a 0106 	adc.w	r1, sl, r6
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	461d      	mov	r5, r3
 800429c:	f04f 0600 	mov.w	r6, #0
 80042a0:	196b      	adds	r3, r5, r5
 80042a2:	eb46 0406 	adc.w	r4, r6, r6
 80042a6:	461a      	mov	r2, r3
 80042a8:	4623      	mov	r3, r4
 80042aa:	f7fc fcd5 	bl	8000c58 <__aeabi_uldivmod>
 80042ae:	4603      	mov	r3, r0
 80042b0:	460c      	mov	r4, r1
 80042b2:	461a      	mov	r2, r3
 80042b4:	4b2c      	ldr	r3, [pc, #176]	; (8004368 <UART_SetConfig+0x384>)
 80042b6:	fba3 1302 	umull	r1, r3, r3, r2
 80042ba:	095b      	lsrs	r3, r3, #5
 80042bc:	2164      	movs	r1, #100	; 0x64
 80042be:	fb01 f303 	mul.w	r3, r1, r3
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	00db      	lsls	r3, r3, #3
 80042c6:	3332      	adds	r3, #50	; 0x32
 80042c8:	4a27      	ldr	r2, [pc, #156]	; (8004368 <UART_SetConfig+0x384>)
 80042ca:	fba2 2303 	umull	r2, r3, r2, r3
 80042ce:	095b      	lsrs	r3, r3, #5
 80042d0:	005b      	lsls	r3, r3, #1
 80042d2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80042d6:	4498      	add	r8, r3
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	461d      	mov	r5, r3
 80042dc:	f04f 0600 	mov.w	r6, #0
 80042e0:	46a9      	mov	r9, r5
 80042e2:	46b2      	mov	sl, r6
 80042e4:	eb19 0309 	adds.w	r3, r9, r9
 80042e8:	eb4a 040a 	adc.w	r4, sl, sl
 80042ec:	4699      	mov	r9, r3
 80042ee:	46a2      	mov	sl, r4
 80042f0:	eb19 0905 	adds.w	r9, r9, r5
 80042f4:	eb4a 0a06 	adc.w	sl, sl, r6
 80042f8:	f04f 0100 	mov.w	r1, #0
 80042fc:	f04f 0200 	mov.w	r2, #0
 8004300:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004304:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004308:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800430c:	4689      	mov	r9, r1
 800430e:	4692      	mov	sl, r2
 8004310:	eb19 0005 	adds.w	r0, r9, r5
 8004314:	eb4a 0106 	adc.w	r1, sl, r6
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	461d      	mov	r5, r3
 800431e:	f04f 0600 	mov.w	r6, #0
 8004322:	196b      	adds	r3, r5, r5
 8004324:	eb46 0406 	adc.w	r4, r6, r6
 8004328:	461a      	mov	r2, r3
 800432a:	4623      	mov	r3, r4
 800432c:	f7fc fc94 	bl	8000c58 <__aeabi_uldivmod>
 8004330:	4603      	mov	r3, r0
 8004332:	460c      	mov	r4, r1
 8004334:	461a      	mov	r2, r3
 8004336:	4b0c      	ldr	r3, [pc, #48]	; (8004368 <UART_SetConfig+0x384>)
 8004338:	fba3 1302 	umull	r1, r3, r3, r2
 800433c:	095b      	lsrs	r3, r3, #5
 800433e:	2164      	movs	r1, #100	; 0x64
 8004340:	fb01 f303 	mul.w	r3, r1, r3
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	00db      	lsls	r3, r3, #3
 8004348:	3332      	adds	r3, #50	; 0x32
 800434a:	4a07      	ldr	r2, [pc, #28]	; (8004368 <UART_SetConfig+0x384>)
 800434c:	fba2 2303 	umull	r2, r3, r2, r3
 8004350:	095b      	lsrs	r3, r3, #5
 8004352:	f003 0207 	and.w	r2, r3, #7
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4442      	add	r2, r8
 800435c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800435e:	e1b2      	b.n	80046c6 <UART_SetConfig+0x6e2>
 8004360:	40011000 	.word	0x40011000
 8004364:	40011400 	.word	0x40011400
 8004368:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4ad7      	ldr	r2, [pc, #860]	; (80046d0 <UART_SetConfig+0x6ec>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d005      	beq.n	8004382 <UART_SetConfig+0x39e>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4ad6      	ldr	r2, [pc, #856]	; (80046d4 <UART_SetConfig+0x6f0>)
 800437c:	4293      	cmp	r3, r2
 800437e:	f040 80d1 	bne.w	8004524 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004382:	f7fe feb1 	bl	80030e8 <HAL_RCC_GetPCLK2Freq>
 8004386:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	469a      	mov	sl, r3
 800438c:	f04f 0b00 	mov.w	fp, #0
 8004390:	46d0      	mov	r8, sl
 8004392:	46d9      	mov	r9, fp
 8004394:	eb18 0308 	adds.w	r3, r8, r8
 8004398:	eb49 0409 	adc.w	r4, r9, r9
 800439c:	4698      	mov	r8, r3
 800439e:	46a1      	mov	r9, r4
 80043a0:	eb18 080a 	adds.w	r8, r8, sl
 80043a4:	eb49 090b 	adc.w	r9, r9, fp
 80043a8:	f04f 0100 	mov.w	r1, #0
 80043ac:	f04f 0200 	mov.w	r2, #0
 80043b0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80043b4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80043b8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80043bc:	4688      	mov	r8, r1
 80043be:	4691      	mov	r9, r2
 80043c0:	eb1a 0508 	adds.w	r5, sl, r8
 80043c4:	eb4b 0609 	adc.w	r6, fp, r9
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	4619      	mov	r1, r3
 80043ce:	f04f 0200 	mov.w	r2, #0
 80043d2:	f04f 0300 	mov.w	r3, #0
 80043d6:	f04f 0400 	mov.w	r4, #0
 80043da:	0094      	lsls	r4, r2, #2
 80043dc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80043e0:	008b      	lsls	r3, r1, #2
 80043e2:	461a      	mov	r2, r3
 80043e4:	4623      	mov	r3, r4
 80043e6:	4628      	mov	r0, r5
 80043e8:	4631      	mov	r1, r6
 80043ea:	f7fc fc35 	bl	8000c58 <__aeabi_uldivmod>
 80043ee:	4603      	mov	r3, r0
 80043f0:	460c      	mov	r4, r1
 80043f2:	461a      	mov	r2, r3
 80043f4:	4bb8      	ldr	r3, [pc, #736]	; (80046d8 <UART_SetConfig+0x6f4>)
 80043f6:	fba3 2302 	umull	r2, r3, r3, r2
 80043fa:	095b      	lsrs	r3, r3, #5
 80043fc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	469b      	mov	fp, r3
 8004404:	f04f 0c00 	mov.w	ip, #0
 8004408:	46d9      	mov	r9, fp
 800440a:	46e2      	mov	sl, ip
 800440c:	eb19 0309 	adds.w	r3, r9, r9
 8004410:	eb4a 040a 	adc.w	r4, sl, sl
 8004414:	4699      	mov	r9, r3
 8004416:	46a2      	mov	sl, r4
 8004418:	eb19 090b 	adds.w	r9, r9, fp
 800441c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004420:	f04f 0100 	mov.w	r1, #0
 8004424:	f04f 0200 	mov.w	r2, #0
 8004428:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800442c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004430:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004434:	4689      	mov	r9, r1
 8004436:	4692      	mov	sl, r2
 8004438:	eb1b 0509 	adds.w	r5, fp, r9
 800443c:	eb4c 060a 	adc.w	r6, ip, sl
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	4619      	mov	r1, r3
 8004446:	f04f 0200 	mov.w	r2, #0
 800444a:	f04f 0300 	mov.w	r3, #0
 800444e:	f04f 0400 	mov.w	r4, #0
 8004452:	0094      	lsls	r4, r2, #2
 8004454:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004458:	008b      	lsls	r3, r1, #2
 800445a:	461a      	mov	r2, r3
 800445c:	4623      	mov	r3, r4
 800445e:	4628      	mov	r0, r5
 8004460:	4631      	mov	r1, r6
 8004462:	f7fc fbf9 	bl	8000c58 <__aeabi_uldivmod>
 8004466:	4603      	mov	r3, r0
 8004468:	460c      	mov	r4, r1
 800446a:	461a      	mov	r2, r3
 800446c:	4b9a      	ldr	r3, [pc, #616]	; (80046d8 <UART_SetConfig+0x6f4>)
 800446e:	fba3 1302 	umull	r1, r3, r3, r2
 8004472:	095b      	lsrs	r3, r3, #5
 8004474:	2164      	movs	r1, #100	; 0x64
 8004476:	fb01 f303 	mul.w	r3, r1, r3
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	011b      	lsls	r3, r3, #4
 800447e:	3332      	adds	r3, #50	; 0x32
 8004480:	4a95      	ldr	r2, [pc, #596]	; (80046d8 <UART_SetConfig+0x6f4>)
 8004482:	fba2 2303 	umull	r2, r3, r2, r3
 8004486:	095b      	lsrs	r3, r3, #5
 8004488:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800448c:	4498      	add	r8, r3
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	469b      	mov	fp, r3
 8004492:	f04f 0c00 	mov.w	ip, #0
 8004496:	46d9      	mov	r9, fp
 8004498:	46e2      	mov	sl, ip
 800449a:	eb19 0309 	adds.w	r3, r9, r9
 800449e:	eb4a 040a 	adc.w	r4, sl, sl
 80044a2:	4699      	mov	r9, r3
 80044a4:	46a2      	mov	sl, r4
 80044a6:	eb19 090b 	adds.w	r9, r9, fp
 80044aa:	eb4a 0a0c 	adc.w	sl, sl, ip
 80044ae:	f04f 0100 	mov.w	r1, #0
 80044b2:	f04f 0200 	mov.w	r2, #0
 80044b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80044ba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80044be:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80044c2:	4689      	mov	r9, r1
 80044c4:	4692      	mov	sl, r2
 80044c6:	eb1b 0509 	adds.w	r5, fp, r9
 80044ca:	eb4c 060a 	adc.w	r6, ip, sl
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	4619      	mov	r1, r3
 80044d4:	f04f 0200 	mov.w	r2, #0
 80044d8:	f04f 0300 	mov.w	r3, #0
 80044dc:	f04f 0400 	mov.w	r4, #0
 80044e0:	0094      	lsls	r4, r2, #2
 80044e2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80044e6:	008b      	lsls	r3, r1, #2
 80044e8:	461a      	mov	r2, r3
 80044ea:	4623      	mov	r3, r4
 80044ec:	4628      	mov	r0, r5
 80044ee:	4631      	mov	r1, r6
 80044f0:	f7fc fbb2 	bl	8000c58 <__aeabi_uldivmod>
 80044f4:	4603      	mov	r3, r0
 80044f6:	460c      	mov	r4, r1
 80044f8:	461a      	mov	r2, r3
 80044fa:	4b77      	ldr	r3, [pc, #476]	; (80046d8 <UART_SetConfig+0x6f4>)
 80044fc:	fba3 1302 	umull	r1, r3, r3, r2
 8004500:	095b      	lsrs	r3, r3, #5
 8004502:	2164      	movs	r1, #100	; 0x64
 8004504:	fb01 f303 	mul.w	r3, r1, r3
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	011b      	lsls	r3, r3, #4
 800450c:	3332      	adds	r3, #50	; 0x32
 800450e:	4a72      	ldr	r2, [pc, #456]	; (80046d8 <UART_SetConfig+0x6f4>)
 8004510:	fba2 2303 	umull	r2, r3, r2, r3
 8004514:	095b      	lsrs	r3, r3, #5
 8004516:	f003 020f 	and.w	r2, r3, #15
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4442      	add	r2, r8
 8004520:	609a      	str	r2, [r3, #8]
 8004522:	e0d0      	b.n	80046c6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004524:	f7fe fdcc 	bl	80030c0 <HAL_RCC_GetPCLK1Freq>
 8004528:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	469a      	mov	sl, r3
 800452e:	f04f 0b00 	mov.w	fp, #0
 8004532:	46d0      	mov	r8, sl
 8004534:	46d9      	mov	r9, fp
 8004536:	eb18 0308 	adds.w	r3, r8, r8
 800453a:	eb49 0409 	adc.w	r4, r9, r9
 800453e:	4698      	mov	r8, r3
 8004540:	46a1      	mov	r9, r4
 8004542:	eb18 080a 	adds.w	r8, r8, sl
 8004546:	eb49 090b 	adc.w	r9, r9, fp
 800454a:	f04f 0100 	mov.w	r1, #0
 800454e:	f04f 0200 	mov.w	r2, #0
 8004552:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004556:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800455a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800455e:	4688      	mov	r8, r1
 8004560:	4691      	mov	r9, r2
 8004562:	eb1a 0508 	adds.w	r5, sl, r8
 8004566:	eb4b 0609 	adc.w	r6, fp, r9
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	4619      	mov	r1, r3
 8004570:	f04f 0200 	mov.w	r2, #0
 8004574:	f04f 0300 	mov.w	r3, #0
 8004578:	f04f 0400 	mov.w	r4, #0
 800457c:	0094      	lsls	r4, r2, #2
 800457e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004582:	008b      	lsls	r3, r1, #2
 8004584:	461a      	mov	r2, r3
 8004586:	4623      	mov	r3, r4
 8004588:	4628      	mov	r0, r5
 800458a:	4631      	mov	r1, r6
 800458c:	f7fc fb64 	bl	8000c58 <__aeabi_uldivmod>
 8004590:	4603      	mov	r3, r0
 8004592:	460c      	mov	r4, r1
 8004594:	461a      	mov	r2, r3
 8004596:	4b50      	ldr	r3, [pc, #320]	; (80046d8 <UART_SetConfig+0x6f4>)
 8004598:	fba3 2302 	umull	r2, r3, r3, r2
 800459c:	095b      	lsrs	r3, r3, #5
 800459e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	469b      	mov	fp, r3
 80045a6:	f04f 0c00 	mov.w	ip, #0
 80045aa:	46d9      	mov	r9, fp
 80045ac:	46e2      	mov	sl, ip
 80045ae:	eb19 0309 	adds.w	r3, r9, r9
 80045b2:	eb4a 040a 	adc.w	r4, sl, sl
 80045b6:	4699      	mov	r9, r3
 80045b8:	46a2      	mov	sl, r4
 80045ba:	eb19 090b 	adds.w	r9, r9, fp
 80045be:	eb4a 0a0c 	adc.w	sl, sl, ip
 80045c2:	f04f 0100 	mov.w	r1, #0
 80045c6:	f04f 0200 	mov.w	r2, #0
 80045ca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80045ce:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80045d2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80045d6:	4689      	mov	r9, r1
 80045d8:	4692      	mov	sl, r2
 80045da:	eb1b 0509 	adds.w	r5, fp, r9
 80045de:	eb4c 060a 	adc.w	r6, ip, sl
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	4619      	mov	r1, r3
 80045e8:	f04f 0200 	mov.w	r2, #0
 80045ec:	f04f 0300 	mov.w	r3, #0
 80045f0:	f04f 0400 	mov.w	r4, #0
 80045f4:	0094      	lsls	r4, r2, #2
 80045f6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80045fa:	008b      	lsls	r3, r1, #2
 80045fc:	461a      	mov	r2, r3
 80045fe:	4623      	mov	r3, r4
 8004600:	4628      	mov	r0, r5
 8004602:	4631      	mov	r1, r6
 8004604:	f7fc fb28 	bl	8000c58 <__aeabi_uldivmod>
 8004608:	4603      	mov	r3, r0
 800460a:	460c      	mov	r4, r1
 800460c:	461a      	mov	r2, r3
 800460e:	4b32      	ldr	r3, [pc, #200]	; (80046d8 <UART_SetConfig+0x6f4>)
 8004610:	fba3 1302 	umull	r1, r3, r3, r2
 8004614:	095b      	lsrs	r3, r3, #5
 8004616:	2164      	movs	r1, #100	; 0x64
 8004618:	fb01 f303 	mul.w	r3, r1, r3
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	011b      	lsls	r3, r3, #4
 8004620:	3332      	adds	r3, #50	; 0x32
 8004622:	4a2d      	ldr	r2, [pc, #180]	; (80046d8 <UART_SetConfig+0x6f4>)
 8004624:	fba2 2303 	umull	r2, r3, r2, r3
 8004628:	095b      	lsrs	r3, r3, #5
 800462a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800462e:	4498      	add	r8, r3
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	469b      	mov	fp, r3
 8004634:	f04f 0c00 	mov.w	ip, #0
 8004638:	46d9      	mov	r9, fp
 800463a:	46e2      	mov	sl, ip
 800463c:	eb19 0309 	adds.w	r3, r9, r9
 8004640:	eb4a 040a 	adc.w	r4, sl, sl
 8004644:	4699      	mov	r9, r3
 8004646:	46a2      	mov	sl, r4
 8004648:	eb19 090b 	adds.w	r9, r9, fp
 800464c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004650:	f04f 0100 	mov.w	r1, #0
 8004654:	f04f 0200 	mov.w	r2, #0
 8004658:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800465c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004660:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004664:	4689      	mov	r9, r1
 8004666:	4692      	mov	sl, r2
 8004668:	eb1b 0509 	adds.w	r5, fp, r9
 800466c:	eb4c 060a 	adc.w	r6, ip, sl
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	4619      	mov	r1, r3
 8004676:	f04f 0200 	mov.w	r2, #0
 800467a:	f04f 0300 	mov.w	r3, #0
 800467e:	f04f 0400 	mov.w	r4, #0
 8004682:	0094      	lsls	r4, r2, #2
 8004684:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004688:	008b      	lsls	r3, r1, #2
 800468a:	461a      	mov	r2, r3
 800468c:	4623      	mov	r3, r4
 800468e:	4628      	mov	r0, r5
 8004690:	4631      	mov	r1, r6
 8004692:	f7fc fae1 	bl	8000c58 <__aeabi_uldivmod>
 8004696:	4603      	mov	r3, r0
 8004698:	460c      	mov	r4, r1
 800469a:	461a      	mov	r2, r3
 800469c:	4b0e      	ldr	r3, [pc, #56]	; (80046d8 <UART_SetConfig+0x6f4>)
 800469e:	fba3 1302 	umull	r1, r3, r3, r2
 80046a2:	095b      	lsrs	r3, r3, #5
 80046a4:	2164      	movs	r1, #100	; 0x64
 80046a6:	fb01 f303 	mul.w	r3, r1, r3
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	011b      	lsls	r3, r3, #4
 80046ae:	3332      	adds	r3, #50	; 0x32
 80046b0:	4a09      	ldr	r2, [pc, #36]	; (80046d8 <UART_SetConfig+0x6f4>)
 80046b2:	fba2 2303 	umull	r2, r3, r2, r3
 80046b6:	095b      	lsrs	r3, r3, #5
 80046b8:	f003 020f 	and.w	r2, r3, #15
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4442      	add	r2, r8
 80046c2:	609a      	str	r2, [r3, #8]
}
 80046c4:	e7ff      	b.n	80046c6 <UART_SetConfig+0x6e2>
 80046c6:	bf00      	nop
 80046c8:	3714      	adds	r7, #20
 80046ca:	46bd      	mov	sp, r7
 80046cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046d0:	40011000 	.word	0x40011000
 80046d4:	40011400 	.word	0x40011400
 80046d8:	51eb851f 	.word	0x51eb851f

080046dc <__errno>:
 80046dc:	4b01      	ldr	r3, [pc, #4]	; (80046e4 <__errno+0x8>)
 80046de:	6818      	ldr	r0, [r3, #0]
 80046e0:	4770      	bx	lr
 80046e2:	bf00      	nop
 80046e4:	20000080 	.word	0x20000080

080046e8 <__libc_init_array>:
 80046e8:	b570      	push	{r4, r5, r6, lr}
 80046ea:	4e0d      	ldr	r6, [pc, #52]	; (8004720 <__libc_init_array+0x38>)
 80046ec:	4c0d      	ldr	r4, [pc, #52]	; (8004724 <__libc_init_array+0x3c>)
 80046ee:	1ba4      	subs	r4, r4, r6
 80046f0:	10a4      	asrs	r4, r4, #2
 80046f2:	2500      	movs	r5, #0
 80046f4:	42a5      	cmp	r5, r4
 80046f6:	d109      	bne.n	800470c <__libc_init_array+0x24>
 80046f8:	4e0b      	ldr	r6, [pc, #44]	; (8004728 <__libc_init_array+0x40>)
 80046fa:	4c0c      	ldr	r4, [pc, #48]	; (800472c <__libc_init_array+0x44>)
 80046fc:	f003 fb86 	bl	8007e0c <_init>
 8004700:	1ba4      	subs	r4, r4, r6
 8004702:	10a4      	asrs	r4, r4, #2
 8004704:	2500      	movs	r5, #0
 8004706:	42a5      	cmp	r5, r4
 8004708:	d105      	bne.n	8004716 <__libc_init_array+0x2e>
 800470a:	bd70      	pop	{r4, r5, r6, pc}
 800470c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004710:	4798      	blx	r3
 8004712:	3501      	adds	r5, #1
 8004714:	e7ee      	b.n	80046f4 <__libc_init_array+0xc>
 8004716:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800471a:	4798      	blx	r3
 800471c:	3501      	adds	r5, #1
 800471e:	e7f2      	b.n	8004706 <__libc_init_array+0x1e>
 8004720:	08008118 	.word	0x08008118
 8004724:	08008118 	.word	0x08008118
 8004728:	08008118 	.word	0x08008118
 800472c:	0800811c 	.word	0x0800811c

08004730 <memset>:
 8004730:	4402      	add	r2, r0
 8004732:	4603      	mov	r3, r0
 8004734:	4293      	cmp	r3, r2
 8004736:	d100      	bne.n	800473a <memset+0xa>
 8004738:	4770      	bx	lr
 800473a:	f803 1b01 	strb.w	r1, [r3], #1
 800473e:	e7f9      	b.n	8004734 <memset+0x4>

08004740 <__cvt>:
 8004740:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004744:	ec55 4b10 	vmov	r4, r5, d0
 8004748:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800474a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800474e:	2d00      	cmp	r5, #0
 8004750:	460e      	mov	r6, r1
 8004752:	4691      	mov	r9, r2
 8004754:	4619      	mov	r1, r3
 8004756:	bfb8      	it	lt
 8004758:	4622      	movlt	r2, r4
 800475a:	462b      	mov	r3, r5
 800475c:	f027 0720 	bic.w	r7, r7, #32
 8004760:	bfbb      	ittet	lt
 8004762:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004766:	461d      	movlt	r5, r3
 8004768:	2300      	movge	r3, #0
 800476a:	232d      	movlt	r3, #45	; 0x2d
 800476c:	bfb8      	it	lt
 800476e:	4614      	movlt	r4, r2
 8004770:	2f46      	cmp	r7, #70	; 0x46
 8004772:	700b      	strb	r3, [r1, #0]
 8004774:	d004      	beq.n	8004780 <__cvt+0x40>
 8004776:	2f45      	cmp	r7, #69	; 0x45
 8004778:	d100      	bne.n	800477c <__cvt+0x3c>
 800477a:	3601      	adds	r6, #1
 800477c:	2102      	movs	r1, #2
 800477e:	e000      	b.n	8004782 <__cvt+0x42>
 8004780:	2103      	movs	r1, #3
 8004782:	ab03      	add	r3, sp, #12
 8004784:	9301      	str	r3, [sp, #4]
 8004786:	ab02      	add	r3, sp, #8
 8004788:	9300      	str	r3, [sp, #0]
 800478a:	4632      	mov	r2, r6
 800478c:	4653      	mov	r3, sl
 800478e:	ec45 4b10 	vmov	d0, r4, r5
 8004792:	f000 fcf1 	bl	8005178 <_dtoa_r>
 8004796:	2f47      	cmp	r7, #71	; 0x47
 8004798:	4680      	mov	r8, r0
 800479a:	d102      	bne.n	80047a2 <__cvt+0x62>
 800479c:	f019 0f01 	tst.w	r9, #1
 80047a0:	d026      	beq.n	80047f0 <__cvt+0xb0>
 80047a2:	2f46      	cmp	r7, #70	; 0x46
 80047a4:	eb08 0906 	add.w	r9, r8, r6
 80047a8:	d111      	bne.n	80047ce <__cvt+0x8e>
 80047aa:	f898 3000 	ldrb.w	r3, [r8]
 80047ae:	2b30      	cmp	r3, #48	; 0x30
 80047b0:	d10a      	bne.n	80047c8 <__cvt+0x88>
 80047b2:	2200      	movs	r2, #0
 80047b4:	2300      	movs	r3, #0
 80047b6:	4620      	mov	r0, r4
 80047b8:	4629      	mov	r1, r5
 80047ba:	f7fc f98d 	bl	8000ad8 <__aeabi_dcmpeq>
 80047be:	b918      	cbnz	r0, 80047c8 <__cvt+0x88>
 80047c0:	f1c6 0601 	rsb	r6, r6, #1
 80047c4:	f8ca 6000 	str.w	r6, [sl]
 80047c8:	f8da 3000 	ldr.w	r3, [sl]
 80047cc:	4499      	add	r9, r3
 80047ce:	2200      	movs	r2, #0
 80047d0:	2300      	movs	r3, #0
 80047d2:	4620      	mov	r0, r4
 80047d4:	4629      	mov	r1, r5
 80047d6:	f7fc f97f 	bl	8000ad8 <__aeabi_dcmpeq>
 80047da:	b938      	cbnz	r0, 80047ec <__cvt+0xac>
 80047dc:	2230      	movs	r2, #48	; 0x30
 80047de:	9b03      	ldr	r3, [sp, #12]
 80047e0:	454b      	cmp	r3, r9
 80047e2:	d205      	bcs.n	80047f0 <__cvt+0xb0>
 80047e4:	1c59      	adds	r1, r3, #1
 80047e6:	9103      	str	r1, [sp, #12]
 80047e8:	701a      	strb	r2, [r3, #0]
 80047ea:	e7f8      	b.n	80047de <__cvt+0x9e>
 80047ec:	f8cd 900c 	str.w	r9, [sp, #12]
 80047f0:	9b03      	ldr	r3, [sp, #12]
 80047f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80047f4:	eba3 0308 	sub.w	r3, r3, r8
 80047f8:	4640      	mov	r0, r8
 80047fa:	6013      	str	r3, [r2, #0]
 80047fc:	b004      	add	sp, #16
 80047fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004802 <__exponent>:
 8004802:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004804:	2900      	cmp	r1, #0
 8004806:	4604      	mov	r4, r0
 8004808:	bfba      	itte	lt
 800480a:	4249      	neglt	r1, r1
 800480c:	232d      	movlt	r3, #45	; 0x2d
 800480e:	232b      	movge	r3, #43	; 0x2b
 8004810:	2909      	cmp	r1, #9
 8004812:	f804 2b02 	strb.w	r2, [r4], #2
 8004816:	7043      	strb	r3, [r0, #1]
 8004818:	dd20      	ble.n	800485c <__exponent+0x5a>
 800481a:	f10d 0307 	add.w	r3, sp, #7
 800481e:	461f      	mov	r7, r3
 8004820:	260a      	movs	r6, #10
 8004822:	fb91 f5f6 	sdiv	r5, r1, r6
 8004826:	fb06 1115 	mls	r1, r6, r5, r1
 800482a:	3130      	adds	r1, #48	; 0x30
 800482c:	2d09      	cmp	r5, #9
 800482e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004832:	f103 32ff 	add.w	r2, r3, #4294967295
 8004836:	4629      	mov	r1, r5
 8004838:	dc09      	bgt.n	800484e <__exponent+0x4c>
 800483a:	3130      	adds	r1, #48	; 0x30
 800483c:	3b02      	subs	r3, #2
 800483e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004842:	42bb      	cmp	r3, r7
 8004844:	4622      	mov	r2, r4
 8004846:	d304      	bcc.n	8004852 <__exponent+0x50>
 8004848:	1a10      	subs	r0, r2, r0
 800484a:	b003      	add	sp, #12
 800484c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800484e:	4613      	mov	r3, r2
 8004850:	e7e7      	b.n	8004822 <__exponent+0x20>
 8004852:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004856:	f804 2b01 	strb.w	r2, [r4], #1
 800485a:	e7f2      	b.n	8004842 <__exponent+0x40>
 800485c:	2330      	movs	r3, #48	; 0x30
 800485e:	4419      	add	r1, r3
 8004860:	7083      	strb	r3, [r0, #2]
 8004862:	1d02      	adds	r2, r0, #4
 8004864:	70c1      	strb	r1, [r0, #3]
 8004866:	e7ef      	b.n	8004848 <__exponent+0x46>

08004868 <_printf_float>:
 8004868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800486c:	b08d      	sub	sp, #52	; 0x34
 800486e:	460c      	mov	r4, r1
 8004870:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8004874:	4616      	mov	r6, r2
 8004876:	461f      	mov	r7, r3
 8004878:	4605      	mov	r5, r0
 800487a:	f001 fa35 	bl	8005ce8 <_localeconv_r>
 800487e:	6803      	ldr	r3, [r0, #0]
 8004880:	9304      	str	r3, [sp, #16]
 8004882:	4618      	mov	r0, r3
 8004884:	f7fb fcac 	bl	80001e0 <strlen>
 8004888:	2300      	movs	r3, #0
 800488a:	930a      	str	r3, [sp, #40]	; 0x28
 800488c:	f8d8 3000 	ldr.w	r3, [r8]
 8004890:	9005      	str	r0, [sp, #20]
 8004892:	3307      	adds	r3, #7
 8004894:	f023 0307 	bic.w	r3, r3, #7
 8004898:	f103 0208 	add.w	r2, r3, #8
 800489c:	f894 a018 	ldrb.w	sl, [r4, #24]
 80048a0:	f8d4 b000 	ldr.w	fp, [r4]
 80048a4:	f8c8 2000 	str.w	r2, [r8]
 80048a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ac:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80048b0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80048b4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80048b8:	9307      	str	r3, [sp, #28]
 80048ba:	f8cd 8018 	str.w	r8, [sp, #24]
 80048be:	f04f 32ff 	mov.w	r2, #4294967295
 80048c2:	4ba7      	ldr	r3, [pc, #668]	; (8004b60 <_printf_float+0x2f8>)
 80048c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80048c8:	f7fc f938 	bl	8000b3c <__aeabi_dcmpun>
 80048cc:	bb70      	cbnz	r0, 800492c <_printf_float+0xc4>
 80048ce:	f04f 32ff 	mov.w	r2, #4294967295
 80048d2:	4ba3      	ldr	r3, [pc, #652]	; (8004b60 <_printf_float+0x2f8>)
 80048d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80048d8:	f7fc f912 	bl	8000b00 <__aeabi_dcmple>
 80048dc:	bb30      	cbnz	r0, 800492c <_printf_float+0xc4>
 80048de:	2200      	movs	r2, #0
 80048e0:	2300      	movs	r3, #0
 80048e2:	4640      	mov	r0, r8
 80048e4:	4649      	mov	r1, r9
 80048e6:	f7fc f901 	bl	8000aec <__aeabi_dcmplt>
 80048ea:	b110      	cbz	r0, 80048f2 <_printf_float+0x8a>
 80048ec:	232d      	movs	r3, #45	; 0x2d
 80048ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048f2:	4a9c      	ldr	r2, [pc, #624]	; (8004b64 <_printf_float+0x2fc>)
 80048f4:	4b9c      	ldr	r3, [pc, #624]	; (8004b68 <_printf_float+0x300>)
 80048f6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80048fa:	bf8c      	ite	hi
 80048fc:	4690      	movhi	r8, r2
 80048fe:	4698      	movls	r8, r3
 8004900:	2303      	movs	r3, #3
 8004902:	f02b 0204 	bic.w	r2, fp, #4
 8004906:	6123      	str	r3, [r4, #16]
 8004908:	6022      	str	r2, [r4, #0]
 800490a:	f04f 0900 	mov.w	r9, #0
 800490e:	9700      	str	r7, [sp, #0]
 8004910:	4633      	mov	r3, r6
 8004912:	aa0b      	add	r2, sp, #44	; 0x2c
 8004914:	4621      	mov	r1, r4
 8004916:	4628      	mov	r0, r5
 8004918:	f000 f9e6 	bl	8004ce8 <_printf_common>
 800491c:	3001      	adds	r0, #1
 800491e:	f040 808d 	bne.w	8004a3c <_printf_float+0x1d4>
 8004922:	f04f 30ff 	mov.w	r0, #4294967295
 8004926:	b00d      	add	sp, #52	; 0x34
 8004928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800492c:	4642      	mov	r2, r8
 800492e:	464b      	mov	r3, r9
 8004930:	4640      	mov	r0, r8
 8004932:	4649      	mov	r1, r9
 8004934:	f7fc f902 	bl	8000b3c <__aeabi_dcmpun>
 8004938:	b110      	cbz	r0, 8004940 <_printf_float+0xd8>
 800493a:	4a8c      	ldr	r2, [pc, #560]	; (8004b6c <_printf_float+0x304>)
 800493c:	4b8c      	ldr	r3, [pc, #560]	; (8004b70 <_printf_float+0x308>)
 800493e:	e7da      	b.n	80048f6 <_printf_float+0x8e>
 8004940:	6861      	ldr	r1, [r4, #4]
 8004942:	1c4b      	adds	r3, r1, #1
 8004944:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8004948:	a80a      	add	r0, sp, #40	; 0x28
 800494a:	d13e      	bne.n	80049ca <_printf_float+0x162>
 800494c:	2306      	movs	r3, #6
 800494e:	6063      	str	r3, [r4, #4]
 8004950:	2300      	movs	r3, #0
 8004952:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004956:	ab09      	add	r3, sp, #36	; 0x24
 8004958:	9300      	str	r3, [sp, #0]
 800495a:	ec49 8b10 	vmov	d0, r8, r9
 800495e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004962:	6022      	str	r2, [r4, #0]
 8004964:	f8cd a004 	str.w	sl, [sp, #4]
 8004968:	6861      	ldr	r1, [r4, #4]
 800496a:	4628      	mov	r0, r5
 800496c:	f7ff fee8 	bl	8004740 <__cvt>
 8004970:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8004974:	2b47      	cmp	r3, #71	; 0x47
 8004976:	4680      	mov	r8, r0
 8004978:	d109      	bne.n	800498e <_printf_float+0x126>
 800497a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800497c:	1cd8      	adds	r0, r3, #3
 800497e:	db02      	blt.n	8004986 <_printf_float+0x11e>
 8004980:	6862      	ldr	r2, [r4, #4]
 8004982:	4293      	cmp	r3, r2
 8004984:	dd47      	ble.n	8004a16 <_printf_float+0x1ae>
 8004986:	f1aa 0a02 	sub.w	sl, sl, #2
 800498a:	fa5f fa8a 	uxtb.w	sl, sl
 800498e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004992:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004994:	d824      	bhi.n	80049e0 <_printf_float+0x178>
 8004996:	3901      	subs	r1, #1
 8004998:	4652      	mov	r2, sl
 800499a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800499e:	9109      	str	r1, [sp, #36]	; 0x24
 80049a0:	f7ff ff2f 	bl	8004802 <__exponent>
 80049a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80049a6:	1813      	adds	r3, r2, r0
 80049a8:	2a01      	cmp	r2, #1
 80049aa:	4681      	mov	r9, r0
 80049ac:	6123      	str	r3, [r4, #16]
 80049ae:	dc02      	bgt.n	80049b6 <_printf_float+0x14e>
 80049b0:	6822      	ldr	r2, [r4, #0]
 80049b2:	07d1      	lsls	r1, r2, #31
 80049b4:	d501      	bpl.n	80049ba <_printf_float+0x152>
 80049b6:	3301      	adds	r3, #1
 80049b8:	6123      	str	r3, [r4, #16]
 80049ba:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d0a5      	beq.n	800490e <_printf_float+0xa6>
 80049c2:	232d      	movs	r3, #45	; 0x2d
 80049c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049c8:	e7a1      	b.n	800490e <_printf_float+0xa6>
 80049ca:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80049ce:	f000 8177 	beq.w	8004cc0 <_printf_float+0x458>
 80049d2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80049d6:	d1bb      	bne.n	8004950 <_printf_float+0xe8>
 80049d8:	2900      	cmp	r1, #0
 80049da:	d1b9      	bne.n	8004950 <_printf_float+0xe8>
 80049dc:	2301      	movs	r3, #1
 80049de:	e7b6      	b.n	800494e <_printf_float+0xe6>
 80049e0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80049e4:	d119      	bne.n	8004a1a <_printf_float+0x1b2>
 80049e6:	2900      	cmp	r1, #0
 80049e8:	6863      	ldr	r3, [r4, #4]
 80049ea:	dd0c      	ble.n	8004a06 <_printf_float+0x19e>
 80049ec:	6121      	str	r1, [r4, #16]
 80049ee:	b913      	cbnz	r3, 80049f6 <_printf_float+0x18e>
 80049f0:	6822      	ldr	r2, [r4, #0]
 80049f2:	07d2      	lsls	r2, r2, #31
 80049f4:	d502      	bpl.n	80049fc <_printf_float+0x194>
 80049f6:	3301      	adds	r3, #1
 80049f8:	440b      	add	r3, r1
 80049fa:	6123      	str	r3, [r4, #16]
 80049fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049fe:	65a3      	str	r3, [r4, #88]	; 0x58
 8004a00:	f04f 0900 	mov.w	r9, #0
 8004a04:	e7d9      	b.n	80049ba <_printf_float+0x152>
 8004a06:	b913      	cbnz	r3, 8004a0e <_printf_float+0x1a6>
 8004a08:	6822      	ldr	r2, [r4, #0]
 8004a0a:	07d0      	lsls	r0, r2, #31
 8004a0c:	d501      	bpl.n	8004a12 <_printf_float+0x1aa>
 8004a0e:	3302      	adds	r3, #2
 8004a10:	e7f3      	b.n	80049fa <_printf_float+0x192>
 8004a12:	2301      	movs	r3, #1
 8004a14:	e7f1      	b.n	80049fa <_printf_float+0x192>
 8004a16:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8004a1a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	db05      	blt.n	8004a2e <_printf_float+0x1c6>
 8004a22:	6822      	ldr	r2, [r4, #0]
 8004a24:	6123      	str	r3, [r4, #16]
 8004a26:	07d1      	lsls	r1, r2, #31
 8004a28:	d5e8      	bpl.n	80049fc <_printf_float+0x194>
 8004a2a:	3301      	adds	r3, #1
 8004a2c:	e7e5      	b.n	80049fa <_printf_float+0x192>
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	bfd4      	ite	le
 8004a32:	f1c3 0302 	rsble	r3, r3, #2
 8004a36:	2301      	movgt	r3, #1
 8004a38:	4413      	add	r3, r2
 8004a3a:	e7de      	b.n	80049fa <_printf_float+0x192>
 8004a3c:	6823      	ldr	r3, [r4, #0]
 8004a3e:	055a      	lsls	r2, r3, #21
 8004a40:	d407      	bmi.n	8004a52 <_printf_float+0x1ea>
 8004a42:	6923      	ldr	r3, [r4, #16]
 8004a44:	4642      	mov	r2, r8
 8004a46:	4631      	mov	r1, r6
 8004a48:	4628      	mov	r0, r5
 8004a4a:	47b8      	blx	r7
 8004a4c:	3001      	adds	r0, #1
 8004a4e:	d12b      	bne.n	8004aa8 <_printf_float+0x240>
 8004a50:	e767      	b.n	8004922 <_printf_float+0xba>
 8004a52:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004a56:	f240 80dc 	bls.w	8004c12 <_printf_float+0x3aa>
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004a62:	f7fc f839 	bl	8000ad8 <__aeabi_dcmpeq>
 8004a66:	2800      	cmp	r0, #0
 8004a68:	d033      	beq.n	8004ad2 <_printf_float+0x26a>
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	4a41      	ldr	r2, [pc, #260]	; (8004b74 <_printf_float+0x30c>)
 8004a6e:	4631      	mov	r1, r6
 8004a70:	4628      	mov	r0, r5
 8004a72:	47b8      	blx	r7
 8004a74:	3001      	adds	r0, #1
 8004a76:	f43f af54 	beq.w	8004922 <_printf_float+0xba>
 8004a7a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	db02      	blt.n	8004a88 <_printf_float+0x220>
 8004a82:	6823      	ldr	r3, [r4, #0]
 8004a84:	07d8      	lsls	r0, r3, #31
 8004a86:	d50f      	bpl.n	8004aa8 <_printf_float+0x240>
 8004a88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004a8c:	4631      	mov	r1, r6
 8004a8e:	4628      	mov	r0, r5
 8004a90:	47b8      	blx	r7
 8004a92:	3001      	adds	r0, #1
 8004a94:	f43f af45 	beq.w	8004922 <_printf_float+0xba>
 8004a98:	f04f 0800 	mov.w	r8, #0
 8004a9c:	f104 091a 	add.w	r9, r4, #26
 8004aa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004aa2:	3b01      	subs	r3, #1
 8004aa4:	4543      	cmp	r3, r8
 8004aa6:	dc09      	bgt.n	8004abc <_printf_float+0x254>
 8004aa8:	6823      	ldr	r3, [r4, #0]
 8004aaa:	079b      	lsls	r3, r3, #30
 8004aac:	f100 8103 	bmi.w	8004cb6 <_printf_float+0x44e>
 8004ab0:	68e0      	ldr	r0, [r4, #12]
 8004ab2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ab4:	4298      	cmp	r0, r3
 8004ab6:	bfb8      	it	lt
 8004ab8:	4618      	movlt	r0, r3
 8004aba:	e734      	b.n	8004926 <_printf_float+0xbe>
 8004abc:	2301      	movs	r3, #1
 8004abe:	464a      	mov	r2, r9
 8004ac0:	4631      	mov	r1, r6
 8004ac2:	4628      	mov	r0, r5
 8004ac4:	47b8      	blx	r7
 8004ac6:	3001      	adds	r0, #1
 8004ac8:	f43f af2b 	beq.w	8004922 <_printf_float+0xba>
 8004acc:	f108 0801 	add.w	r8, r8, #1
 8004ad0:	e7e6      	b.n	8004aa0 <_printf_float+0x238>
 8004ad2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	dc2b      	bgt.n	8004b30 <_printf_float+0x2c8>
 8004ad8:	2301      	movs	r3, #1
 8004ada:	4a26      	ldr	r2, [pc, #152]	; (8004b74 <_printf_float+0x30c>)
 8004adc:	4631      	mov	r1, r6
 8004ade:	4628      	mov	r0, r5
 8004ae0:	47b8      	blx	r7
 8004ae2:	3001      	adds	r0, #1
 8004ae4:	f43f af1d 	beq.w	8004922 <_printf_float+0xba>
 8004ae8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004aea:	b923      	cbnz	r3, 8004af6 <_printf_float+0x28e>
 8004aec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004aee:	b913      	cbnz	r3, 8004af6 <_printf_float+0x28e>
 8004af0:	6823      	ldr	r3, [r4, #0]
 8004af2:	07d9      	lsls	r1, r3, #31
 8004af4:	d5d8      	bpl.n	8004aa8 <_printf_float+0x240>
 8004af6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004afa:	4631      	mov	r1, r6
 8004afc:	4628      	mov	r0, r5
 8004afe:	47b8      	blx	r7
 8004b00:	3001      	adds	r0, #1
 8004b02:	f43f af0e 	beq.w	8004922 <_printf_float+0xba>
 8004b06:	f04f 0900 	mov.w	r9, #0
 8004b0a:	f104 0a1a 	add.w	sl, r4, #26
 8004b0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b10:	425b      	negs	r3, r3
 8004b12:	454b      	cmp	r3, r9
 8004b14:	dc01      	bgt.n	8004b1a <_printf_float+0x2b2>
 8004b16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b18:	e794      	b.n	8004a44 <_printf_float+0x1dc>
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	4652      	mov	r2, sl
 8004b1e:	4631      	mov	r1, r6
 8004b20:	4628      	mov	r0, r5
 8004b22:	47b8      	blx	r7
 8004b24:	3001      	adds	r0, #1
 8004b26:	f43f aefc 	beq.w	8004922 <_printf_float+0xba>
 8004b2a:	f109 0901 	add.w	r9, r9, #1
 8004b2e:	e7ee      	b.n	8004b0e <_printf_float+0x2a6>
 8004b30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004b32:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004b34:	429a      	cmp	r2, r3
 8004b36:	bfa8      	it	ge
 8004b38:	461a      	movge	r2, r3
 8004b3a:	2a00      	cmp	r2, #0
 8004b3c:	4691      	mov	r9, r2
 8004b3e:	dd07      	ble.n	8004b50 <_printf_float+0x2e8>
 8004b40:	4613      	mov	r3, r2
 8004b42:	4631      	mov	r1, r6
 8004b44:	4642      	mov	r2, r8
 8004b46:	4628      	mov	r0, r5
 8004b48:	47b8      	blx	r7
 8004b4a:	3001      	adds	r0, #1
 8004b4c:	f43f aee9 	beq.w	8004922 <_printf_float+0xba>
 8004b50:	f104 031a 	add.w	r3, r4, #26
 8004b54:	f04f 0b00 	mov.w	fp, #0
 8004b58:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004b5c:	9306      	str	r3, [sp, #24]
 8004b5e:	e015      	b.n	8004b8c <_printf_float+0x324>
 8004b60:	7fefffff 	.word	0x7fefffff
 8004b64:	08007e68 	.word	0x08007e68
 8004b68:	08007e64 	.word	0x08007e64
 8004b6c:	08007e70 	.word	0x08007e70
 8004b70:	08007e6c 	.word	0x08007e6c
 8004b74:	080080c4 	.word	0x080080c4
 8004b78:	2301      	movs	r3, #1
 8004b7a:	9a06      	ldr	r2, [sp, #24]
 8004b7c:	4631      	mov	r1, r6
 8004b7e:	4628      	mov	r0, r5
 8004b80:	47b8      	blx	r7
 8004b82:	3001      	adds	r0, #1
 8004b84:	f43f aecd 	beq.w	8004922 <_printf_float+0xba>
 8004b88:	f10b 0b01 	add.w	fp, fp, #1
 8004b8c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004b90:	ebaa 0309 	sub.w	r3, sl, r9
 8004b94:	455b      	cmp	r3, fp
 8004b96:	dcef      	bgt.n	8004b78 <_printf_float+0x310>
 8004b98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	44d0      	add	r8, sl
 8004ba0:	db15      	blt.n	8004bce <_printf_float+0x366>
 8004ba2:	6823      	ldr	r3, [r4, #0]
 8004ba4:	07da      	lsls	r2, r3, #31
 8004ba6:	d412      	bmi.n	8004bce <_printf_float+0x366>
 8004ba8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004baa:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004bac:	eba3 020a 	sub.w	r2, r3, sl
 8004bb0:	eba3 0a01 	sub.w	sl, r3, r1
 8004bb4:	4592      	cmp	sl, r2
 8004bb6:	bfa8      	it	ge
 8004bb8:	4692      	movge	sl, r2
 8004bba:	f1ba 0f00 	cmp.w	sl, #0
 8004bbe:	dc0e      	bgt.n	8004bde <_printf_float+0x376>
 8004bc0:	f04f 0800 	mov.w	r8, #0
 8004bc4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004bc8:	f104 091a 	add.w	r9, r4, #26
 8004bcc:	e019      	b.n	8004c02 <_printf_float+0x39a>
 8004bce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004bd2:	4631      	mov	r1, r6
 8004bd4:	4628      	mov	r0, r5
 8004bd6:	47b8      	blx	r7
 8004bd8:	3001      	adds	r0, #1
 8004bda:	d1e5      	bne.n	8004ba8 <_printf_float+0x340>
 8004bdc:	e6a1      	b.n	8004922 <_printf_float+0xba>
 8004bde:	4653      	mov	r3, sl
 8004be0:	4642      	mov	r2, r8
 8004be2:	4631      	mov	r1, r6
 8004be4:	4628      	mov	r0, r5
 8004be6:	47b8      	blx	r7
 8004be8:	3001      	adds	r0, #1
 8004bea:	d1e9      	bne.n	8004bc0 <_printf_float+0x358>
 8004bec:	e699      	b.n	8004922 <_printf_float+0xba>
 8004bee:	2301      	movs	r3, #1
 8004bf0:	464a      	mov	r2, r9
 8004bf2:	4631      	mov	r1, r6
 8004bf4:	4628      	mov	r0, r5
 8004bf6:	47b8      	blx	r7
 8004bf8:	3001      	adds	r0, #1
 8004bfa:	f43f ae92 	beq.w	8004922 <_printf_float+0xba>
 8004bfe:	f108 0801 	add.w	r8, r8, #1
 8004c02:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c06:	1a9b      	subs	r3, r3, r2
 8004c08:	eba3 030a 	sub.w	r3, r3, sl
 8004c0c:	4543      	cmp	r3, r8
 8004c0e:	dcee      	bgt.n	8004bee <_printf_float+0x386>
 8004c10:	e74a      	b.n	8004aa8 <_printf_float+0x240>
 8004c12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004c14:	2a01      	cmp	r2, #1
 8004c16:	dc01      	bgt.n	8004c1c <_printf_float+0x3b4>
 8004c18:	07db      	lsls	r3, r3, #31
 8004c1a:	d53a      	bpl.n	8004c92 <_printf_float+0x42a>
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	4642      	mov	r2, r8
 8004c20:	4631      	mov	r1, r6
 8004c22:	4628      	mov	r0, r5
 8004c24:	47b8      	blx	r7
 8004c26:	3001      	adds	r0, #1
 8004c28:	f43f ae7b 	beq.w	8004922 <_printf_float+0xba>
 8004c2c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c30:	4631      	mov	r1, r6
 8004c32:	4628      	mov	r0, r5
 8004c34:	47b8      	blx	r7
 8004c36:	3001      	adds	r0, #1
 8004c38:	f108 0801 	add.w	r8, r8, #1
 8004c3c:	f43f ae71 	beq.w	8004922 <_printf_float+0xba>
 8004c40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c42:	2200      	movs	r2, #0
 8004c44:	f103 3aff 	add.w	sl, r3, #4294967295
 8004c48:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	f7fb ff43 	bl	8000ad8 <__aeabi_dcmpeq>
 8004c52:	b9c8      	cbnz	r0, 8004c88 <_printf_float+0x420>
 8004c54:	4653      	mov	r3, sl
 8004c56:	4642      	mov	r2, r8
 8004c58:	4631      	mov	r1, r6
 8004c5a:	4628      	mov	r0, r5
 8004c5c:	47b8      	blx	r7
 8004c5e:	3001      	adds	r0, #1
 8004c60:	d10e      	bne.n	8004c80 <_printf_float+0x418>
 8004c62:	e65e      	b.n	8004922 <_printf_float+0xba>
 8004c64:	2301      	movs	r3, #1
 8004c66:	4652      	mov	r2, sl
 8004c68:	4631      	mov	r1, r6
 8004c6a:	4628      	mov	r0, r5
 8004c6c:	47b8      	blx	r7
 8004c6e:	3001      	adds	r0, #1
 8004c70:	f43f ae57 	beq.w	8004922 <_printf_float+0xba>
 8004c74:	f108 0801 	add.w	r8, r8, #1
 8004c78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c7a:	3b01      	subs	r3, #1
 8004c7c:	4543      	cmp	r3, r8
 8004c7e:	dcf1      	bgt.n	8004c64 <_printf_float+0x3fc>
 8004c80:	464b      	mov	r3, r9
 8004c82:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004c86:	e6de      	b.n	8004a46 <_printf_float+0x1de>
 8004c88:	f04f 0800 	mov.w	r8, #0
 8004c8c:	f104 0a1a 	add.w	sl, r4, #26
 8004c90:	e7f2      	b.n	8004c78 <_printf_float+0x410>
 8004c92:	2301      	movs	r3, #1
 8004c94:	e7df      	b.n	8004c56 <_printf_float+0x3ee>
 8004c96:	2301      	movs	r3, #1
 8004c98:	464a      	mov	r2, r9
 8004c9a:	4631      	mov	r1, r6
 8004c9c:	4628      	mov	r0, r5
 8004c9e:	47b8      	blx	r7
 8004ca0:	3001      	adds	r0, #1
 8004ca2:	f43f ae3e 	beq.w	8004922 <_printf_float+0xba>
 8004ca6:	f108 0801 	add.w	r8, r8, #1
 8004caa:	68e3      	ldr	r3, [r4, #12]
 8004cac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004cae:	1a9b      	subs	r3, r3, r2
 8004cb0:	4543      	cmp	r3, r8
 8004cb2:	dcf0      	bgt.n	8004c96 <_printf_float+0x42e>
 8004cb4:	e6fc      	b.n	8004ab0 <_printf_float+0x248>
 8004cb6:	f04f 0800 	mov.w	r8, #0
 8004cba:	f104 0919 	add.w	r9, r4, #25
 8004cbe:	e7f4      	b.n	8004caa <_printf_float+0x442>
 8004cc0:	2900      	cmp	r1, #0
 8004cc2:	f43f ae8b 	beq.w	80049dc <_printf_float+0x174>
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004ccc:	ab09      	add	r3, sp, #36	; 0x24
 8004cce:	9300      	str	r3, [sp, #0]
 8004cd0:	ec49 8b10 	vmov	d0, r8, r9
 8004cd4:	6022      	str	r2, [r4, #0]
 8004cd6:	f8cd a004 	str.w	sl, [sp, #4]
 8004cda:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004cde:	4628      	mov	r0, r5
 8004ce0:	f7ff fd2e 	bl	8004740 <__cvt>
 8004ce4:	4680      	mov	r8, r0
 8004ce6:	e648      	b.n	800497a <_printf_float+0x112>

08004ce8 <_printf_common>:
 8004ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cec:	4691      	mov	r9, r2
 8004cee:	461f      	mov	r7, r3
 8004cf0:	688a      	ldr	r2, [r1, #8]
 8004cf2:	690b      	ldr	r3, [r1, #16]
 8004cf4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	bfb8      	it	lt
 8004cfc:	4613      	movlt	r3, r2
 8004cfe:	f8c9 3000 	str.w	r3, [r9]
 8004d02:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d06:	4606      	mov	r6, r0
 8004d08:	460c      	mov	r4, r1
 8004d0a:	b112      	cbz	r2, 8004d12 <_printf_common+0x2a>
 8004d0c:	3301      	adds	r3, #1
 8004d0e:	f8c9 3000 	str.w	r3, [r9]
 8004d12:	6823      	ldr	r3, [r4, #0]
 8004d14:	0699      	lsls	r1, r3, #26
 8004d16:	bf42      	ittt	mi
 8004d18:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004d1c:	3302      	addmi	r3, #2
 8004d1e:	f8c9 3000 	strmi.w	r3, [r9]
 8004d22:	6825      	ldr	r5, [r4, #0]
 8004d24:	f015 0506 	ands.w	r5, r5, #6
 8004d28:	d107      	bne.n	8004d3a <_printf_common+0x52>
 8004d2a:	f104 0a19 	add.w	sl, r4, #25
 8004d2e:	68e3      	ldr	r3, [r4, #12]
 8004d30:	f8d9 2000 	ldr.w	r2, [r9]
 8004d34:	1a9b      	subs	r3, r3, r2
 8004d36:	42ab      	cmp	r3, r5
 8004d38:	dc28      	bgt.n	8004d8c <_printf_common+0xa4>
 8004d3a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004d3e:	6822      	ldr	r2, [r4, #0]
 8004d40:	3300      	adds	r3, #0
 8004d42:	bf18      	it	ne
 8004d44:	2301      	movne	r3, #1
 8004d46:	0692      	lsls	r2, r2, #26
 8004d48:	d42d      	bmi.n	8004da6 <_printf_common+0xbe>
 8004d4a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d4e:	4639      	mov	r1, r7
 8004d50:	4630      	mov	r0, r6
 8004d52:	47c0      	blx	r8
 8004d54:	3001      	adds	r0, #1
 8004d56:	d020      	beq.n	8004d9a <_printf_common+0xb2>
 8004d58:	6823      	ldr	r3, [r4, #0]
 8004d5a:	68e5      	ldr	r5, [r4, #12]
 8004d5c:	f8d9 2000 	ldr.w	r2, [r9]
 8004d60:	f003 0306 	and.w	r3, r3, #6
 8004d64:	2b04      	cmp	r3, #4
 8004d66:	bf08      	it	eq
 8004d68:	1aad      	subeq	r5, r5, r2
 8004d6a:	68a3      	ldr	r3, [r4, #8]
 8004d6c:	6922      	ldr	r2, [r4, #16]
 8004d6e:	bf0c      	ite	eq
 8004d70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d74:	2500      	movne	r5, #0
 8004d76:	4293      	cmp	r3, r2
 8004d78:	bfc4      	itt	gt
 8004d7a:	1a9b      	subgt	r3, r3, r2
 8004d7c:	18ed      	addgt	r5, r5, r3
 8004d7e:	f04f 0900 	mov.w	r9, #0
 8004d82:	341a      	adds	r4, #26
 8004d84:	454d      	cmp	r5, r9
 8004d86:	d11a      	bne.n	8004dbe <_printf_common+0xd6>
 8004d88:	2000      	movs	r0, #0
 8004d8a:	e008      	b.n	8004d9e <_printf_common+0xb6>
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	4652      	mov	r2, sl
 8004d90:	4639      	mov	r1, r7
 8004d92:	4630      	mov	r0, r6
 8004d94:	47c0      	blx	r8
 8004d96:	3001      	adds	r0, #1
 8004d98:	d103      	bne.n	8004da2 <_printf_common+0xba>
 8004d9a:	f04f 30ff 	mov.w	r0, #4294967295
 8004d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004da2:	3501      	adds	r5, #1
 8004da4:	e7c3      	b.n	8004d2e <_printf_common+0x46>
 8004da6:	18e1      	adds	r1, r4, r3
 8004da8:	1c5a      	adds	r2, r3, #1
 8004daa:	2030      	movs	r0, #48	; 0x30
 8004dac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004db0:	4422      	add	r2, r4
 8004db2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004db6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004dba:	3302      	adds	r3, #2
 8004dbc:	e7c5      	b.n	8004d4a <_printf_common+0x62>
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	4622      	mov	r2, r4
 8004dc2:	4639      	mov	r1, r7
 8004dc4:	4630      	mov	r0, r6
 8004dc6:	47c0      	blx	r8
 8004dc8:	3001      	adds	r0, #1
 8004dca:	d0e6      	beq.n	8004d9a <_printf_common+0xb2>
 8004dcc:	f109 0901 	add.w	r9, r9, #1
 8004dd0:	e7d8      	b.n	8004d84 <_printf_common+0x9c>
	...

08004dd4 <_printf_i>:
 8004dd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004dd8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004ddc:	460c      	mov	r4, r1
 8004dde:	7e09      	ldrb	r1, [r1, #24]
 8004de0:	b085      	sub	sp, #20
 8004de2:	296e      	cmp	r1, #110	; 0x6e
 8004de4:	4617      	mov	r7, r2
 8004de6:	4606      	mov	r6, r0
 8004de8:	4698      	mov	r8, r3
 8004dea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004dec:	f000 80b3 	beq.w	8004f56 <_printf_i+0x182>
 8004df0:	d822      	bhi.n	8004e38 <_printf_i+0x64>
 8004df2:	2963      	cmp	r1, #99	; 0x63
 8004df4:	d036      	beq.n	8004e64 <_printf_i+0x90>
 8004df6:	d80a      	bhi.n	8004e0e <_printf_i+0x3a>
 8004df8:	2900      	cmp	r1, #0
 8004dfa:	f000 80b9 	beq.w	8004f70 <_printf_i+0x19c>
 8004dfe:	2958      	cmp	r1, #88	; 0x58
 8004e00:	f000 8083 	beq.w	8004f0a <_printf_i+0x136>
 8004e04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e08:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004e0c:	e032      	b.n	8004e74 <_printf_i+0xa0>
 8004e0e:	2964      	cmp	r1, #100	; 0x64
 8004e10:	d001      	beq.n	8004e16 <_printf_i+0x42>
 8004e12:	2969      	cmp	r1, #105	; 0x69
 8004e14:	d1f6      	bne.n	8004e04 <_printf_i+0x30>
 8004e16:	6820      	ldr	r0, [r4, #0]
 8004e18:	6813      	ldr	r3, [r2, #0]
 8004e1a:	0605      	lsls	r5, r0, #24
 8004e1c:	f103 0104 	add.w	r1, r3, #4
 8004e20:	d52a      	bpl.n	8004e78 <_printf_i+0xa4>
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	6011      	str	r1, [r2, #0]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	da03      	bge.n	8004e32 <_printf_i+0x5e>
 8004e2a:	222d      	movs	r2, #45	; 0x2d
 8004e2c:	425b      	negs	r3, r3
 8004e2e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004e32:	486f      	ldr	r0, [pc, #444]	; (8004ff0 <_printf_i+0x21c>)
 8004e34:	220a      	movs	r2, #10
 8004e36:	e039      	b.n	8004eac <_printf_i+0xd8>
 8004e38:	2973      	cmp	r1, #115	; 0x73
 8004e3a:	f000 809d 	beq.w	8004f78 <_printf_i+0x1a4>
 8004e3e:	d808      	bhi.n	8004e52 <_printf_i+0x7e>
 8004e40:	296f      	cmp	r1, #111	; 0x6f
 8004e42:	d020      	beq.n	8004e86 <_printf_i+0xb2>
 8004e44:	2970      	cmp	r1, #112	; 0x70
 8004e46:	d1dd      	bne.n	8004e04 <_printf_i+0x30>
 8004e48:	6823      	ldr	r3, [r4, #0]
 8004e4a:	f043 0320 	orr.w	r3, r3, #32
 8004e4e:	6023      	str	r3, [r4, #0]
 8004e50:	e003      	b.n	8004e5a <_printf_i+0x86>
 8004e52:	2975      	cmp	r1, #117	; 0x75
 8004e54:	d017      	beq.n	8004e86 <_printf_i+0xb2>
 8004e56:	2978      	cmp	r1, #120	; 0x78
 8004e58:	d1d4      	bne.n	8004e04 <_printf_i+0x30>
 8004e5a:	2378      	movs	r3, #120	; 0x78
 8004e5c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004e60:	4864      	ldr	r0, [pc, #400]	; (8004ff4 <_printf_i+0x220>)
 8004e62:	e055      	b.n	8004f10 <_printf_i+0x13c>
 8004e64:	6813      	ldr	r3, [r2, #0]
 8004e66:	1d19      	adds	r1, r3, #4
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	6011      	str	r1, [r2, #0]
 8004e6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e74:	2301      	movs	r3, #1
 8004e76:	e08c      	b.n	8004f92 <_printf_i+0x1be>
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	6011      	str	r1, [r2, #0]
 8004e7c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004e80:	bf18      	it	ne
 8004e82:	b21b      	sxthne	r3, r3
 8004e84:	e7cf      	b.n	8004e26 <_printf_i+0x52>
 8004e86:	6813      	ldr	r3, [r2, #0]
 8004e88:	6825      	ldr	r5, [r4, #0]
 8004e8a:	1d18      	adds	r0, r3, #4
 8004e8c:	6010      	str	r0, [r2, #0]
 8004e8e:	0628      	lsls	r0, r5, #24
 8004e90:	d501      	bpl.n	8004e96 <_printf_i+0xc2>
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	e002      	b.n	8004e9c <_printf_i+0xc8>
 8004e96:	0668      	lsls	r0, r5, #25
 8004e98:	d5fb      	bpl.n	8004e92 <_printf_i+0xbe>
 8004e9a:	881b      	ldrh	r3, [r3, #0]
 8004e9c:	4854      	ldr	r0, [pc, #336]	; (8004ff0 <_printf_i+0x21c>)
 8004e9e:	296f      	cmp	r1, #111	; 0x6f
 8004ea0:	bf14      	ite	ne
 8004ea2:	220a      	movne	r2, #10
 8004ea4:	2208      	moveq	r2, #8
 8004ea6:	2100      	movs	r1, #0
 8004ea8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004eac:	6865      	ldr	r5, [r4, #4]
 8004eae:	60a5      	str	r5, [r4, #8]
 8004eb0:	2d00      	cmp	r5, #0
 8004eb2:	f2c0 8095 	blt.w	8004fe0 <_printf_i+0x20c>
 8004eb6:	6821      	ldr	r1, [r4, #0]
 8004eb8:	f021 0104 	bic.w	r1, r1, #4
 8004ebc:	6021      	str	r1, [r4, #0]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d13d      	bne.n	8004f3e <_printf_i+0x16a>
 8004ec2:	2d00      	cmp	r5, #0
 8004ec4:	f040 808e 	bne.w	8004fe4 <_printf_i+0x210>
 8004ec8:	4665      	mov	r5, ip
 8004eca:	2a08      	cmp	r2, #8
 8004ecc:	d10b      	bne.n	8004ee6 <_printf_i+0x112>
 8004ece:	6823      	ldr	r3, [r4, #0]
 8004ed0:	07db      	lsls	r3, r3, #31
 8004ed2:	d508      	bpl.n	8004ee6 <_printf_i+0x112>
 8004ed4:	6923      	ldr	r3, [r4, #16]
 8004ed6:	6862      	ldr	r2, [r4, #4]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	bfde      	ittt	le
 8004edc:	2330      	movle	r3, #48	; 0x30
 8004ede:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004ee2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004ee6:	ebac 0305 	sub.w	r3, ip, r5
 8004eea:	6123      	str	r3, [r4, #16]
 8004eec:	f8cd 8000 	str.w	r8, [sp]
 8004ef0:	463b      	mov	r3, r7
 8004ef2:	aa03      	add	r2, sp, #12
 8004ef4:	4621      	mov	r1, r4
 8004ef6:	4630      	mov	r0, r6
 8004ef8:	f7ff fef6 	bl	8004ce8 <_printf_common>
 8004efc:	3001      	adds	r0, #1
 8004efe:	d14d      	bne.n	8004f9c <_printf_i+0x1c8>
 8004f00:	f04f 30ff 	mov.w	r0, #4294967295
 8004f04:	b005      	add	sp, #20
 8004f06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004f0a:	4839      	ldr	r0, [pc, #228]	; (8004ff0 <_printf_i+0x21c>)
 8004f0c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004f10:	6813      	ldr	r3, [r2, #0]
 8004f12:	6821      	ldr	r1, [r4, #0]
 8004f14:	1d1d      	adds	r5, r3, #4
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	6015      	str	r5, [r2, #0]
 8004f1a:	060a      	lsls	r2, r1, #24
 8004f1c:	d50b      	bpl.n	8004f36 <_printf_i+0x162>
 8004f1e:	07ca      	lsls	r2, r1, #31
 8004f20:	bf44      	itt	mi
 8004f22:	f041 0120 	orrmi.w	r1, r1, #32
 8004f26:	6021      	strmi	r1, [r4, #0]
 8004f28:	b91b      	cbnz	r3, 8004f32 <_printf_i+0x15e>
 8004f2a:	6822      	ldr	r2, [r4, #0]
 8004f2c:	f022 0220 	bic.w	r2, r2, #32
 8004f30:	6022      	str	r2, [r4, #0]
 8004f32:	2210      	movs	r2, #16
 8004f34:	e7b7      	b.n	8004ea6 <_printf_i+0xd2>
 8004f36:	064d      	lsls	r5, r1, #25
 8004f38:	bf48      	it	mi
 8004f3a:	b29b      	uxthmi	r3, r3
 8004f3c:	e7ef      	b.n	8004f1e <_printf_i+0x14a>
 8004f3e:	4665      	mov	r5, ip
 8004f40:	fbb3 f1f2 	udiv	r1, r3, r2
 8004f44:	fb02 3311 	mls	r3, r2, r1, r3
 8004f48:	5cc3      	ldrb	r3, [r0, r3]
 8004f4a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004f4e:	460b      	mov	r3, r1
 8004f50:	2900      	cmp	r1, #0
 8004f52:	d1f5      	bne.n	8004f40 <_printf_i+0x16c>
 8004f54:	e7b9      	b.n	8004eca <_printf_i+0xf6>
 8004f56:	6813      	ldr	r3, [r2, #0]
 8004f58:	6825      	ldr	r5, [r4, #0]
 8004f5a:	6961      	ldr	r1, [r4, #20]
 8004f5c:	1d18      	adds	r0, r3, #4
 8004f5e:	6010      	str	r0, [r2, #0]
 8004f60:	0628      	lsls	r0, r5, #24
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	d501      	bpl.n	8004f6a <_printf_i+0x196>
 8004f66:	6019      	str	r1, [r3, #0]
 8004f68:	e002      	b.n	8004f70 <_printf_i+0x19c>
 8004f6a:	066a      	lsls	r2, r5, #25
 8004f6c:	d5fb      	bpl.n	8004f66 <_printf_i+0x192>
 8004f6e:	8019      	strh	r1, [r3, #0]
 8004f70:	2300      	movs	r3, #0
 8004f72:	6123      	str	r3, [r4, #16]
 8004f74:	4665      	mov	r5, ip
 8004f76:	e7b9      	b.n	8004eec <_printf_i+0x118>
 8004f78:	6813      	ldr	r3, [r2, #0]
 8004f7a:	1d19      	adds	r1, r3, #4
 8004f7c:	6011      	str	r1, [r2, #0]
 8004f7e:	681d      	ldr	r5, [r3, #0]
 8004f80:	6862      	ldr	r2, [r4, #4]
 8004f82:	2100      	movs	r1, #0
 8004f84:	4628      	mov	r0, r5
 8004f86:	f7fb f933 	bl	80001f0 <memchr>
 8004f8a:	b108      	cbz	r0, 8004f90 <_printf_i+0x1bc>
 8004f8c:	1b40      	subs	r0, r0, r5
 8004f8e:	6060      	str	r0, [r4, #4]
 8004f90:	6863      	ldr	r3, [r4, #4]
 8004f92:	6123      	str	r3, [r4, #16]
 8004f94:	2300      	movs	r3, #0
 8004f96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f9a:	e7a7      	b.n	8004eec <_printf_i+0x118>
 8004f9c:	6923      	ldr	r3, [r4, #16]
 8004f9e:	462a      	mov	r2, r5
 8004fa0:	4639      	mov	r1, r7
 8004fa2:	4630      	mov	r0, r6
 8004fa4:	47c0      	blx	r8
 8004fa6:	3001      	adds	r0, #1
 8004fa8:	d0aa      	beq.n	8004f00 <_printf_i+0x12c>
 8004faa:	6823      	ldr	r3, [r4, #0]
 8004fac:	079b      	lsls	r3, r3, #30
 8004fae:	d413      	bmi.n	8004fd8 <_printf_i+0x204>
 8004fb0:	68e0      	ldr	r0, [r4, #12]
 8004fb2:	9b03      	ldr	r3, [sp, #12]
 8004fb4:	4298      	cmp	r0, r3
 8004fb6:	bfb8      	it	lt
 8004fb8:	4618      	movlt	r0, r3
 8004fba:	e7a3      	b.n	8004f04 <_printf_i+0x130>
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	464a      	mov	r2, r9
 8004fc0:	4639      	mov	r1, r7
 8004fc2:	4630      	mov	r0, r6
 8004fc4:	47c0      	blx	r8
 8004fc6:	3001      	adds	r0, #1
 8004fc8:	d09a      	beq.n	8004f00 <_printf_i+0x12c>
 8004fca:	3501      	adds	r5, #1
 8004fcc:	68e3      	ldr	r3, [r4, #12]
 8004fce:	9a03      	ldr	r2, [sp, #12]
 8004fd0:	1a9b      	subs	r3, r3, r2
 8004fd2:	42ab      	cmp	r3, r5
 8004fd4:	dcf2      	bgt.n	8004fbc <_printf_i+0x1e8>
 8004fd6:	e7eb      	b.n	8004fb0 <_printf_i+0x1dc>
 8004fd8:	2500      	movs	r5, #0
 8004fda:	f104 0919 	add.w	r9, r4, #25
 8004fde:	e7f5      	b.n	8004fcc <_printf_i+0x1f8>
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d1ac      	bne.n	8004f3e <_printf_i+0x16a>
 8004fe4:	7803      	ldrb	r3, [r0, #0]
 8004fe6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004fea:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004fee:	e76c      	b.n	8004eca <_printf_i+0xf6>
 8004ff0:	08007e74 	.word	0x08007e74
 8004ff4:	08007e85 	.word	0x08007e85

08004ff8 <sniprintf>:
 8004ff8:	b40c      	push	{r2, r3}
 8004ffa:	b530      	push	{r4, r5, lr}
 8004ffc:	4b17      	ldr	r3, [pc, #92]	; (800505c <sniprintf+0x64>)
 8004ffe:	1e0c      	subs	r4, r1, #0
 8005000:	b09d      	sub	sp, #116	; 0x74
 8005002:	681d      	ldr	r5, [r3, #0]
 8005004:	da08      	bge.n	8005018 <sniprintf+0x20>
 8005006:	238b      	movs	r3, #139	; 0x8b
 8005008:	602b      	str	r3, [r5, #0]
 800500a:	f04f 30ff 	mov.w	r0, #4294967295
 800500e:	b01d      	add	sp, #116	; 0x74
 8005010:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005014:	b002      	add	sp, #8
 8005016:	4770      	bx	lr
 8005018:	f44f 7302 	mov.w	r3, #520	; 0x208
 800501c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005020:	bf14      	ite	ne
 8005022:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005026:	4623      	moveq	r3, r4
 8005028:	9304      	str	r3, [sp, #16]
 800502a:	9307      	str	r3, [sp, #28]
 800502c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005030:	9002      	str	r0, [sp, #8]
 8005032:	9006      	str	r0, [sp, #24]
 8005034:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005038:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800503a:	ab21      	add	r3, sp, #132	; 0x84
 800503c:	a902      	add	r1, sp, #8
 800503e:	4628      	mov	r0, r5
 8005040:	9301      	str	r3, [sp, #4]
 8005042:	f001 fa5d 	bl	8006500 <_svfiprintf_r>
 8005046:	1c43      	adds	r3, r0, #1
 8005048:	bfbc      	itt	lt
 800504a:	238b      	movlt	r3, #139	; 0x8b
 800504c:	602b      	strlt	r3, [r5, #0]
 800504e:	2c00      	cmp	r4, #0
 8005050:	d0dd      	beq.n	800500e <sniprintf+0x16>
 8005052:	9b02      	ldr	r3, [sp, #8]
 8005054:	2200      	movs	r2, #0
 8005056:	701a      	strb	r2, [r3, #0]
 8005058:	e7d9      	b.n	800500e <sniprintf+0x16>
 800505a:	bf00      	nop
 800505c:	20000080 	.word	0x20000080

08005060 <quorem>:
 8005060:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005064:	6903      	ldr	r3, [r0, #16]
 8005066:	690c      	ldr	r4, [r1, #16]
 8005068:	42a3      	cmp	r3, r4
 800506a:	4680      	mov	r8, r0
 800506c:	f2c0 8082 	blt.w	8005174 <quorem+0x114>
 8005070:	3c01      	subs	r4, #1
 8005072:	f101 0714 	add.w	r7, r1, #20
 8005076:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800507a:	f100 0614 	add.w	r6, r0, #20
 800507e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005082:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8005086:	eb06 030c 	add.w	r3, r6, ip
 800508a:	3501      	adds	r5, #1
 800508c:	eb07 090c 	add.w	r9, r7, ip
 8005090:	9301      	str	r3, [sp, #4]
 8005092:	fbb0 f5f5 	udiv	r5, r0, r5
 8005096:	b395      	cbz	r5, 80050fe <quorem+0x9e>
 8005098:	f04f 0a00 	mov.w	sl, #0
 800509c:	4638      	mov	r0, r7
 800509e:	46b6      	mov	lr, r6
 80050a0:	46d3      	mov	fp, sl
 80050a2:	f850 2b04 	ldr.w	r2, [r0], #4
 80050a6:	b293      	uxth	r3, r2
 80050a8:	fb05 a303 	mla	r3, r5, r3, sl
 80050ac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	ebab 0303 	sub.w	r3, fp, r3
 80050b6:	0c12      	lsrs	r2, r2, #16
 80050b8:	f8de b000 	ldr.w	fp, [lr]
 80050bc:	fb05 a202 	mla	r2, r5, r2, sl
 80050c0:	fa13 f38b 	uxtah	r3, r3, fp
 80050c4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80050c8:	fa1f fb82 	uxth.w	fp, r2
 80050cc:	f8de 2000 	ldr.w	r2, [lr]
 80050d0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80050d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80050d8:	b29b      	uxth	r3, r3
 80050da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80050de:	4581      	cmp	r9, r0
 80050e0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80050e4:	f84e 3b04 	str.w	r3, [lr], #4
 80050e8:	d2db      	bcs.n	80050a2 <quorem+0x42>
 80050ea:	f856 300c 	ldr.w	r3, [r6, ip]
 80050ee:	b933      	cbnz	r3, 80050fe <quorem+0x9e>
 80050f0:	9b01      	ldr	r3, [sp, #4]
 80050f2:	3b04      	subs	r3, #4
 80050f4:	429e      	cmp	r6, r3
 80050f6:	461a      	mov	r2, r3
 80050f8:	d330      	bcc.n	800515c <quorem+0xfc>
 80050fa:	f8c8 4010 	str.w	r4, [r8, #16]
 80050fe:	4640      	mov	r0, r8
 8005100:	f001 f828 	bl	8006154 <__mcmp>
 8005104:	2800      	cmp	r0, #0
 8005106:	db25      	blt.n	8005154 <quorem+0xf4>
 8005108:	3501      	adds	r5, #1
 800510a:	4630      	mov	r0, r6
 800510c:	f04f 0c00 	mov.w	ip, #0
 8005110:	f857 2b04 	ldr.w	r2, [r7], #4
 8005114:	f8d0 e000 	ldr.w	lr, [r0]
 8005118:	b293      	uxth	r3, r2
 800511a:	ebac 0303 	sub.w	r3, ip, r3
 800511e:	0c12      	lsrs	r2, r2, #16
 8005120:	fa13 f38e 	uxtah	r3, r3, lr
 8005124:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005128:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800512c:	b29b      	uxth	r3, r3
 800512e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005132:	45b9      	cmp	r9, r7
 8005134:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005138:	f840 3b04 	str.w	r3, [r0], #4
 800513c:	d2e8      	bcs.n	8005110 <quorem+0xb0>
 800513e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8005142:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8005146:	b92a      	cbnz	r2, 8005154 <quorem+0xf4>
 8005148:	3b04      	subs	r3, #4
 800514a:	429e      	cmp	r6, r3
 800514c:	461a      	mov	r2, r3
 800514e:	d30b      	bcc.n	8005168 <quorem+0x108>
 8005150:	f8c8 4010 	str.w	r4, [r8, #16]
 8005154:	4628      	mov	r0, r5
 8005156:	b003      	add	sp, #12
 8005158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800515c:	6812      	ldr	r2, [r2, #0]
 800515e:	3b04      	subs	r3, #4
 8005160:	2a00      	cmp	r2, #0
 8005162:	d1ca      	bne.n	80050fa <quorem+0x9a>
 8005164:	3c01      	subs	r4, #1
 8005166:	e7c5      	b.n	80050f4 <quorem+0x94>
 8005168:	6812      	ldr	r2, [r2, #0]
 800516a:	3b04      	subs	r3, #4
 800516c:	2a00      	cmp	r2, #0
 800516e:	d1ef      	bne.n	8005150 <quorem+0xf0>
 8005170:	3c01      	subs	r4, #1
 8005172:	e7ea      	b.n	800514a <quorem+0xea>
 8005174:	2000      	movs	r0, #0
 8005176:	e7ee      	b.n	8005156 <quorem+0xf6>

08005178 <_dtoa_r>:
 8005178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800517c:	ec57 6b10 	vmov	r6, r7, d0
 8005180:	b097      	sub	sp, #92	; 0x5c
 8005182:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005184:	9106      	str	r1, [sp, #24]
 8005186:	4604      	mov	r4, r0
 8005188:	920b      	str	r2, [sp, #44]	; 0x2c
 800518a:	9312      	str	r3, [sp, #72]	; 0x48
 800518c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005190:	e9cd 6700 	strd	r6, r7, [sp]
 8005194:	b93d      	cbnz	r5, 80051a6 <_dtoa_r+0x2e>
 8005196:	2010      	movs	r0, #16
 8005198:	f000 fdb4 	bl	8005d04 <malloc>
 800519c:	6260      	str	r0, [r4, #36]	; 0x24
 800519e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80051a2:	6005      	str	r5, [r0, #0]
 80051a4:	60c5      	str	r5, [r0, #12]
 80051a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80051a8:	6819      	ldr	r1, [r3, #0]
 80051aa:	b151      	cbz	r1, 80051c2 <_dtoa_r+0x4a>
 80051ac:	685a      	ldr	r2, [r3, #4]
 80051ae:	604a      	str	r2, [r1, #4]
 80051b0:	2301      	movs	r3, #1
 80051b2:	4093      	lsls	r3, r2
 80051b4:	608b      	str	r3, [r1, #8]
 80051b6:	4620      	mov	r0, r4
 80051b8:	f000 fdeb 	bl	8005d92 <_Bfree>
 80051bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80051be:	2200      	movs	r2, #0
 80051c0:	601a      	str	r2, [r3, #0]
 80051c2:	1e3b      	subs	r3, r7, #0
 80051c4:	bfbb      	ittet	lt
 80051c6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80051ca:	9301      	strlt	r3, [sp, #4]
 80051cc:	2300      	movge	r3, #0
 80051ce:	2201      	movlt	r2, #1
 80051d0:	bfac      	ite	ge
 80051d2:	f8c8 3000 	strge.w	r3, [r8]
 80051d6:	f8c8 2000 	strlt.w	r2, [r8]
 80051da:	4baf      	ldr	r3, [pc, #700]	; (8005498 <_dtoa_r+0x320>)
 80051dc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80051e0:	ea33 0308 	bics.w	r3, r3, r8
 80051e4:	d114      	bne.n	8005210 <_dtoa_r+0x98>
 80051e6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80051e8:	f242 730f 	movw	r3, #9999	; 0x270f
 80051ec:	6013      	str	r3, [r2, #0]
 80051ee:	9b00      	ldr	r3, [sp, #0]
 80051f0:	b923      	cbnz	r3, 80051fc <_dtoa_r+0x84>
 80051f2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80051f6:	2800      	cmp	r0, #0
 80051f8:	f000 8542 	beq.w	8005c80 <_dtoa_r+0xb08>
 80051fc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80051fe:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80054ac <_dtoa_r+0x334>
 8005202:	2b00      	cmp	r3, #0
 8005204:	f000 8544 	beq.w	8005c90 <_dtoa_r+0xb18>
 8005208:	f10b 0303 	add.w	r3, fp, #3
 800520c:	f000 bd3e 	b.w	8005c8c <_dtoa_r+0xb14>
 8005210:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005214:	2200      	movs	r2, #0
 8005216:	2300      	movs	r3, #0
 8005218:	4630      	mov	r0, r6
 800521a:	4639      	mov	r1, r7
 800521c:	f7fb fc5c 	bl	8000ad8 <__aeabi_dcmpeq>
 8005220:	4681      	mov	r9, r0
 8005222:	b168      	cbz	r0, 8005240 <_dtoa_r+0xc8>
 8005224:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005226:	2301      	movs	r3, #1
 8005228:	6013      	str	r3, [r2, #0]
 800522a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800522c:	2b00      	cmp	r3, #0
 800522e:	f000 8524 	beq.w	8005c7a <_dtoa_r+0xb02>
 8005232:	4b9a      	ldr	r3, [pc, #616]	; (800549c <_dtoa_r+0x324>)
 8005234:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005236:	f103 3bff 	add.w	fp, r3, #4294967295
 800523a:	6013      	str	r3, [r2, #0]
 800523c:	f000 bd28 	b.w	8005c90 <_dtoa_r+0xb18>
 8005240:	aa14      	add	r2, sp, #80	; 0x50
 8005242:	a915      	add	r1, sp, #84	; 0x54
 8005244:	ec47 6b10 	vmov	d0, r6, r7
 8005248:	4620      	mov	r0, r4
 800524a:	f000 fffa 	bl	8006242 <__d2b>
 800524e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005252:	9004      	str	r0, [sp, #16]
 8005254:	2d00      	cmp	r5, #0
 8005256:	d07c      	beq.n	8005352 <_dtoa_r+0x1da>
 8005258:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800525c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8005260:	46b2      	mov	sl, r6
 8005262:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8005266:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800526a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800526e:	2200      	movs	r2, #0
 8005270:	4b8b      	ldr	r3, [pc, #556]	; (80054a0 <_dtoa_r+0x328>)
 8005272:	4650      	mov	r0, sl
 8005274:	4659      	mov	r1, fp
 8005276:	f7fb f80f 	bl	8000298 <__aeabi_dsub>
 800527a:	a381      	add	r3, pc, #516	; (adr r3, 8005480 <_dtoa_r+0x308>)
 800527c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005280:	f7fb f9c2 	bl	8000608 <__aeabi_dmul>
 8005284:	a380      	add	r3, pc, #512	; (adr r3, 8005488 <_dtoa_r+0x310>)
 8005286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800528a:	f7fb f807 	bl	800029c <__adddf3>
 800528e:	4606      	mov	r6, r0
 8005290:	4628      	mov	r0, r5
 8005292:	460f      	mov	r7, r1
 8005294:	f7fb f94e 	bl	8000534 <__aeabi_i2d>
 8005298:	a37d      	add	r3, pc, #500	; (adr r3, 8005490 <_dtoa_r+0x318>)
 800529a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800529e:	f7fb f9b3 	bl	8000608 <__aeabi_dmul>
 80052a2:	4602      	mov	r2, r0
 80052a4:	460b      	mov	r3, r1
 80052a6:	4630      	mov	r0, r6
 80052a8:	4639      	mov	r1, r7
 80052aa:	f7fa fff7 	bl	800029c <__adddf3>
 80052ae:	4606      	mov	r6, r0
 80052b0:	460f      	mov	r7, r1
 80052b2:	f7fb fc59 	bl	8000b68 <__aeabi_d2iz>
 80052b6:	2200      	movs	r2, #0
 80052b8:	4682      	mov	sl, r0
 80052ba:	2300      	movs	r3, #0
 80052bc:	4630      	mov	r0, r6
 80052be:	4639      	mov	r1, r7
 80052c0:	f7fb fc14 	bl	8000aec <__aeabi_dcmplt>
 80052c4:	b148      	cbz	r0, 80052da <_dtoa_r+0x162>
 80052c6:	4650      	mov	r0, sl
 80052c8:	f7fb f934 	bl	8000534 <__aeabi_i2d>
 80052cc:	4632      	mov	r2, r6
 80052ce:	463b      	mov	r3, r7
 80052d0:	f7fb fc02 	bl	8000ad8 <__aeabi_dcmpeq>
 80052d4:	b908      	cbnz	r0, 80052da <_dtoa_r+0x162>
 80052d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80052da:	f1ba 0f16 	cmp.w	sl, #22
 80052de:	d859      	bhi.n	8005394 <_dtoa_r+0x21c>
 80052e0:	4970      	ldr	r1, [pc, #448]	; (80054a4 <_dtoa_r+0x32c>)
 80052e2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80052e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80052ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80052ee:	f7fb fc1b 	bl	8000b28 <__aeabi_dcmpgt>
 80052f2:	2800      	cmp	r0, #0
 80052f4:	d050      	beq.n	8005398 <_dtoa_r+0x220>
 80052f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80052fa:	2300      	movs	r3, #0
 80052fc:	930f      	str	r3, [sp, #60]	; 0x3c
 80052fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005300:	1b5d      	subs	r5, r3, r5
 8005302:	f1b5 0801 	subs.w	r8, r5, #1
 8005306:	bf49      	itett	mi
 8005308:	f1c5 0301 	rsbmi	r3, r5, #1
 800530c:	2300      	movpl	r3, #0
 800530e:	9305      	strmi	r3, [sp, #20]
 8005310:	f04f 0800 	movmi.w	r8, #0
 8005314:	bf58      	it	pl
 8005316:	9305      	strpl	r3, [sp, #20]
 8005318:	f1ba 0f00 	cmp.w	sl, #0
 800531c:	db3e      	blt.n	800539c <_dtoa_r+0x224>
 800531e:	2300      	movs	r3, #0
 8005320:	44d0      	add	r8, sl
 8005322:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8005326:	9307      	str	r3, [sp, #28]
 8005328:	9b06      	ldr	r3, [sp, #24]
 800532a:	2b09      	cmp	r3, #9
 800532c:	f200 8090 	bhi.w	8005450 <_dtoa_r+0x2d8>
 8005330:	2b05      	cmp	r3, #5
 8005332:	bfc4      	itt	gt
 8005334:	3b04      	subgt	r3, #4
 8005336:	9306      	strgt	r3, [sp, #24]
 8005338:	9b06      	ldr	r3, [sp, #24]
 800533a:	f1a3 0302 	sub.w	r3, r3, #2
 800533e:	bfcc      	ite	gt
 8005340:	2500      	movgt	r5, #0
 8005342:	2501      	movle	r5, #1
 8005344:	2b03      	cmp	r3, #3
 8005346:	f200 808f 	bhi.w	8005468 <_dtoa_r+0x2f0>
 800534a:	e8df f003 	tbb	[pc, r3]
 800534e:	7f7d      	.short	0x7f7d
 8005350:	7131      	.short	0x7131
 8005352:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8005356:	441d      	add	r5, r3
 8005358:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800535c:	2820      	cmp	r0, #32
 800535e:	dd13      	ble.n	8005388 <_dtoa_r+0x210>
 8005360:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8005364:	9b00      	ldr	r3, [sp, #0]
 8005366:	fa08 f800 	lsl.w	r8, r8, r0
 800536a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800536e:	fa23 f000 	lsr.w	r0, r3, r0
 8005372:	ea48 0000 	orr.w	r0, r8, r0
 8005376:	f7fb f8cd 	bl	8000514 <__aeabi_ui2d>
 800537a:	2301      	movs	r3, #1
 800537c:	4682      	mov	sl, r0
 800537e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8005382:	3d01      	subs	r5, #1
 8005384:	9313      	str	r3, [sp, #76]	; 0x4c
 8005386:	e772      	b.n	800526e <_dtoa_r+0xf6>
 8005388:	9b00      	ldr	r3, [sp, #0]
 800538a:	f1c0 0020 	rsb	r0, r0, #32
 800538e:	fa03 f000 	lsl.w	r0, r3, r0
 8005392:	e7f0      	b.n	8005376 <_dtoa_r+0x1fe>
 8005394:	2301      	movs	r3, #1
 8005396:	e7b1      	b.n	80052fc <_dtoa_r+0x184>
 8005398:	900f      	str	r0, [sp, #60]	; 0x3c
 800539a:	e7b0      	b.n	80052fe <_dtoa_r+0x186>
 800539c:	9b05      	ldr	r3, [sp, #20]
 800539e:	eba3 030a 	sub.w	r3, r3, sl
 80053a2:	9305      	str	r3, [sp, #20]
 80053a4:	f1ca 0300 	rsb	r3, sl, #0
 80053a8:	9307      	str	r3, [sp, #28]
 80053aa:	2300      	movs	r3, #0
 80053ac:	930e      	str	r3, [sp, #56]	; 0x38
 80053ae:	e7bb      	b.n	8005328 <_dtoa_r+0x1b0>
 80053b0:	2301      	movs	r3, #1
 80053b2:	930a      	str	r3, [sp, #40]	; 0x28
 80053b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	dd59      	ble.n	800546e <_dtoa_r+0x2f6>
 80053ba:	9302      	str	r3, [sp, #8]
 80053bc:	4699      	mov	r9, r3
 80053be:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80053c0:	2200      	movs	r2, #0
 80053c2:	6072      	str	r2, [r6, #4]
 80053c4:	2204      	movs	r2, #4
 80053c6:	f102 0014 	add.w	r0, r2, #20
 80053ca:	4298      	cmp	r0, r3
 80053cc:	6871      	ldr	r1, [r6, #4]
 80053ce:	d953      	bls.n	8005478 <_dtoa_r+0x300>
 80053d0:	4620      	mov	r0, r4
 80053d2:	f000 fcaa 	bl	8005d2a <_Balloc>
 80053d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80053d8:	6030      	str	r0, [r6, #0]
 80053da:	f1b9 0f0e 	cmp.w	r9, #14
 80053de:	f8d3 b000 	ldr.w	fp, [r3]
 80053e2:	f200 80e6 	bhi.w	80055b2 <_dtoa_r+0x43a>
 80053e6:	2d00      	cmp	r5, #0
 80053e8:	f000 80e3 	beq.w	80055b2 <_dtoa_r+0x43a>
 80053ec:	ed9d 7b00 	vldr	d7, [sp]
 80053f0:	f1ba 0f00 	cmp.w	sl, #0
 80053f4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80053f8:	dd74      	ble.n	80054e4 <_dtoa_r+0x36c>
 80053fa:	4a2a      	ldr	r2, [pc, #168]	; (80054a4 <_dtoa_r+0x32c>)
 80053fc:	f00a 030f 	and.w	r3, sl, #15
 8005400:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005404:	ed93 7b00 	vldr	d7, [r3]
 8005408:	ea4f 162a 	mov.w	r6, sl, asr #4
 800540c:	06f0      	lsls	r0, r6, #27
 800540e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8005412:	d565      	bpl.n	80054e0 <_dtoa_r+0x368>
 8005414:	4b24      	ldr	r3, [pc, #144]	; (80054a8 <_dtoa_r+0x330>)
 8005416:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800541a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800541e:	f7fb fa1d 	bl	800085c <__aeabi_ddiv>
 8005422:	e9cd 0100 	strd	r0, r1, [sp]
 8005426:	f006 060f 	and.w	r6, r6, #15
 800542a:	2503      	movs	r5, #3
 800542c:	4f1e      	ldr	r7, [pc, #120]	; (80054a8 <_dtoa_r+0x330>)
 800542e:	e04c      	b.n	80054ca <_dtoa_r+0x352>
 8005430:	2301      	movs	r3, #1
 8005432:	930a      	str	r3, [sp, #40]	; 0x28
 8005434:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005436:	4453      	add	r3, sl
 8005438:	f103 0901 	add.w	r9, r3, #1
 800543c:	9302      	str	r3, [sp, #8]
 800543e:	464b      	mov	r3, r9
 8005440:	2b01      	cmp	r3, #1
 8005442:	bfb8      	it	lt
 8005444:	2301      	movlt	r3, #1
 8005446:	e7ba      	b.n	80053be <_dtoa_r+0x246>
 8005448:	2300      	movs	r3, #0
 800544a:	e7b2      	b.n	80053b2 <_dtoa_r+0x23a>
 800544c:	2300      	movs	r3, #0
 800544e:	e7f0      	b.n	8005432 <_dtoa_r+0x2ba>
 8005450:	2501      	movs	r5, #1
 8005452:	2300      	movs	r3, #0
 8005454:	9306      	str	r3, [sp, #24]
 8005456:	950a      	str	r5, [sp, #40]	; 0x28
 8005458:	f04f 33ff 	mov.w	r3, #4294967295
 800545c:	9302      	str	r3, [sp, #8]
 800545e:	4699      	mov	r9, r3
 8005460:	2200      	movs	r2, #0
 8005462:	2312      	movs	r3, #18
 8005464:	920b      	str	r2, [sp, #44]	; 0x2c
 8005466:	e7aa      	b.n	80053be <_dtoa_r+0x246>
 8005468:	2301      	movs	r3, #1
 800546a:	930a      	str	r3, [sp, #40]	; 0x28
 800546c:	e7f4      	b.n	8005458 <_dtoa_r+0x2e0>
 800546e:	2301      	movs	r3, #1
 8005470:	9302      	str	r3, [sp, #8]
 8005472:	4699      	mov	r9, r3
 8005474:	461a      	mov	r2, r3
 8005476:	e7f5      	b.n	8005464 <_dtoa_r+0x2ec>
 8005478:	3101      	adds	r1, #1
 800547a:	6071      	str	r1, [r6, #4]
 800547c:	0052      	lsls	r2, r2, #1
 800547e:	e7a2      	b.n	80053c6 <_dtoa_r+0x24e>
 8005480:	636f4361 	.word	0x636f4361
 8005484:	3fd287a7 	.word	0x3fd287a7
 8005488:	8b60c8b3 	.word	0x8b60c8b3
 800548c:	3fc68a28 	.word	0x3fc68a28
 8005490:	509f79fb 	.word	0x509f79fb
 8005494:	3fd34413 	.word	0x3fd34413
 8005498:	7ff00000 	.word	0x7ff00000
 800549c:	080080c5 	.word	0x080080c5
 80054a0:	3ff80000 	.word	0x3ff80000
 80054a4:	08007ed0 	.word	0x08007ed0
 80054a8:	08007ea8 	.word	0x08007ea8
 80054ac:	08007e9f 	.word	0x08007e9f
 80054b0:	07f1      	lsls	r1, r6, #31
 80054b2:	d508      	bpl.n	80054c6 <_dtoa_r+0x34e>
 80054b4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80054b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054bc:	f7fb f8a4 	bl	8000608 <__aeabi_dmul>
 80054c0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80054c4:	3501      	adds	r5, #1
 80054c6:	1076      	asrs	r6, r6, #1
 80054c8:	3708      	adds	r7, #8
 80054ca:	2e00      	cmp	r6, #0
 80054cc:	d1f0      	bne.n	80054b0 <_dtoa_r+0x338>
 80054ce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80054d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80054d6:	f7fb f9c1 	bl	800085c <__aeabi_ddiv>
 80054da:	e9cd 0100 	strd	r0, r1, [sp]
 80054de:	e01a      	b.n	8005516 <_dtoa_r+0x39e>
 80054e0:	2502      	movs	r5, #2
 80054e2:	e7a3      	b.n	800542c <_dtoa_r+0x2b4>
 80054e4:	f000 80a0 	beq.w	8005628 <_dtoa_r+0x4b0>
 80054e8:	f1ca 0600 	rsb	r6, sl, #0
 80054ec:	4b9f      	ldr	r3, [pc, #636]	; (800576c <_dtoa_r+0x5f4>)
 80054ee:	4fa0      	ldr	r7, [pc, #640]	; (8005770 <_dtoa_r+0x5f8>)
 80054f0:	f006 020f 	and.w	r2, r6, #15
 80054f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80054f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054fc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005500:	f7fb f882 	bl	8000608 <__aeabi_dmul>
 8005504:	e9cd 0100 	strd	r0, r1, [sp]
 8005508:	1136      	asrs	r6, r6, #4
 800550a:	2300      	movs	r3, #0
 800550c:	2502      	movs	r5, #2
 800550e:	2e00      	cmp	r6, #0
 8005510:	d17f      	bne.n	8005612 <_dtoa_r+0x49a>
 8005512:	2b00      	cmp	r3, #0
 8005514:	d1e1      	bne.n	80054da <_dtoa_r+0x362>
 8005516:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005518:	2b00      	cmp	r3, #0
 800551a:	f000 8087 	beq.w	800562c <_dtoa_r+0x4b4>
 800551e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005522:	2200      	movs	r2, #0
 8005524:	4b93      	ldr	r3, [pc, #588]	; (8005774 <_dtoa_r+0x5fc>)
 8005526:	4630      	mov	r0, r6
 8005528:	4639      	mov	r1, r7
 800552a:	f7fb fadf 	bl	8000aec <__aeabi_dcmplt>
 800552e:	2800      	cmp	r0, #0
 8005530:	d07c      	beq.n	800562c <_dtoa_r+0x4b4>
 8005532:	f1b9 0f00 	cmp.w	r9, #0
 8005536:	d079      	beq.n	800562c <_dtoa_r+0x4b4>
 8005538:	9b02      	ldr	r3, [sp, #8]
 800553a:	2b00      	cmp	r3, #0
 800553c:	dd35      	ble.n	80055aa <_dtoa_r+0x432>
 800553e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005542:	9308      	str	r3, [sp, #32]
 8005544:	4639      	mov	r1, r7
 8005546:	2200      	movs	r2, #0
 8005548:	4b8b      	ldr	r3, [pc, #556]	; (8005778 <_dtoa_r+0x600>)
 800554a:	4630      	mov	r0, r6
 800554c:	f7fb f85c 	bl	8000608 <__aeabi_dmul>
 8005550:	e9cd 0100 	strd	r0, r1, [sp]
 8005554:	9f02      	ldr	r7, [sp, #8]
 8005556:	3501      	adds	r5, #1
 8005558:	4628      	mov	r0, r5
 800555a:	f7fa ffeb 	bl	8000534 <__aeabi_i2d>
 800555e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005562:	f7fb f851 	bl	8000608 <__aeabi_dmul>
 8005566:	2200      	movs	r2, #0
 8005568:	4b84      	ldr	r3, [pc, #528]	; (800577c <_dtoa_r+0x604>)
 800556a:	f7fa fe97 	bl	800029c <__adddf3>
 800556e:	4605      	mov	r5, r0
 8005570:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005574:	2f00      	cmp	r7, #0
 8005576:	d15d      	bne.n	8005634 <_dtoa_r+0x4bc>
 8005578:	2200      	movs	r2, #0
 800557a:	4b81      	ldr	r3, [pc, #516]	; (8005780 <_dtoa_r+0x608>)
 800557c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005580:	f7fa fe8a 	bl	8000298 <__aeabi_dsub>
 8005584:	462a      	mov	r2, r5
 8005586:	4633      	mov	r3, r6
 8005588:	e9cd 0100 	strd	r0, r1, [sp]
 800558c:	f7fb facc 	bl	8000b28 <__aeabi_dcmpgt>
 8005590:	2800      	cmp	r0, #0
 8005592:	f040 8288 	bne.w	8005aa6 <_dtoa_r+0x92e>
 8005596:	462a      	mov	r2, r5
 8005598:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800559c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80055a0:	f7fb faa4 	bl	8000aec <__aeabi_dcmplt>
 80055a4:	2800      	cmp	r0, #0
 80055a6:	f040 827c 	bne.w	8005aa2 <_dtoa_r+0x92a>
 80055aa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80055ae:	e9cd 2300 	strd	r2, r3, [sp]
 80055b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	f2c0 8150 	blt.w	800585a <_dtoa_r+0x6e2>
 80055ba:	f1ba 0f0e 	cmp.w	sl, #14
 80055be:	f300 814c 	bgt.w	800585a <_dtoa_r+0x6e2>
 80055c2:	4b6a      	ldr	r3, [pc, #424]	; (800576c <_dtoa_r+0x5f4>)
 80055c4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80055c8:	ed93 7b00 	vldr	d7, [r3]
 80055cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80055d4:	f280 80d8 	bge.w	8005788 <_dtoa_r+0x610>
 80055d8:	f1b9 0f00 	cmp.w	r9, #0
 80055dc:	f300 80d4 	bgt.w	8005788 <_dtoa_r+0x610>
 80055e0:	f040 825e 	bne.w	8005aa0 <_dtoa_r+0x928>
 80055e4:	2200      	movs	r2, #0
 80055e6:	4b66      	ldr	r3, [pc, #408]	; (8005780 <_dtoa_r+0x608>)
 80055e8:	ec51 0b17 	vmov	r0, r1, d7
 80055ec:	f7fb f80c 	bl	8000608 <__aeabi_dmul>
 80055f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80055f4:	f7fb fa8e 	bl	8000b14 <__aeabi_dcmpge>
 80055f8:	464f      	mov	r7, r9
 80055fa:	464e      	mov	r6, r9
 80055fc:	2800      	cmp	r0, #0
 80055fe:	f040 8234 	bne.w	8005a6a <_dtoa_r+0x8f2>
 8005602:	2331      	movs	r3, #49	; 0x31
 8005604:	f10b 0501 	add.w	r5, fp, #1
 8005608:	f88b 3000 	strb.w	r3, [fp]
 800560c:	f10a 0a01 	add.w	sl, sl, #1
 8005610:	e22f      	b.n	8005a72 <_dtoa_r+0x8fa>
 8005612:	07f2      	lsls	r2, r6, #31
 8005614:	d505      	bpl.n	8005622 <_dtoa_r+0x4aa>
 8005616:	e9d7 2300 	ldrd	r2, r3, [r7]
 800561a:	f7fa fff5 	bl	8000608 <__aeabi_dmul>
 800561e:	3501      	adds	r5, #1
 8005620:	2301      	movs	r3, #1
 8005622:	1076      	asrs	r6, r6, #1
 8005624:	3708      	adds	r7, #8
 8005626:	e772      	b.n	800550e <_dtoa_r+0x396>
 8005628:	2502      	movs	r5, #2
 800562a:	e774      	b.n	8005516 <_dtoa_r+0x39e>
 800562c:	f8cd a020 	str.w	sl, [sp, #32]
 8005630:	464f      	mov	r7, r9
 8005632:	e791      	b.n	8005558 <_dtoa_r+0x3e0>
 8005634:	4b4d      	ldr	r3, [pc, #308]	; (800576c <_dtoa_r+0x5f4>)
 8005636:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800563a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800563e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005640:	2b00      	cmp	r3, #0
 8005642:	d047      	beq.n	80056d4 <_dtoa_r+0x55c>
 8005644:	4602      	mov	r2, r0
 8005646:	460b      	mov	r3, r1
 8005648:	2000      	movs	r0, #0
 800564a:	494e      	ldr	r1, [pc, #312]	; (8005784 <_dtoa_r+0x60c>)
 800564c:	f7fb f906 	bl	800085c <__aeabi_ddiv>
 8005650:	462a      	mov	r2, r5
 8005652:	4633      	mov	r3, r6
 8005654:	f7fa fe20 	bl	8000298 <__aeabi_dsub>
 8005658:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800565c:	465d      	mov	r5, fp
 800565e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005662:	f7fb fa81 	bl	8000b68 <__aeabi_d2iz>
 8005666:	4606      	mov	r6, r0
 8005668:	f7fa ff64 	bl	8000534 <__aeabi_i2d>
 800566c:	4602      	mov	r2, r0
 800566e:	460b      	mov	r3, r1
 8005670:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005674:	f7fa fe10 	bl	8000298 <__aeabi_dsub>
 8005678:	3630      	adds	r6, #48	; 0x30
 800567a:	f805 6b01 	strb.w	r6, [r5], #1
 800567e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005682:	e9cd 0100 	strd	r0, r1, [sp]
 8005686:	f7fb fa31 	bl	8000aec <__aeabi_dcmplt>
 800568a:	2800      	cmp	r0, #0
 800568c:	d163      	bne.n	8005756 <_dtoa_r+0x5de>
 800568e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005692:	2000      	movs	r0, #0
 8005694:	4937      	ldr	r1, [pc, #220]	; (8005774 <_dtoa_r+0x5fc>)
 8005696:	f7fa fdff 	bl	8000298 <__aeabi_dsub>
 800569a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800569e:	f7fb fa25 	bl	8000aec <__aeabi_dcmplt>
 80056a2:	2800      	cmp	r0, #0
 80056a4:	f040 80b7 	bne.w	8005816 <_dtoa_r+0x69e>
 80056a8:	eba5 030b 	sub.w	r3, r5, fp
 80056ac:	429f      	cmp	r7, r3
 80056ae:	f77f af7c 	ble.w	80055aa <_dtoa_r+0x432>
 80056b2:	2200      	movs	r2, #0
 80056b4:	4b30      	ldr	r3, [pc, #192]	; (8005778 <_dtoa_r+0x600>)
 80056b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80056ba:	f7fa ffa5 	bl	8000608 <__aeabi_dmul>
 80056be:	2200      	movs	r2, #0
 80056c0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80056c4:	4b2c      	ldr	r3, [pc, #176]	; (8005778 <_dtoa_r+0x600>)
 80056c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80056ca:	f7fa ff9d 	bl	8000608 <__aeabi_dmul>
 80056ce:	e9cd 0100 	strd	r0, r1, [sp]
 80056d2:	e7c4      	b.n	800565e <_dtoa_r+0x4e6>
 80056d4:	462a      	mov	r2, r5
 80056d6:	4633      	mov	r3, r6
 80056d8:	f7fa ff96 	bl	8000608 <__aeabi_dmul>
 80056dc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80056e0:	eb0b 0507 	add.w	r5, fp, r7
 80056e4:	465e      	mov	r6, fp
 80056e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80056ea:	f7fb fa3d 	bl	8000b68 <__aeabi_d2iz>
 80056ee:	4607      	mov	r7, r0
 80056f0:	f7fa ff20 	bl	8000534 <__aeabi_i2d>
 80056f4:	3730      	adds	r7, #48	; 0x30
 80056f6:	4602      	mov	r2, r0
 80056f8:	460b      	mov	r3, r1
 80056fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80056fe:	f7fa fdcb 	bl	8000298 <__aeabi_dsub>
 8005702:	f806 7b01 	strb.w	r7, [r6], #1
 8005706:	42ae      	cmp	r6, r5
 8005708:	e9cd 0100 	strd	r0, r1, [sp]
 800570c:	f04f 0200 	mov.w	r2, #0
 8005710:	d126      	bne.n	8005760 <_dtoa_r+0x5e8>
 8005712:	4b1c      	ldr	r3, [pc, #112]	; (8005784 <_dtoa_r+0x60c>)
 8005714:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005718:	f7fa fdc0 	bl	800029c <__adddf3>
 800571c:	4602      	mov	r2, r0
 800571e:	460b      	mov	r3, r1
 8005720:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005724:	f7fb fa00 	bl	8000b28 <__aeabi_dcmpgt>
 8005728:	2800      	cmp	r0, #0
 800572a:	d174      	bne.n	8005816 <_dtoa_r+0x69e>
 800572c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005730:	2000      	movs	r0, #0
 8005732:	4914      	ldr	r1, [pc, #80]	; (8005784 <_dtoa_r+0x60c>)
 8005734:	f7fa fdb0 	bl	8000298 <__aeabi_dsub>
 8005738:	4602      	mov	r2, r0
 800573a:	460b      	mov	r3, r1
 800573c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005740:	f7fb f9d4 	bl	8000aec <__aeabi_dcmplt>
 8005744:	2800      	cmp	r0, #0
 8005746:	f43f af30 	beq.w	80055aa <_dtoa_r+0x432>
 800574a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800574e:	2b30      	cmp	r3, #48	; 0x30
 8005750:	f105 32ff 	add.w	r2, r5, #4294967295
 8005754:	d002      	beq.n	800575c <_dtoa_r+0x5e4>
 8005756:	f8dd a020 	ldr.w	sl, [sp, #32]
 800575a:	e04a      	b.n	80057f2 <_dtoa_r+0x67a>
 800575c:	4615      	mov	r5, r2
 800575e:	e7f4      	b.n	800574a <_dtoa_r+0x5d2>
 8005760:	4b05      	ldr	r3, [pc, #20]	; (8005778 <_dtoa_r+0x600>)
 8005762:	f7fa ff51 	bl	8000608 <__aeabi_dmul>
 8005766:	e9cd 0100 	strd	r0, r1, [sp]
 800576a:	e7bc      	b.n	80056e6 <_dtoa_r+0x56e>
 800576c:	08007ed0 	.word	0x08007ed0
 8005770:	08007ea8 	.word	0x08007ea8
 8005774:	3ff00000 	.word	0x3ff00000
 8005778:	40240000 	.word	0x40240000
 800577c:	401c0000 	.word	0x401c0000
 8005780:	40140000 	.word	0x40140000
 8005784:	3fe00000 	.word	0x3fe00000
 8005788:	e9dd 6700 	ldrd	r6, r7, [sp]
 800578c:	465d      	mov	r5, fp
 800578e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005792:	4630      	mov	r0, r6
 8005794:	4639      	mov	r1, r7
 8005796:	f7fb f861 	bl	800085c <__aeabi_ddiv>
 800579a:	f7fb f9e5 	bl	8000b68 <__aeabi_d2iz>
 800579e:	4680      	mov	r8, r0
 80057a0:	f7fa fec8 	bl	8000534 <__aeabi_i2d>
 80057a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80057a8:	f7fa ff2e 	bl	8000608 <__aeabi_dmul>
 80057ac:	4602      	mov	r2, r0
 80057ae:	460b      	mov	r3, r1
 80057b0:	4630      	mov	r0, r6
 80057b2:	4639      	mov	r1, r7
 80057b4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80057b8:	f7fa fd6e 	bl	8000298 <__aeabi_dsub>
 80057bc:	f805 6b01 	strb.w	r6, [r5], #1
 80057c0:	eba5 060b 	sub.w	r6, r5, fp
 80057c4:	45b1      	cmp	r9, r6
 80057c6:	4602      	mov	r2, r0
 80057c8:	460b      	mov	r3, r1
 80057ca:	d139      	bne.n	8005840 <_dtoa_r+0x6c8>
 80057cc:	f7fa fd66 	bl	800029c <__adddf3>
 80057d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80057d4:	4606      	mov	r6, r0
 80057d6:	460f      	mov	r7, r1
 80057d8:	f7fb f9a6 	bl	8000b28 <__aeabi_dcmpgt>
 80057dc:	b9c8      	cbnz	r0, 8005812 <_dtoa_r+0x69a>
 80057de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80057e2:	4630      	mov	r0, r6
 80057e4:	4639      	mov	r1, r7
 80057e6:	f7fb f977 	bl	8000ad8 <__aeabi_dcmpeq>
 80057ea:	b110      	cbz	r0, 80057f2 <_dtoa_r+0x67a>
 80057ec:	f018 0f01 	tst.w	r8, #1
 80057f0:	d10f      	bne.n	8005812 <_dtoa_r+0x69a>
 80057f2:	9904      	ldr	r1, [sp, #16]
 80057f4:	4620      	mov	r0, r4
 80057f6:	f000 facc 	bl	8005d92 <_Bfree>
 80057fa:	2300      	movs	r3, #0
 80057fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80057fe:	702b      	strb	r3, [r5, #0]
 8005800:	f10a 0301 	add.w	r3, sl, #1
 8005804:	6013      	str	r3, [r2, #0]
 8005806:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005808:	2b00      	cmp	r3, #0
 800580a:	f000 8241 	beq.w	8005c90 <_dtoa_r+0xb18>
 800580e:	601d      	str	r5, [r3, #0]
 8005810:	e23e      	b.n	8005c90 <_dtoa_r+0xb18>
 8005812:	f8cd a020 	str.w	sl, [sp, #32]
 8005816:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800581a:	2a39      	cmp	r2, #57	; 0x39
 800581c:	f105 33ff 	add.w	r3, r5, #4294967295
 8005820:	d108      	bne.n	8005834 <_dtoa_r+0x6bc>
 8005822:	459b      	cmp	fp, r3
 8005824:	d10a      	bne.n	800583c <_dtoa_r+0x6c4>
 8005826:	9b08      	ldr	r3, [sp, #32]
 8005828:	3301      	adds	r3, #1
 800582a:	9308      	str	r3, [sp, #32]
 800582c:	2330      	movs	r3, #48	; 0x30
 800582e:	f88b 3000 	strb.w	r3, [fp]
 8005832:	465b      	mov	r3, fp
 8005834:	781a      	ldrb	r2, [r3, #0]
 8005836:	3201      	adds	r2, #1
 8005838:	701a      	strb	r2, [r3, #0]
 800583a:	e78c      	b.n	8005756 <_dtoa_r+0x5de>
 800583c:	461d      	mov	r5, r3
 800583e:	e7ea      	b.n	8005816 <_dtoa_r+0x69e>
 8005840:	2200      	movs	r2, #0
 8005842:	4b9b      	ldr	r3, [pc, #620]	; (8005ab0 <_dtoa_r+0x938>)
 8005844:	f7fa fee0 	bl	8000608 <__aeabi_dmul>
 8005848:	2200      	movs	r2, #0
 800584a:	2300      	movs	r3, #0
 800584c:	4606      	mov	r6, r0
 800584e:	460f      	mov	r7, r1
 8005850:	f7fb f942 	bl	8000ad8 <__aeabi_dcmpeq>
 8005854:	2800      	cmp	r0, #0
 8005856:	d09a      	beq.n	800578e <_dtoa_r+0x616>
 8005858:	e7cb      	b.n	80057f2 <_dtoa_r+0x67a>
 800585a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800585c:	2a00      	cmp	r2, #0
 800585e:	f000 808b 	beq.w	8005978 <_dtoa_r+0x800>
 8005862:	9a06      	ldr	r2, [sp, #24]
 8005864:	2a01      	cmp	r2, #1
 8005866:	dc6e      	bgt.n	8005946 <_dtoa_r+0x7ce>
 8005868:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800586a:	2a00      	cmp	r2, #0
 800586c:	d067      	beq.n	800593e <_dtoa_r+0x7c6>
 800586e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005872:	9f07      	ldr	r7, [sp, #28]
 8005874:	9d05      	ldr	r5, [sp, #20]
 8005876:	9a05      	ldr	r2, [sp, #20]
 8005878:	2101      	movs	r1, #1
 800587a:	441a      	add	r2, r3
 800587c:	4620      	mov	r0, r4
 800587e:	9205      	str	r2, [sp, #20]
 8005880:	4498      	add	r8, r3
 8005882:	f000 fb26 	bl	8005ed2 <__i2b>
 8005886:	4606      	mov	r6, r0
 8005888:	2d00      	cmp	r5, #0
 800588a:	dd0c      	ble.n	80058a6 <_dtoa_r+0x72e>
 800588c:	f1b8 0f00 	cmp.w	r8, #0
 8005890:	dd09      	ble.n	80058a6 <_dtoa_r+0x72e>
 8005892:	4545      	cmp	r5, r8
 8005894:	9a05      	ldr	r2, [sp, #20]
 8005896:	462b      	mov	r3, r5
 8005898:	bfa8      	it	ge
 800589a:	4643      	movge	r3, r8
 800589c:	1ad2      	subs	r2, r2, r3
 800589e:	9205      	str	r2, [sp, #20]
 80058a0:	1aed      	subs	r5, r5, r3
 80058a2:	eba8 0803 	sub.w	r8, r8, r3
 80058a6:	9b07      	ldr	r3, [sp, #28]
 80058a8:	b1eb      	cbz	r3, 80058e6 <_dtoa_r+0x76e>
 80058aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d067      	beq.n	8005980 <_dtoa_r+0x808>
 80058b0:	b18f      	cbz	r7, 80058d6 <_dtoa_r+0x75e>
 80058b2:	4631      	mov	r1, r6
 80058b4:	463a      	mov	r2, r7
 80058b6:	4620      	mov	r0, r4
 80058b8:	f000 fbaa 	bl	8006010 <__pow5mult>
 80058bc:	9a04      	ldr	r2, [sp, #16]
 80058be:	4601      	mov	r1, r0
 80058c0:	4606      	mov	r6, r0
 80058c2:	4620      	mov	r0, r4
 80058c4:	f000 fb0e 	bl	8005ee4 <__multiply>
 80058c8:	9904      	ldr	r1, [sp, #16]
 80058ca:	9008      	str	r0, [sp, #32]
 80058cc:	4620      	mov	r0, r4
 80058ce:	f000 fa60 	bl	8005d92 <_Bfree>
 80058d2:	9b08      	ldr	r3, [sp, #32]
 80058d4:	9304      	str	r3, [sp, #16]
 80058d6:	9b07      	ldr	r3, [sp, #28]
 80058d8:	1bda      	subs	r2, r3, r7
 80058da:	d004      	beq.n	80058e6 <_dtoa_r+0x76e>
 80058dc:	9904      	ldr	r1, [sp, #16]
 80058de:	4620      	mov	r0, r4
 80058e0:	f000 fb96 	bl	8006010 <__pow5mult>
 80058e4:	9004      	str	r0, [sp, #16]
 80058e6:	2101      	movs	r1, #1
 80058e8:	4620      	mov	r0, r4
 80058ea:	f000 faf2 	bl	8005ed2 <__i2b>
 80058ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80058f0:	4607      	mov	r7, r0
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	f000 81d0 	beq.w	8005c98 <_dtoa_r+0xb20>
 80058f8:	461a      	mov	r2, r3
 80058fa:	4601      	mov	r1, r0
 80058fc:	4620      	mov	r0, r4
 80058fe:	f000 fb87 	bl	8006010 <__pow5mult>
 8005902:	9b06      	ldr	r3, [sp, #24]
 8005904:	2b01      	cmp	r3, #1
 8005906:	4607      	mov	r7, r0
 8005908:	dc40      	bgt.n	800598c <_dtoa_r+0x814>
 800590a:	9b00      	ldr	r3, [sp, #0]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d139      	bne.n	8005984 <_dtoa_r+0x80c>
 8005910:	9b01      	ldr	r3, [sp, #4]
 8005912:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005916:	2b00      	cmp	r3, #0
 8005918:	d136      	bne.n	8005988 <_dtoa_r+0x810>
 800591a:	9b01      	ldr	r3, [sp, #4]
 800591c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005920:	0d1b      	lsrs	r3, r3, #20
 8005922:	051b      	lsls	r3, r3, #20
 8005924:	b12b      	cbz	r3, 8005932 <_dtoa_r+0x7ba>
 8005926:	9b05      	ldr	r3, [sp, #20]
 8005928:	3301      	adds	r3, #1
 800592a:	9305      	str	r3, [sp, #20]
 800592c:	f108 0801 	add.w	r8, r8, #1
 8005930:	2301      	movs	r3, #1
 8005932:	9307      	str	r3, [sp, #28]
 8005934:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005936:	2b00      	cmp	r3, #0
 8005938:	d12a      	bne.n	8005990 <_dtoa_r+0x818>
 800593a:	2001      	movs	r0, #1
 800593c:	e030      	b.n	80059a0 <_dtoa_r+0x828>
 800593e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005940:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005944:	e795      	b.n	8005872 <_dtoa_r+0x6fa>
 8005946:	9b07      	ldr	r3, [sp, #28]
 8005948:	f109 37ff 	add.w	r7, r9, #4294967295
 800594c:	42bb      	cmp	r3, r7
 800594e:	bfbf      	itttt	lt
 8005950:	9b07      	ldrlt	r3, [sp, #28]
 8005952:	9707      	strlt	r7, [sp, #28]
 8005954:	1afa      	sublt	r2, r7, r3
 8005956:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005958:	bfbb      	ittet	lt
 800595a:	189b      	addlt	r3, r3, r2
 800595c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800595e:	1bdf      	subge	r7, r3, r7
 8005960:	2700      	movlt	r7, #0
 8005962:	f1b9 0f00 	cmp.w	r9, #0
 8005966:	bfb5      	itete	lt
 8005968:	9b05      	ldrlt	r3, [sp, #20]
 800596a:	9d05      	ldrge	r5, [sp, #20]
 800596c:	eba3 0509 	sublt.w	r5, r3, r9
 8005970:	464b      	movge	r3, r9
 8005972:	bfb8      	it	lt
 8005974:	2300      	movlt	r3, #0
 8005976:	e77e      	b.n	8005876 <_dtoa_r+0x6fe>
 8005978:	9f07      	ldr	r7, [sp, #28]
 800597a:	9d05      	ldr	r5, [sp, #20]
 800597c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800597e:	e783      	b.n	8005888 <_dtoa_r+0x710>
 8005980:	9a07      	ldr	r2, [sp, #28]
 8005982:	e7ab      	b.n	80058dc <_dtoa_r+0x764>
 8005984:	2300      	movs	r3, #0
 8005986:	e7d4      	b.n	8005932 <_dtoa_r+0x7ba>
 8005988:	9b00      	ldr	r3, [sp, #0]
 800598a:	e7d2      	b.n	8005932 <_dtoa_r+0x7ba>
 800598c:	2300      	movs	r3, #0
 800598e:	9307      	str	r3, [sp, #28]
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8005996:	6918      	ldr	r0, [r3, #16]
 8005998:	f000 fa4d 	bl	8005e36 <__hi0bits>
 800599c:	f1c0 0020 	rsb	r0, r0, #32
 80059a0:	4440      	add	r0, r8
 80059a2:	f010 001f 	ands.w	r0, r0, #31
 80059a6:	d047      	beq.n	8005a38 <_dtoa_r+0x8c0>
 80059a8:	f1c0 0320 	rsb	r3, r0, #32
 80059ac:	2b04      	cmp	r3, #4
 80059ae:	dd3b      	ble.n	8005a28 <_dtoa_r+0x8b0>
 80059b0:	9b05      	ldr	r3, [sp, #20]
 80059b2:	f1c0 001c 	rsb	r0, r0, #28
 80059b6:	4403      	add	r3, r0
 80059b8:	9305      	str	r3, [sp, #20]
 80059ba:	4405      	add	r5, r0
 80059bc:	4480      	add	r8, r0
 80059be:	9b05      	ldr	r3, [sp, #20]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	dd05      	ble.n	80059d0 <_dtoa_r+0x858>
 80059c4:	461a      	mov	r2, r3
 80059c6:	9904      	ldr	r1, [sp, #16]
 80059c8:	4620      	mov	r0, r4
 80059ca:	f000 fb6f 	bl	80060ac <__lshift>
 80059ce:	9004      	str	r0, [sp, #16]
 80059d0:	f1b8 0f00 	cmp.w	r8, #0
 80059d4:	dd05      	ble.n	80059e2 <_dtoa_r+0x86a>
 80059d6:	4639      	mov	r1, r7
 80059d8:	4642      	mov	r2, r8
 80059da:	4620      	mov	r0, r4
 80059dc:	f000 fb66 	bl	80060ac <__lshift>
 80059e0:	4607      	mov	r7, r0
 80059e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80059e4:	b353      	cbz	r3, 8005a3c <_dtoa_r+0x8c4>
 80059e6:	4639      	mov	r1, r7
 80059e8:	9804      	ldr	r0, [sp, #16]
 80059ea:	f000 fbb3 	bl	8006154 <__mcmp>
 80059ee:	2800      	cmp	r0, #0
 80059f0:	da24      	bge.n	8005a3c <_dtoa_r+0x8c4>
 80059f2:	2300      	movs	r3, #0
 80059f4:	220a      	movs	r2, #10
 80059f6:	9904      	ldr	r1, [sp, #16]
 80059f8:	4620      	mov	r0, r4
 80059fa:	f000 f9e1 	bl	8005dc0 <__multadd>
 80059fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a00:	9004      	str	r0, [sp, #16]
 8005a02:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	f000 814d 	beq.w	8005ca6 <_dtoa_r+0xb2e>
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	4631      	mov	r1, r6
 8005a10:	220a      	movs	r2, #10
 8005a12:	4620      	mov	r0, r4
 8005a14:	f000 f9d4 	bl	8005dc0 <__multadd>
 8005a18:	9b02      	ldr	r3, [sp, #8]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	4606      	mov	r6, r0
 8005a1e:	dc4f      	bgt.n	8005ac0 <_dtoa_r+0x948>
 8005a20:	9b06      	ldr	r3, [sp, #24]
 8005a22:	2b02      	cmp	r3, #2
 8005a24:	dd4c      	ble.n	8005ac0 <_dtoa_r+0x948>
 8005a26:	e011      	b.n	8005a4c <_dtoa_r+0x8d4>
 8005a28:	d0c9      	beq.n	80059be <_dtoa_r+0x846>
 8005a2a:	9a05      	ldr	r2, [sp, #20]
 8005a2c:	331c      	adds	r3, #28
 8005a2e:	441a      	add	r2, r3
 8005a30:	9205      	str	r2, [sp, #20]
 8005a32:	441d      	add	r5, r3
 8005a34:	4498      	add	r8, r3
 8005a36:	e7c2      	b.n	80059be <_dtoa_r+0x846>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	e7f6      	b.n	8005a2a <_dtoa_r+0x8b2>
 8005a3c:	f1b9 0f00 	cmp.w	r9, #0
 8005a40:	dc38      	bgt.n	8005ab4 <_dtoa_r+0x93c>
 8005a42:	9b06      	ldr	r3, [sp, #24]
 8005a44:	2b02      	cmp	r3, #2
 8005a46:	dd35      	ble.n	8005ab4 <_dtoa_r+0x93c>
 8005a48:	f8cd 9008 	str.w	r9, [sp, #8]
 8005a4c:	9b02      	ldr	r3, [sp, #8]
 8005a4e:	b963      	cbnz	r3, 8005a6a <_dtoa_r+0x8f2>
 8005a50:	4639      	mov	r1, r7
 8005a52:	2205      	movs	r2, #5
 8005a54:	4620      	mov	r0, r4
 8005a56:	f000 f9b3 	bl	8005dc0 <__multadd>
 8005a5a:	4601      	mov	r1, r0
 8005a5c:	4607      	mov	r7, r0
 8005a5e:	9804      	ldr	r0, [sp, #16]
 8005a60:	f000 fb78 	bl	8006154 <__mcmp>
 8005a64:	2800      	cmp	r0, #0
 8005a66:	f73f adcc 	bgt.w	8005602 <_dtoa_r+0x48a>
 8005a6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a6c:	465d      	mov	r5, fp
 8005a6e:	ea6f 0a03 	mvn.w	sl, r3
 8005a72:	f04f 0900 	mov.w	r9, #0
 8005a76:	4639      	mov	r1, r7
 8005a78:	4620      	mov	r0, r4
 8005a7a:	f000 f98a 	bl	8005d92 <_Bfree>
 8005a7e:	2e00      	cmp	r6, #0
 8005a80:	f43f aeb7 	beq.w	80057f2 <_dtoa_r+0x67a>
 8005a84:	f1b9 0f00 	cmp.w	r9, #0
 8005a88:	d005      	beq.n	8005a96 <_dtoa_r+0x91e>
 8005a8a:	45b1      	cmp	r9, r6
 8005a8c:	d003      	beq.n	8005a96 <_dtoa_r+0x91e>
 8005a8e:	4649      	mov	r1, r9
 8005a90:	4620      	mov	r0, r4
 8005a92:	f000 f97e 	bl	8005d92 <_Bfree>
 8005a96:	4631      	mov	r1, r6
 8005a98:	4620      	mov	r0, r4
 8005a9a:	f000 f97a 	bl	8005d92 <_Bfree>
 8005a9e:	e6a8      	b.n	80057f2 <_dtoa_r+0x67a>
 8005aa0:	2700      	movs	r7, #0
 8005aa2:	463e      	mov	r6, r7
 8005aa4:	e7e1      	b.n	8005a6a <_dtoa_r+0x8f2>
 8005aa6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005aaa:	463e      	mov	r6, r7
 8005aac:	e5a9      	b.n	8005602 <_dtoa_r+0x48a>
 8005aae:	bf00      	nop
 8005ab0:	40240000 	.word	0x40240000
 8005ab4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ab6:	f8cd 9008 	str.w	r9, [sp, #8]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	f000 80fa 	beq.w	8005cb4 <_dtoa_r+0xb3c>
 8005ac0:	2d00      	cmp	r5, #0
 8005ac2:	dd05      	ble.n	8005ad0 <_dtoa_r+0x958>
 8005ac4:	4631      	mov	r1, r6
 8005ac6:	462a      	mov	r2, r5
 8005ac8:	4620      	mov	r0, r4
 8005aca:	f000 faef 	bl	80060ac <__lshift>
 8005ace:	4606      	mov	r6, r0
 8005ad0:	9b07      	ldr	r3, [sp, #28]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d04c      	beq.n	8005b70 <_dtoa_r+0x9f8>
 8005ad6:	6871      	ldr	r1, [r6, #4]
 8005ad8:	4620      	mov	r0, r4
 8005ada:	f000 f926 	bl	8005d2a <_Balloc>
 8005ade:	6932      	ldr	r2, [r6, #16]
 8005ae0:	3202      	adds	r2, #2
 8005ae2:	4605      	mov	r5, r0
 8005ae4:	0092      	lsls	r2, r2, #2
 8005ae6:	f106 010c 	add.w	r1, r6, #12
 8005aea:	300c      	adds	r0, #12
 8005aec:	f000 f912 	bl	8005d14 <memcpy>
 8005af0:	2201      	movs	r2, #1
 8005af2:	4629      	mov	r1, r5
 8005af4:	4620      	mov	r0, r4
 8005af6:	f000 fad9 	bl	80060ac <__lshift>
 8005afa:	9b00      	ldr	r3, [sp, #0]
 8005afc:	f8cd b014 	str.w	fp, [sp, #20]
 8005b00:	f003 0301 	and.w	r3, r3, #1
 8005b04:	46b1      	mov	r9, r6
 8005b06:	9307      	str	r3, [sp, #28]
 8005b08:	4606      	mov	r6, r0
 8005b0a:	4639      	mov	r1, r7
 8005b0c:	9804      	ldr	r0, [sp, #16]
 8005b0e:	f7ff faa7 	bl	8005060 <quorem>
 8005b12:	4649      	mov	r1, r9
 8005b14:	4605      	mov	r5, r0
 8005b16:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005b1a:	9804      	ldr	r0, [sp, #16]
 8005b1c:	f000 fb1a 	bl	8006154 <__mcmp>
 8005b20:	4632      	mov	r2, r6
 8005b22:	9000      	str	r0, [sp, #0]
 8005b24:	4639      	mov	r1, r7
 8005b26:	4620      	mov	r0, r4
 8005b28:	f000 fb2e 	bl	8006188 <__mdiff>
 8005b2c:	68c3      	ldr	r3, [r0, #12]
 8005b2e:	4602      	mov	r2, r0
 8005b30:	bb03      	cbnz	r3, 8005b74 <_dtoa_r+0x9fc>
 8005b32:	4601      	mov	r1, r0
 8005b34:	9008      	str	r0, [sp, #32]
 8005b36:	9804      	ldr	r0, [sp, #16]
 8005b38:	f000 fb0c 	bl	8006154 <__mcmp>
 8005b3c:	9a08      	ldr	r2, [sp, #32]
 8005b3e:	4603      	mov	r3, r0
 8005b40:	4611      	mov	r1, r2
 8005b42:	4620      	mov	r0, r4
 8005b44:	9308      	str	r3, [sp, #32]
 8005b46:	f000 f924 	bl	8005d92 <_Bfree>
 8005b4a:	9b08      	ldr	r3, [sp, #32]
 8005b4c:	b9a3      	cbnz	r3, 8005b78 <_dtoa_r+0xa00>
 8005b4e:	9a06      	ldr	r2, [sp, #24]
 8005b50:	b992      	cbnz	r2, 8005b78 <_dtoa_r+0xa00>
 8005b52:	9a07      	ldr	r2, [sp, #28]
 8005b54:	b982      	cbnz	r2, 8005b78 <_dtoa_r+0xa00>
 8005b56:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005b5a:	d029      	beq.n	8005bb0 <_dtoa_r+0xa38>
 8005b5c:	9b00      	ldr	r3, [sp, #0]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	dd01      	ble.n	8005b66 <_dtoa_r+0x9ee>
 8005b62:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8005b66:	9b05      	ldr	r3, [sp, #20]
 8005b68:	1c5d      	adds	r5, r3, #1
 8005b6a:	f883 8000 	strb.w	r8, [r3]
 8005b6e:	e782      	b.n	8005a76 <_dtoa_r+0x8fe>
 8005b70:	4630      	mov	r0, r6
 8005b72:	e7c2      	b.n	8005afa <_dtoa_r+0x982>
 8005b74:	2301      	movs	r3, #1
 8005b76:	e7e3      	b.n	8005b40 <_dtoa_r+0x9c8>
 8005b78:	9a00      	ldr	r2, [sp, #0]
 8005b7a:	2a00      	cmp	r2, #0
 8005b7c:	db04      	blt.n	8005b88 <_dtoa_r+0xa10>
 8005b7e:	d125      	bne.n	8005bcc <_dtoa_r+0xa54>
 8005b80:	9a06      	ldr	r2, [sp, #24]
 8005b82:	bb1a      	cbnz	r2, 8005bcc <_dtoa_r+0xa54>
 8005b84:	9a07      	ldr	r2, [sp, #28]
 8005b86:	bb0a      	cbnz	r2, 8005bcc <_dtoa_r+0xa54>
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	ddec      	ble.n	8005b66 <_dtoa_r+0x9ee>
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	9904      	ldr	r1, [sp, #16]
 8005b90:	4620      	mov	r0, r4
 8005b92:	f000 fa8b 	bl	80060ac <__lshift>
 8005b96:	4639      	mov	r1, r7
 8005b98:	9004      	str	r0, [sp, #16]
 8005b9a:	f000 fadb 	bl	8006154 <__mcmp>
 8005b9e:	2800      	cmp	r0, #0
 8005ba0:	dc03      	bgt.n	8005baa <_dtoa_r+0xa32>
 8005ba2:	d1e0      	bne.n	8005b66 <_dtoa_r+0x9ee>
 8005ba4:	f018 0f01 	tst.w	r8, #1
 8005ba8:	d0dd      	beq.n	8005b66 <_dtoa_r+0x9ee>
 8005baa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005bae:	d1d8      	bne.n	8005b62 <_dtoa_r+0x9ea>
 8005bb0:	9b05      	ldr	r3, [sp, #20]
 8005bb2:	9a05      	ldr	r2, [sp, #20]
 8005bb4:	1c5d      	adds	r5, r3, #1
 8005bb6:	2339      	movs	r3, #57	; 0x39
 8005bb8:	7013      	strb	r3, [r2, #0]
 8005bba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005bbe:	2b39      	cmp	r3, #57	; 0x39
 8005bc0:	f105 32ff 	add.w	r2, r5, #4294967295
 8005bc4:	d04f      	beq.n	8005c66 <_dtoa_r+0xaee>
 8005bc6:	3301      	adds	r3, #1
 8005bc8:	7013      	strb	r3, [r2, #0]
 8005bca:	e754      	b.n	8005a76 <_dtoa_r+0x8fe>
 8005bcc:	9a05      	ldr	r2, [sp, #20]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	f102 0501 	add.w	r5, r2, #1
 8005bd4:	dd06      	ble.n	8005be4 <_dtoa_r+0xa6c>
 8005bd6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005bda:	d0e9      	beq.n	8005bb0 <_dtoa_r+0xa38>
 8005bdc:	f108 0801 	add.w	r8, r8, #1
 8005be0:	9b05      	ldr	r3, [sp, #20]
 8005be2:	e7c2      	b.n	8005b6a <_dtoa_r+0x9f2>
 8005be4:	9a02      	ldr	r2, [sp, #8]
 8005be6:	f805 8c01 	strb.w	r8, [r5, #-1]
 8005bea:	eba5 030b 	sub.w	r3, r5, fp
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d021      	beq.n	8005c36 <_dtoa_r+0xabe>
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	220a      	movs	r2, #10
 8005bf6:	9904      	ldr	r1, [sp, #16]
 8005bf8:	4620      	mov	r0, r4
 8005bfa:	f000 f8e1 	bl	8005dc0 <__multadd>
 8005bfe:	45b1      	cmp	r9, r6
 8005c00:	9004      	str	r0, [sp, #16]
 8005c02:	f04f 0300 	mov.w	r3, #0
 8005c06:	f04f 020a 	mov.w	r2, #10
 8005c0a:	4649      	mov	r1, r9
 8005c0c:	4620      	mov	r0, r4
 8005c0e:	d105      	bne.n	8005c1c <_dtoa_r+0xaa4>
 8005c10:	f000 f8d6 	bl	8005dc0 <__multadd>
 8005c14:	4681      	mov	r9, r0
 8005c16:	4606      	mov	r6, r0
 8005c18:	9505      	str	r5, [sp, #20]
 8005c1a:	e776      	b.n	8005b0a <_dtoa_r+0x992>
 8005c1c:	f000 f8d0 	bl	8005dc0 <__multadd>
 8005c20:	4631      	mov	r1, r6
 8005c22:	4681      	mov	r9, r0
 8005c24:	2300      	movs	r3, #0
 8005c26:	220a      	movs	r2, #10
 8005c28:	4620      	mov	r0, r4
 8005c2a:	f000 f8c9 	bl	8005dc0 <__multadd>
 8005c2e:	4606      	mov	r6, r0
 8005c30:	e7f2      	b.n	8005c18 <_dtoa_r+0xaa0>
 8005c32:	f04f 0900 	mov.w	r9, #0
 8005c36:	2201      	movs	r2, #1
 8005c38:	9904      	ldr	r1, [sp, #16]
 8005c3a:	4620      	mov	r0, r4
 8005c3c:	f000 fa36 	bl	80060ac <__lshift>
 8005c40:	4639      	mov	r1, r7
 8005c42:	9004      	str	r0, [sp, #16]
 8005c44:	f000 fa86 	bl	8006154 <__mcmp>
 8005c48:	2800      	cmp	r0, #0
 8005c4a:	dcb6      	bgt.n	8005bba <_dtoa_r+0xa42>
 8005c4c:	d102      	bne.n	8005c54 <_dtoa_r+0xadc>
 8005c4e:	f018 0f01 	tst.w	r8, #1
 8005c52:	d1b2      	bne.n	8005bba <_dtoa_r+0xa42>
 8005c54:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005c58:	2b30      	cmp	r3, #48	; 0x30
 8005c5a:	f105 32ff 	add.w	r2, r5, #4294967295
 8005c5e:	f47f af0a 	bne.w	8005a76 <_dtoa_r+0x8fe>
 8005c62:	4615      	mov	r5, r2
 8005c64:	e7f6      	b.n	8005c54 <_dtoa_r+0xadc>
 8005c66:	4593      	cmp	fp, r2
 8005c68:	d105      	bne.n	8005c76 <_dtoa_r+0xafe>
 8005c6a:	2331      	movs	r3, #49	; 0x31
 8005c6c:	f10a 0a01 	add.w	sl, sl, #1
 8005c70:	f88b 3000 	strb.w	r3, [fp]
 8005c74:	e6ff      	b.n	8005a76 <_dtoa_r+0x8fe>
 8005c76:	4615      	mov	r5, r2
 8005c78:	e79f      	b.n	8005bba <_dtoa_r+0xa42>
 8005c7a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8005ce0 <_dtoa_r+0xb68>
 8005c7e:	e007      	b.n	8005c90 <_dtoa_r+0xb18>
 8005c80:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005c82:	f8df b060 	ldr.w	fp, [pc, #96]	; 8005ce4 <_dtoa_r+0xb6c>
 8005c86:	b11b      	cbz	r3, 8005c90 <_dtoa_r+0xb18>
 8005c88:	f10b 0308 	add.w	r3, fp, #8
 8005c8c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005c8e:	6013      	str	r3, [r2, #0]
 8005c90:	4658      	mov	r0, fp
 8005c92:	b017      	add	sp, #92	; 0x5c
 8005c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c98:	9b06      	ldr	r3, [sp, #24]
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	f77f ae35 	ble.w	800590a <_dtoa_r+0x792>
 8005ca0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ca2:	9307      	str	r3, [sp, #28]
 8005ca4:	e649      	b.n	800593a <_dtoa_r+0x7c2>
 8005ca6:	9b02      	ldr	r3, [sp, #8]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	dc03      	bgt.n	8005cb4 <_dtoa_r+0xb3c>
 8005cac:	9b06      	ldr	r3, [sp, #24]
 8005cae:	2b02      	cmp	r3, #2
 8005cb0:	f73f aecc 	bgt.w	8005a4c <_dtoa_r+0x8d4>
 8005cb4:	465d      	mov	r5, fp
 8005cb6:	4639      	mov	r1, r7
 8005cb8:	9804      	ldr	r0, [sp, #16]
 8005cba:	f7ff f9d1 	bl	8005060 <quorem>
 8005cbe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005cc2:	f805 8b01 	strb.w	r8, [r5], #1
 8005cc6:	9a02      	ldr	r2, [sp, #8]
 8005cc8:	eba5 030b 	sub.w	r3, r5, fp
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	ddb0      	ble.n	8005c32 <_dtoa_r+0xaba>
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	220a      	movs	r2, #10
 8005cd4:	9904      	ldr	r1, [sp, #16]
 8005cd6:	4620      	mov	r0, r4
 8005cd8:	f000 f872 	bl	8005dc0 <__multadd>
 8005cdc:	9004      	str	r0, [sp, #16]
 8005cde:	e7ea      	b.n	8005cb6 <_dtoa_r+0xb3e>
 8005ce0:	080080c4 	.word	0x080080c4
 8005ce4:	08007e96 	.word	0x08007e96

08005ce8 <_localeconv_r>:
 8005ce8:	4b04      	ldr	r3, [pc, #16]	; (8005cfc <_localeconv_r+0x14>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	6a18      	ldr	r0, [r3, #32]
 8005cee:	4b04      	ldr	r3, [pc, #16]	; (8005d00 <_localeconv_r+0x18>)
 8005cf0:	2800      	cmp	r0, #0
 8005cf2:	bf08      	it	eq
 8005cf4:	4618      	moveq	r0, r3
 8005cf6:	30f0      	adds	r0, #240	; 0xf0
 8005cf8:	4770      	bx	lr
 8005cfa:	bf00      	nop
 8005cfc:	20000080 	.word	0x20000080
 8005d00:	200000e4 	.word	0x200000e4

08005d04 <malloc>:
 8005d04:	4b02      	ldr	r3, [pc, #8]	; (8005d10 <malloc+0xc>)
 8005d06:	4601      	mov	r1, r0
 8005d08:	6818      	ldr	r0, [r3, #0]
 8005d0a:	f000 bb45 	b.w	8006398 <_malloc_r>
 8005d0e:	bf00      	nop
 8005d10:	20000080 	.word	0x20000080

08005d14 <memcpy>:
 8005d14:	b510      	push	{r4, lr}
 8005d16:	1e43      	subs	r3, r0, #1
 8005d18:	440a      	add	r2, r1
 8005d1a:	4291      	cmp	r1, r2
 8005d1c:	d100      	bne.n	8005d20 <memcpy+0xc>
 8005d1e:	bd10      	pop	{r4, pc}
 8005d20:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d24:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d28:	e7f7      	b.n	8005d1a <memcpy+0x6>

08005d2a <_Balloc>:
 8005d2a:	b570      	push	{r4, r5, r6, lr}
 8005d2c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005d2e:	4604      	mov	r4, r0
 8005d30:	460e      	mov	r6, r1
 8005d32:	b93d      	cbnz	r5, 8005d44 <_Balloc+0x1a>
 8005d34:	2010      	movs	r0, #16
 8005d36:	f7ff ffe5 	bl	8005d04 <malloc>
 8005d3a:	6260      	str	r0, [r4, #36]	; 0x24
 8005d3c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005d40:	6005      	str	r5, [r0, #0]
 8005d42:	60c5      	str	r5, [r0, #12]
 8005d44:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005d46:	68eb      	ldr	r3, [r5, #12]
 8005d48:	b183      	cbz	r3, 8005d6c <_Balloc+0x42>
 8005d4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d4c:	68db      	ldr	r3, [r3, #12]
 8005d4e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005d52:	b9b8      	cbnz	r0, 8005d84 <_Balloc+0x5a>
 8005d54:	2101      	movs	r1, #1
 8005d56:	fa01 f506 	lsl.w	r5, r1, r6
 8005d5a:	1d6a      	adds	r2, r5, #5
 8005d5c:	0092      	lsls	r2, r2, #2
 8005d5e:	4620      	mov	r0, r4
 8005d60:	f000 fabe 	bl	80062e0 <_calloc_r>
 8005d64:	b160      	cbz	r0, 8005d80 <_Balloc+0x56>
 8005d66:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8005d6a:	e00e      	b.n	8005d8a <_Balloc+0x60>
 8005d6c:	2221      	movs	r2, #33	; 0x21
 8005d6e:	2104      	movs	r1, #4
 8005d70:	4620      	mov	r0, r4
 8005d72:	f000 fab5 	bl	80062e0 <_calloc_r>
 8005d76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d78:	60e8      	str	r0, [r5, #12]
 8005d7a:	68db      	ldr	r3, [r3, #12]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d1e4      	bne.n	8005d4a <_Balloc+0x20>
 8005d80:	2000      	movs	r0, #0
 8005d82:	bd70      	pop	{r4, r5, r6, pc}
 8005d84:	6802      	ldr	r2, [r0, #0]
 8005d86:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005d90:	e7f7      	b.n	8005d82 <_Balloc+0x58>

08005d92 <_Bfree>:
 8005d92:	b570      	push	{r4, r5, r6, lr}
 8005d94:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005d96:	4606      	mov	r6, r0
 8005d98:	460d      	mov	r5, r1
 8005d9a:	b93c      	cbnz	r4, 8005dac <_Bfree+0x1a>
 8005d9c:	2010      	movs	r0, #16
 8005d9e:	f7ff ffb1 	bl	8005d04 <malloc>
 8005da2:	6270      	str	r0, [r6, #36]	; 0x24
 8005da4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005da8:	6004      	str	r4, [r0, #0]
 8005daa:	60c4      	str	r4, [r0, #12]
 8005dac:	b13d      	cbz	r5, 8005dbe <_Bfree+0x2c>
 8005dae:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005db0:	686a      	ldr	r2, [r5, #4]
 8005db2:	68db      	ldr	r3, [r3, #12]
 8005db4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005db8:	6029      	str	r1, [r5, #0]
 8005dba:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005dbe:	bd70      	pop	{r4, r5, r6, pc}

08005dc0 <__multadd>:
 8005dc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dc4:	690d      	ldr	r5, [r1, #16]
 8005dc6:	461f      	mov	r7, r3
 8005dc8:	4606      	mov	r6, r0
 8005dca:	460c      	mov	r4, r1
 8005dcc:	f101 0c14 	add.w	ip, r1, #20
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	f8dc 0000 	ldr.w	r0, [ip]
 8005dd6:	b281      	uxth	r1, r0
 8005dd8:	fb02 7101 	mla	r1, r2, r1, r7
 8005ddc:	0c0f      	lsrs	r7, r1, #16
 8005dde:	0c00      	lsrs	r0, r0, #16
 8005de0:	fb02 7000 	mla	r0, r2, r0, r7
 8005de4:	b289      	uxth	r1, r1
 8005de6:	3301      	adds	r3, #1
 8005de8:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8005dec:	429d      	cmp	r5, r3
 8005dee:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005df2:	f84c 1b04 	str.w	r1, [ip], #4
 8005df6:	dcec      	bgt.n	8005dd2 <__multadd+0x12>
 8005df8:	b1d7      	cbz	r7, 8005e30 <__multadd+0x70>
 8005dfa:	68a3      	ldr	r3, [r4, #8]
 8005dfc:	42ab      	cmp	r3, r5
 8005dfe:	dc12      	bgt.n	8005e26 <__multadd+0x66>
 8005e00:	6861      	ldr	r1, [r4, #4]
 8005e02:	4630      	mov	r0, r6
 8005e04:	3101      	adds	r1, #1
 8005e06:	f7ff ff90 	bl	8005d2a <_Balloc>
 8005e0a:	6922      	ldr	r2, [r4, #16]
 8005e0c:	3202      	adds	r2, #2
 8005e0e:	f104 010c 	add.w	r1, r4, #12
 8005e12:	4680      	mov	r8, r0
 8005e14:	0092      	lsls	r2, r2, #2
 8005e16:	300c      	adds	r0, #12
 8005e18:	f7ff ff7c 	bl	8005d14 <memcpy>
 8005e1c:	4621      	mov	r1, r4
 8005e1e:	4630      	mov	r0, r6
 8005e20:	f7ff ffb7 	bl	8005d92 <_Bfree>
 8005e24:	4644      	mov	r4, r8
 8005e26:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005e2a:	3501      	adds	r5, #1
 8005e2c:	615f      	str	r7, [r3, #20]
 8005e2e:	6125      	str	r5, [r4, #16]
 8005e30:	4620      	mov	r0, r4
 8005e32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005e36 <__hi0bits>:
 8005e36:	0c02      	lsrs	r2, r0, #16
 8005e38:	0412      	lsls	r2, r2, #16
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	b9b2      	cbnz	r2, 8005e6c <__hi0bits+0x36>
 8005e3e:	0403      	lsls	r3, r0, #16
 8005e40:	2010      	movs	r0, #16
 8005e42:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005e46:	bf04      	itt	eq
 8005e48:	021b      	lsleq	r3, r3, #8
 8005e4a:	3008      	addeq	r0, #8
 8005e4c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005e50:	bf04      	itt	eq
 8005e52:	011b      	lsleq	r3, r3, #4
 8005e54:	3004      	addeq	r0, #4
 8005e56:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005e5a:	bf04      	itt	eq
 8005e5c:	009b      	lsleq	r3, r3, #2
 8005e5e:	3002      	addeq	r0, #2
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	db06      	blt.n	8005e72 <__hi0bits+0x3c>
 8005e64:	005b      	lsls	r3, r3, #1
 8005e66:	d503      	bpl.n	8005e70 <__hi0bits+0x3a>
 8005e68:	3001      	adds	r0, #1
 8005e6a:	4770      	bx	lr
 8005e6c:	2000      	movs	r0, #0
 8005e6e:	e7e8      	b.n	8005e42 <__hi0bits+0xc>
 8005e70:	2020      	movs	r0, #32
 8005e72:	4770      	bx	lr

08005e74 <__lo0bits>:
 8005e74:	6803      	ldr	r3, [r0, #0]
 8005e76:	f013 0207 	ands.w	r2, r3, #7
 8005e7a:	4601      	mov	r1, r0
 8005e7c:	d00b      	beq.n	8005e96 <__lo0bits+0x22>
 8005e7e:	07da      	lsls	r2, r3, #31
 8005e80:	d423      	bmi.n	8005eca <__lo0bits+0x56>
 8005e82:	0798      	lsls	r0, r3, #30
 8005e84:	bf49      	itett	mi
 8005e86:	085b      	lsrmi	r3, r3, #1
 8005e88:	089b      	lsrpl	r3, r3, #2
 8005e8a:	2001      	movmi	r0, #1
 8005e8c:	600b      	strmi	r3, [r1, #0]
 8005e8e:	bf5c      	itt	pl
 8005e90:	600b      	strpl	r3, [r1, #0]
 8005e92:	2002      	movpl	r0, #2
 8005e94:	4770      	bx	lr
 8005e96:	b298      	uxth	r0, r3
 8005e98:	b9a8      	cbnz	r0, 8005ec6 <__lo0bits+0x52>
 8005e9a:	0c1b      	lsrs	r3, r3, #16
 8005e9c:	2010      	movs	r0, #16
 8005e9e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005ea2:	bf04      	itt	eq
 8005ea4:	0a1b      	lsreq	r3, r3, #8
 8005ea6:	3008      	addeq	r0, #8
 8005ea8:	071a      	lsls	r2, r3, #28
 8005eaa:	bf04      	itt	eq
 8005eac:	091b      	lsreq	r3, r3, #4
 8005eae:	3004      	addeq	r0, #4
 8005eb0:	079a      	lsls	r2, r3, #30
 8005eb2:	bf04      	itt	eq
 8005eb4:	089b      	lsreq	r3, r3, #2
 8005eb6:	3002      	addeq	r0, #2
 8005eb8:	07da      	lsls	r2, r3, #31
 8005eba:	d402      	bmi.n	8005ec2 <__lo0bits+0x4e>
 8005ebc:	085b      	lsrs	r3, r3, #1
 8005ebe:	d006      	beq.n	8005ece <__lo0bits+0x5a>
 8005ec0:	3001      	adds	r0, #1
 8005ec2:	600b      	str	r3, [r1, #0]
 8005ec4:	4770      	bx	lr
 8005ec6:	4610      	mov	r0, r2
 8005ec8:	e7e9      	b.n	8005e9e <__lo0bits+0x2a>
 8005eca:	2000      	movs	r0, #0
 8005ecc:	4770      	bx	lr
 8005ece:	2020      	movs	r0, #32
 8005ed0:	4770      	bx	lr

08005ed2 <__i2b>:
 8005ed2:	b510      	push	{r4, lr}
 8005ed4:	460c      	mov	r4, r1
 8005ed6:	2101      	movs	r1, #1
 8005ed8:	f7ff ff27 	bl	8005d2a <_Balloc>
 8005edc:	2201      	movs	r2, #1
 8005ede:	6144      	str	r4, [r0, #20]
 8005ee0:	6102      	str	r2, [r0, #16]
 8005ee2:	bd10      	pop	{r4, pc}

08005ee4 <__multiply>:
 8005ee4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ee8:	4614      	mov	r4, r2
 8005eea:	690a      	ldr	r2, [r1, #16]
 8005eec:	6923      	ldr	r3, [r4, #16]
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	bfb8      	it	lt
 8005ef2:	460b      	movlt	r3, r1
 8005ef4:	4688      	mov	r8, r1
 8005ef6:	bfbc      	itt	lt
 8005ef8:	46a0      	movlt	r8, r4
 8005efa:	461c      	movlt	r4, r3
 8005efc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005f00:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005f04:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005f08:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005f0c:	eb07 0609 	add.w	r6, r7, r9
 8005f10:	42b3      	cmp	r3, r6
 8005f12:	bfb8      	it	lt
 8005f14:	3101      	addlt	r1, #1
 8005f16:	f7ff ff08 	bl	8005d2a <_Balloc>
 8005f1a:	f100 0514 	add.w	r5, r0, #20
 8005f1e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8005f22:	462b      	mov	r3, r5
 8005f24:	2200      	movs	r2, #0
 8005f26:	4573      	cmp	r3, lr
 8005f28:	d316      	bcc.n	8005f58 <__multiply+0x74>
 8005f2a:	f104 0214 	add.w	r2, r4, #20
 8005f2e:	f108 0114 	add.w	r1, r8, #20
 8005f32:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8005f36:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8005f3a:	9300      	str	r3, [sp, #0]
 8005f3c:	9b00      	ldr	r3, [sp, #0]
 8005f3e:	9201      	str	r2, [sp, #4]
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d80c      	bhi.n	8005f5e <__multiply+0x7a>
 8005f44:	2e00      	cmp	r6, #0
 8005f46:	dd03      	ble.n	8005f50 <__multiply+0x6c>
 8005f48:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d05d      	beq.n	800600c <__multiply+0x128>
 8005f50:	6106      	str	r6, [r0, #16]
 8005f52:	b003      	add	sp, #12
 8005f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f58:	f843 2b04 	str.w	r2, [r3], #4
 8005f5c:	e7e3      	b.n	8005f26 <__multiply+0x42>
 8005f5e:	f8b2 b000 	ldrh.w	fp, [r2]
 8005f62:	f1bb 0f00 	cmp.w	fp, #0
 8005f66:	d023      	beq.n	8005fb0 <__multiply+0xcc>
 8005f68:	4689      	mov	r9, r1
 8005f6a:	46ac      	mov	ip, r5
 8005f6c:	f04f 0800 	mov.w	r8, #0
 8005f70:	f859 4b04 	ldr.w	r4, [r9], #4
 8005f74:	f8dc a000 	ldr.w	sl, [ip]
 8005f78:	b2a3      	uxth	r3, r4
 8005f7a:	fa1f fa8a 	uxth.w	sl, sl
 8005f7e:	fb0b a303 	mla	r3, fp, r3, sl
 8005f82:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005f86:	f8dc 4000 	ldr.w	r4, [ip]
 8005f8a:	4443      	add	r3, r8
 8005f8c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005f90:	fb0b 840a 	mla	r4, fp, sl, r8
 8005f94:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8005f98:	46e2      	mov	sl, ip
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005fa0:	454f      	cmp	r7, r9
 8005fa2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005fa6:	f84a 3b04 	str.w	r3, [sl], #4
 8005faa:	d82b      	bhi.n	8006004 <__multiply+0x120>
 8005fac:	f8cc 8004 	str.w	r8, [ip, #4]
 8005fb0:	9b01      	ldr	r3, [sp, #4]
 8005fb2:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8005fb6:	3204      	adds	r2, #4
 8005fb8:	f1ba 0f00 	cmp.w	sl, #0
 8005fbc:	d020      	beq.n	8006000 <__multiply+0x11c>
 8005fbe:	682b      	ldr	r3, [r5, #0]
 8005fc0:	4689      	mov	r9, r1
 8005fc2:	46a8      	mov	r8, r5
 8005fc4:	f04f 0b00 	mov.w	fp, #0
 8005fc8:	f8b9 c000 	ldrh.w	ip, [r9]
 8005fcc:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8005fd0:	fb0a 440c 	mla	r4, sl, ip, r4
 8005fd4:	445c      	add	r4, fp
 8005fd6:	46c4      	mov	ip, r8
 8005fd8:	b29b      	uxth	r3, r3
 8005fda:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005fde:	f84c 3b04 	str.w	r3, [ip], #4
 8005fe2:	f859 3b04 	ldr.w	r3, [r9], #4
 8005fe6:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8005fea:	0c1b      	lsrs	r3, r3, #16
 8005fec:	fb0a b303 	mla	r3, sl, r3, fp
 8005ff0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005ff4:	454f      	cmp	r7, r9
 8005ff6:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8005ffa:	d805      	bhi.n	8006008 <__multiply+0x124>
 8005ffc:	f8c8 3004 	str.w	r3, [r8, #4]
 8006000:	3504      	adds	r5, #4
 8006002:	e79b      	b.n	8005f3c <__multiply+0x58>
 8006004:	46d4      	mov	ip, sl
 8006006:	e7b3      	b.n	8005f70 <__multiply+0x8c>
 8006008:	46e0      	mov	r8, ip
 800600a:	e7dd      	b.n	8005fc8 <__multiply+0xe4>
 800600c:	3e01      	subs	r6, #1
 800600e:	e799      	b.n	8005f44 <__multiply+0x60>

08006010 <__pow5mult>:
 8006010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006014:	4615      	mov	r5, r2
 8006016:	f012 0203 	ands.w	r2, r2, #3
 800601a:	4606      	mov	r6, r0
 800601c:	460f      	mov	r7, r1
 800601e:	d007      	beq.n	8006030 <__pow5mult+0x20>
 8006020:	3a01      	subs	r2, #1
 8006022:	4c21      	ldr	r4, [pc, #132]	; (80060a8 <__pow5mult+0x98>)
 8006024:	2300      	movs	r3, #0
 8006026:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800602a:	f7ff fec9 	bl	8005dc0 <__multadd>
 800602e:	4607      	mov	r7, r0
 8006030:	10ad      	asrs	r5, r5, #2
 8006032:	d035      	beq.n	80060a0 <__pow5mult+0x90>
 8006034:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006036:	b93c      	cbnz	r4, 8006048 <__pow5mult+0x38>
 8006038:	2010      	movs	r0, #16
 800603a:	f7ff fe63 	bl	8005d04 <malloc>
 800603e:	6270      	str	r0, [r6, #36]	; 0x24
 8006040:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006044:	6004      	str	r4, [r0, #0]
 8006046:	60c4      	str	r4, [r0, #12]
 8006048:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800604c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006050:	b94c      	cbnz	r4, 8006066 <__pow5mult+0x56>
 8006052:	f240 2171 	movw	r1, #625	; 0x271
 8006056:	4630      	mov	r0, r6
 8006058:	f7ff ff3b 	bl	8005ed2 <__i2b>
 800605c:	2300      	movs	r3, #0
 800605e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006062:	4604      	mov	r4, r0
 8006064:	6003      	str	r3, [r0, #0]
 8006066:	f04f 0800 	mov.w	r8, #0
 800606a:	07eb      	lsls	r3, r5, #31
 800606c:	d50a      	bpl.n	8006084 <__pow5mult+0x74>
 800606e:	4639      	mov	r1, r7
 8006070:	4622      	mov	r2, r4
 8006072:	4630      	mov	r0, r6
 8006074:	f7ff ff36 	bl	8005ee4 <__multiply>
 8006078:	4639      	mov	r1, r7
 800607a:	4681      	mov	r9, r0
 800607c:	4630      	mov	r0, r6
 800607e:	f7ff fe88 	bl	8005d92 <_Bfree>
 8006082:	464f      	mov	r7, r9
 8006084:	106d      	asrs	r5, r5, #1
 8006086:	d00b      	beq.n	80060a0 <__pow5mult+0x90>
 8006088:	6820      	ldr	r0, [r4, #0]
 800608a:	b938      	cbnz	r0, 800609c <__pow5mult+0x8c>
 800608c:	4622      	mov	r2, r4
 800608e:	4621      	mov	r1, r4
 8006090:	4630      	mov	r0, r6
 8006092:	f7ff ff27 	bl	8005ee4 <__multiply>
 8006096:	6020      	str	r0, [r4, #0]
 8006098:	f8c0 8000 	str.w	r8, [r0]
 800609c:	4604      	mov	r4, r0
 800609e:	e7e4      	b.n	800606a <__pow5mult+0x5a>
 80060a0:	4638      	mov	r0, r7
 80060a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060a6:	bf00      	nop
 80060a8:	08007f98 	.word	0x08007f98

080060ac <__lshift>:
 80060ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060b0:	460c      	mov	r4, r1
 80060b2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80060b6:	6923      	ldr	r3, [r4, #16]
 80060b8:	6849      	ldr	r1, [r1, #4]
 80060ba:	eb0a 0903 	add.w	r9, sl, r3
 80060be:	68a3      	ldr	r3, [r4, #8]
 80060c0:	4607      	mov	r7, r0
 80060c2:	4616      	mov	r6, r2
 80060c4:	f109 0501 	add.w	r5, r9, #1
 80060c8:	42ab      	cmp	r3, r5
 80060ca:	db32      	blt.n	8006132 <__lshift+0x86>
 80060cc:	4638      	mov	r0, r7
 80060ce:	f7ff fe2c 	bl	8005d2a <_Balloc>
 80060d2:	2300      	movs	r3, #0
 80060d4:	4680      	mov	r8, r0
 80060d6:	f100 0114 	add.w	r1, r0, #20
 80060da:	461a      	mov	r2, r3
 80060dc:	4553      	cmp	r3, sl
 80060de:	db2b      	blt.n	8006138 <__lshift+0x8c>
 80060e0:	6920      	ldr	r0, [r4, #16]
 80060e2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80060e6:	f104 0314 	add.w	r3, r4, #20
 80060ea:	f016 021f 	ands.w	r2, r6, #31
 80060ee:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80060f2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80060f6:	d025      	beq.n	8006144 <__lshift+0x98>
 80060f8:	f1c2 0e20 	rsb	lr, r2, #32
 80060fc:	2000      	movs	r0, #0
 80060fe:	681e      	ldr	r6, [r3, #0]
 8006100:	468a      	mov	sl, r1
 8006102:	4096      	lsls	r6, r2
 8006104:	4330      	orrs	r0, r6
 8006106:	f84a 0b04 	str.w	r0, [sl], #4
 800610a:	f853 0b04 	ldr.w	r0, [r3], #4
 800610e:	459c      	cmp	ip, r3
 8006110:	fa20 f00e 	lsr.w	r0, r0, lr
 8006114:	d814      	bhi.n	8006140 <__lshift+0x94>
 8006116:	6048      	str	r0, [r1, #4]
 8006118:	b108      	cbz	r0, 800611e <__lshift+0x72>
 800611a:	f109 0502 	add.w	r5, r9, #2
 800611e:	3d01      	subs	r5, #1
 8006120:	4638      	mov	r0, r7
 8006122:	f8c8 5010 	str.w	r5, [r8, #16]
 8006126:	4621      	mov	r1, r4
 8006128:	f7ff fe33 	bl	8005d92 <_Bfree>
 800612c:	4640      	mov	r0, r8
 800612e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006132:	3101      	adds	r1, #1
 8006134:	005b      	lsls	r3, r3, #1
 8006136:	e7c7      	b.n	80060c8 <__lshift+0x1c>
 8006138:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800613c:	3301      	adds	r3, #1
 800613e:	e7cd      	b.n	80060dc <__lshift+0x30>
 8006140:	4651      	mov	r1, sl
 8006142:	e7dc      	b.n	80060fe <__lshift+0x52>
 8006144:	3904      	subs	r1, #4
 8006146:	f853 2b04 	ldr.w	r2, [r3], #4
 800614a:	f841 2f04 	str.w	r2, [r1, #4]!
 800614e:	459c      	cmp	ip, r3
 8006150:	d8f9      	bhi.n	8006146 <__lshift+0x9a>
 8006152:	e7e4      	b.n	800611e <__lshift+0x72>

08006154 <__mcmp>:
 8006154:	6903      	ldr	r3, [r0, #16]
 8006156:	690a      	ldr	r2, [r1, #16]
 8006158:	1a9b      	subs	r3, r3, r2
 800615a:	b530      	push	{r4, r5, lr}
 800615c:	d10c      	bne.n	8006178 <__mcmp+0x24>
 800615e:	0092      	lsls	r2, r2, #2
 8006160:	3014      	adds	r0, #20
 8006162:	3114      	adds	r1, #20
 8006164:	1884      	adds	r4, r0, r2
 8006166:	4411      	add	r1, r2
 8006168:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800616c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006170:	4295      	cmp	r5, r2
 8006172:	d003      	beq.n	800617c <__mcmp+0x28>
 8006174:	d305      	bcc.n	8006182 <__mcmp+0x2e>
 8006176:	2301      	movs	r3, #1
 8006178:	4618      	mov	r0, r3
 800617a:	bd30      	pop	{r4, r5, pc}
 800617c:	42a0      	cmp	r0, r4
 800617e:	d3f3      	bcc.n	8006168 <__mcmp+0x14>
 8006180:	e7fa      	b.n	8006178 <__mcmp+0x24>
 8006182:	f04f 33ff 	mov.w	r3, #4294967295
 8006186:	e7f7      	b.n	8006178 <__mcmp+0x24>

08006188 <__mdiff>:
 8006188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800618c:	460d      	mov	r5, r1
 800618e:	4607      	mov	r7, r0
 8006190:	4611      	mov	r1, r2
 8006192:	4628      	mov	r0, r5
 8006194:	4614      	mov	r4, r2
 8006196:	f7ff ffdd 	bl	8006154 <__mcmp>
 800619a:	1e06      	subs	r6, r0, #0
 800619c:	d108      	bne.n	80061b0 <__mdiff+0x28>
 800619e:	4631      	mov	r1, r6
 80061a0:	4638      	mov	r0, r7
 80061a2:	f7ff fdc2 	bl	8005d2a <_Balloc>
 80061a6:	2301      	movs	r3, #1
 80061a8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80061ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061b0:	bfa4      	itt	ge
 80061b2:	4623      	movge	r3, r4
 80061b4:	462c      	movge	r4, r5
 80061b6:	4638      	mov	r0, r7
 80061b8:	6861      	ldr	r1, [r4, #4]
 80061ba:	bfa6      	itte	ge
 80061bc:	461d      	movge	r5, r3
 80061be:	2600      	movge	r6, #0
 80061c0:	2601      	movlt	r6, #1
 80061c2:	f7ff fdb2 	bl	8005d2a <_Balloc>
 80061c6:	692b      	ldr	r3, [r5, #16]
 80061c8:	60c6      	str	r6, [r0, #12]
 80061ca:	6926      	ldr	r6, [r4, #16]
 80061cc:	f105 0914 	add.w	r9, r5, #20
 80061d0:	f104 0214 	add.w	r2, r4, #20
 80061d4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80061d8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80061dc:	f100 0514 	add.w	r5, r0, #20
 80061e0:	f04f 0e00 	mov.w	lr, #0
 80061e4:	f852 ab04 	ldr.w	sl, [r2], #4
 80061e8:	f859 4b04 	ldr.w	r4, [r9], #4
 80061ec:	fa1e f18a 	uxtah	r1, lr, sl
 80061f0:	b2a3      	uxth	r3, r4
 80061f2:	1ac9      	subs	r1, r1, r3
 80061f4:	0c23      	lsrs	r3, r4, #16
 80061f6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80061fa:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80061fe:	b289      	uxth	r1, r1
 8006200:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8006204:	45c8      	cmp	r8, r9
 8006206:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800620a:	4694      	mov	ip, r2
 800620c:	f845 3b04 	str.w	r3, [r5], #4
 8006210:	d8e8      	bhi.n	80061e4 <__mdiff+0x5c>
 8006212:	45bc      	cmp	ip, r7
 8006214:	d304      	bcc.n	8006220 <__mdiff+0x98>
 8006216:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800621a:	b183      	cbz	r3, 800623e <__mdiff+0xb6>
 800621c:	6106      	str	r6, [r0, #16]
 800621e:	e7c5      	b.n	80061ac <__mdiff+0x24>
 8006220:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006224:	fa1e f381 	uxtah	r3, lr, r1
 8006228:	141a      	asrs	r2, r3, #16
 800622a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800622e:	b29b      	uxth	r3, r3
 8006230:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006234:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8006238:	f845 3b04 	str.w	r3, [r5], #4
 800623c:	e7e9      	b.n	8006212 <__mdiff+0x8a>
 800623e:	3e01      	subs	r6, #1
 8006240:	e7e9      	b.n	8006216 <__mdiff+0x8e>

08006242 <__d2b>:
 8006242:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006246:	460e      	mov	r6, r1
 8006248:	2101      	movs	r1, #1
 800624a:	ec59 8b10 	vmov	r8, r9, d0
 800624e:	4615      	mov	r5, r2
 8006250:	f7ff fd6b 	bl	8005d2a <_Balloc>
 8006254:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006258:	4607      	mov	r7, r0
 800625a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800625e:	bb34      	cbnz	r4, 80062ae <__d2b+0x6c>
 8006260:	9301      	str	r3, [sp, #4]
 8006262:	f1b8 0300 	subs.w	r3, r8, #0
 8006266:	d027      	beq.n	80062b8 <__d2b+0x76>
 8006268:	a802      	add	r0, sp, #8
 800626a:	f840 3d08 	str.w	r3, [r0, #-8]!
 800626e:	f7ff fe01 	bl	8005e74 <__lo0bits>
 8006272:	9900      	ldr	r1, [sp, #0]
 8006274:	b1f0      	cbz	r0, 80062b4 <__d2b+0x72>
 8006276:	9a01      	ldr	r2, [sp, #4]
 8006278:	f1c0 0320 	rsb	r3, r0, #32
 800627c:	fa02 f303 	lsl.w	r3, r2, r3
 8006280:	430b      	orrs	r3, r1
 8006282:	40c2      	lsrs	r2, r0
 8006284:	617b      	str	r3, [r7, #20]
 8006286:	9201      	str	r2, [sp, #4]
 8006288:	9b01      	ldr	r3, [sp, #4]
 800628a:	61bb      	str	r3, [r7, #24]
 800628c:	2b00      	cmp	r3, #0
 800628e:	bf14      	ite	ne
 8006290:	2102      	movne	r1, #2
 8006292:	2101      	moveq	r1, #1
 8006294:	6139      	str	r1, [r7, #16]
 8006296:	b1c4      	cbz	r4, 80062ca <__d2b+0x88>
 8006298:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800629c:	4404      	add	r4, r0
 800629e:	6034      	str	r4, [r6, #0]
 80062a0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80062a4:	6028      	str	r0, [r5, #0]
 80062a6:	4638      	mov	r0, r7
 80062a8:	b003      	add	sp, #12
 80062aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80062ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80062b2:	e7d5      	b.n	8006260 <__d2b+0x1e>
 80062b4:	6179      	str	r1, [r7, #20]
 80062b6:	e7e7      	b.n	8006288 <__d2b+0x46>
 80062b8:	a801      	add	r0, sp, #4
 80062ba:	f7ff fddb 	bl	8005e74 <__lo0bits>
 80062be:	9b01      	ldr	r3, [sp, #4]
 80062c0:	617b      	str	r3, [r7, #20]
 80062c2:	2101      	movs	r1, #1
 80062c4:	6139      	str	r1, [r7, #16]
 80062c6:	3020      	adds	r0, #32
 80062c8:	e7e5      	b.n	8006296 <__d2b+0x54>
 80062ca:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80062ce:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80062d2:	6030      	str	r0, [r6, #0]
 80062d4:	6918      	ldr	r0, [r3, #16]
 80062d6:	f7ff fdae 	bl	8005e36 <__hi0bits>
 80062da:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80062de:	e7e1      	b.n	80062a4 <__d2b+0x62>

080062e0 <_calloc_r>:
 80062e0:	b538      	push	{r3, r4, r5, lr}
 80062e2:	fb02 f401 	mul.w	r4, r2, r1
 80062e6:	4621      	mov	r1, r4
 80062e8:	f000 f856 	bl	8006398 <_malloc_r>
 80062ec:	4605      	mov	r5, r0
 80062ee:	b118      	cbz	r0, 80062f8 <_calloc_r+0x18>
 80062f0:	4622      	mov	r2, r4
 80062f2:	2100      	movs	r1, #0
 80062f4:	f7fe fa1c 	bl	8004730 <memset>
 80062f8:	4628      	mov	r0, r5
 80062fa:	bd38      	pop	{r3, r4, r5, pc}

080062fc <_free_r>:
 80062fc:	b538      	push	{r3, r4, r5, lr}
 80062fe:	4605      	mov	r5, r0
 8006300:	2900      	cmp	r1, #0
 8006302:	d045      	beq.n	8006390 <_free_r+0x94>
 8006304:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006308:	1f0c      	subs	r4, r1, #4
 800630a:	2b00      	cmp	r3, #0
 800630c:	bfb8      	it	lt
 800630e:	18e4      	addlt	r4, r4, r3
 8006310:	f000 fa29 	bl	8006766 <__malloc_lock>
 8006314:	4a1f      	ldr	r2, [pc, #124]	; (8006394 <_free_r+0x98>)
 8006316:	6813      	ldr	r3, [r2, #0]
 8006318:	4610      	mov	r0, r2
 800631a:	b933      	cbnz	r3, 800632a <_free_r+0x2e>
 800631c:	6063      	str	r3, [r4, #4]
 800631e:	6014      	str	r4, [r2, #0]
 8006320:	4628      	mov	r0, r5
 8006322:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006326:	f000 ba1f 	b.w	8006768 <__malloc_unlock>
 800632a:	42a3      	cmp	r3, r4
 800632c:	d90c      	bls.n	8006348 <_free_r+0x4c>
 800632e:	6821      	ldr	r1, [r4, #0]
 8006330:	1862      	adds	r2, r4, r1
 8006332:	4293      	cmp	r3, r2
 8006334:	bf04      	itt	eq
 8006336:	681a      	ldreq	r2, [r3, #0]
 8006338:	685b      	ldreq	r3, [r3, #4]
 800633a:	6063      	str	r3, [r4, #4]
 800633c:	bf04      	itt	eq
 800633e:	1852      	addeq	r2, r2, r1
 8006340:	6022      	streq	r2, [r4, #0]
 8006342:	6004      	str	r4, [r0, #0]
 8006344:	e7ec      	b.n	8006320 <_free_r+0x24>
 8006346:	4613      	mov	r3, r2
 8006348:	685a      	ldr	r2, [r3, #4]
 800634a:	b10a      	cbz	r2, 8006350 <_free_r+0x54>
 800634c:	42a2      	cmp	r2, r4
 800634e:	d9fa      	bls.n	8006346 <_free_r+0x4a>
 8006350:	6819      	ldr	r1, [r3, #0]
 8006352:	1858      	adds	r0, r3, r1
 8006354:	42a0      	cmp	r0, r4
 8006356:	d10b      	bne.n	8006370 <_free_r+0x74>
 8006358:	6820      	ldr	r0, [r4, #0]
 800635a:	4401      	add	r1, r0
 800635c:	1858      	adds	r0, r3, r1
 800635e:	4282      	cmp	r2, r0
 8006360:	6019      	str	r1, [r3, #0]
 8006362:	d1dd      	bne.n	8006320 <_free_r+0x24>
 8006364:	6810      	ldr	r0, [r2, #0]
 8006366:	6852      	ldr	r2, [r2, #4]
 8006368:	605a      	str	r2, [r3, #4]
 800636a:	4401      	add	r1, r0
 800636c:	6019      	str	r1, [r3, #0]
 800636e:	e7d7      	b.n	8006320 <_free_r+0x24>
 8006370:	d902      	bls.n	8006378 <_free_r+0x7c>
 8006372:	230c      	movs	r3, #12
 8006374:	602b      	str	r3, [r5, #0]
 8006376:	e7d3      	b.n	8006320 <_free_r+0x24>
 8006378:	6820      	ldr	r0, [r4, #0]
 800637a:	1821      	adds	r1, r4, r0
 800637c:	428a      	cmp	r2, r1
 800637e:	bf04      	itt	eq
 8006380:	6811      	ldreq	r1, [r2, #0]
 8006382:	6852      	ldreq	r2, [r2, #4]
 8006384:	6062      	str	r2, [r4, #4]
 8006386:	bf04      	itt	eq
 8006388:	1809      	addeq	r1, r1, r0
 800638a:	6021      	streq	r1, [r4, #0]
 800638c:	605c      	str	r4, [r3, #4]
 800638e:	e7c7      	b.n	8006320 <_free_r+0x24>
 8006390:	bd38      	pop	{r3, r4, r5, pc}
 8006392:	bf00      	nop
 8006394:	20000274 	.word	0x20000274

08006398 <_malloc_r>:
 8006398:	b570      	push	{r4, r5, r6, lr}
 800639a:	1ccd      	adds	r5, r1, #3
 800639c:	f025 0503 	bic.w	r5, r5, #3
 80063a0:	3508      	adds	r5, #8
 80063a2:	2d0c      	cmp	r5, #12
 80063a4:	bf38      	it	cc
 80063a6:	250c      	movcc	r5, #12
 80063a8:	2d00      	cmp	r5, #0
 80063aa:	4606      	mov	r6, r0
 80063ac:	db01      	blt.n	80063b2 <_malloc_r+0x1a>
 80063ae:	42a9      	cmp	r1, r5
 80063b0:	d903      	bls.n	80063ba <_malloc_r+0x22>
 80063b2:	230c      	movs	r3, #12
 80063b4:	6033      	str	r3, [r6, #0]
 80063b6:	2000      	movs	r0, #0
 80063b8:	bd70      	pop	{r4, r5, r6, pc}
 80063ba:	f000 f9d4 	bl	8006766 <__malloc_lock>
 80063be:	4a21      	ldr	r2, [pc, #132]	; (8006444 <_malloc_r+0xac>)
 80063c0:	6814      	ldr	r4, [r2, #0]
 80063c2:	4621      	mov	r1, r4
 80063c4:	b991      	cbnz	r1, 80063ec <_malloc_r+0x54>
 80063c6:	4c20      	ldr	r4, [pc, #128]	; (8006448 <_malloc_r+0xb0>)
 80063c8:	6823      	ldr	r3, [r4, #0]
 80063ca:	b91b      	cbnz	r3, 80063d4 <_malloc_r+0x3c>
 80063cc:	4630      	mov	r0, r6
 80063ce:	f000 f98f 	bl	80066f0 <_sbrk_r>
 80063d2:	6020      	str	r0, [r4, #0]
 80063d4:	4629      	mov	r1, r5
 80063d6:	4630      	mov	r0, r6
 80063d8:	f000 f98a 	bl	80066f0 <_sbrk_r>
 80063dc:	1c43      	adds	r3, r0, #1
 80063de:	d124      	bne.n	800642a <_malloc_r+0x92>
 80063e0:	230c      	movs	r3, #12
 80063e2:	6033      	str	r3, [r6, #0]
 80063e4:	4630      	mov	r0, r6
 80063e6:	f000 f9bf 	bl	8006768 <__malloc_unlock>
 80063ea:	e7e4      	b.n	80063b6 <_malloc_r+0x1e>
 80063ec:	680b      	ldr	r3, [r1, #0]
 80063ee:	1b5b      	subs	r3, r3, r5
 80063f0:	d418      	bmi.n	8006424 <_malloc_r+0x8c>
 80063f2:	2b0b      	cmp	r3, #11
 80063f4:	d90f      	bls.n	8006416 <_malloc_r+0x7e>
 80063f6:	600b      	str	r3, [r1, #0]
 80063f8:	50cd      	str	r5, [r1, r3]
 80063fa:	18cc      	adds	r4, r1, r3
 80063fc:	4630      	mov	r0, r6
 80063fe:	f000 f9b3 	bl	8006768 <__malloc_unlock>
 8006402:	f104 000b 	add.w	r0, r4, #11
 8006406:	1d23      	adds	r3, r4, #4
 8006408:	f020 0007 	bic.w	r0, r0, #7
 800640c:	1ac3      	subs	r3, r0, r3
 800640e:	d0d3      	beq.n	80063b8 <_malloc_r+0x20>
 8006410:	425a      	negs	r2, r3
 8006412:	50e2      	str	r2, [r4, r3]
 8006414:	e7d0      	b.n	80063b8 <_malloc_r+0x20>
 8006416:	428c      	cmp	r4, r1
 8006418:	684b      	ldr	r3, [r1, #4]
 800641a:	bf16      	itet	ne
 800641c:	6063      	strne	r3, [r4, #4]
 800641e:	6013      	streq	r3, [r2, #0]
 8006420:	460c      	movne	r4, r1
 8006422:	e7eb      	b.n	80063fc <_malloc_r+0x64>
 8006424:	460c      	mov	r4, r1
 8006426:	6849      	ldr	r1, [r1, #4]
 8006428:	e7cc      	b.n	80063c4 <_malloc_r+0x2c>
 800642a:	1cc4      	adds	r4, r0, #3
 800642c:	f024 0403 	bic.w	r4, r4, #3
 8006430:	42a0      	cmp	r0, r4
 8006432:	d005      	beq.n	8006440 <_malloc_r+0xa8>
 8006434:	1a21      	subs	r1, r4, r0
 8006436:	4630      	mov	r0, r6
 8006438:	f000 f95a 	bl	80066f0 <_sbrk_r>
 800643c:	3001      	adds	r0, #1
 800643e:	d0cf      	beq.n	80063e0 <_malloc_r+0x48>
 8006440:	6025      	str	r5, [r4, #0]
 8006442:	e7db      	b.n	80063fc <_malloc_r+0x64>
 8006444:	20000274 	.word	0x20000274
 8006448:	20000278 	.word	0x20000278

0800644c <__ssputs_r>:
 800644c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006450:	688e      	ldr	r6, [r1, #8]
 8006452:	429e      	cmp	r6, r3
 8006454:	4682      	mov	sl, r0
 8006456:	460c      	mov	r4, r1
 8006458:	4690      	mov	r8, r2
 800645a:	4699      	mov	r9, r3
 800645c:	d837      	bhi.n	80064ce <__ssputs_r+0x82>
 800645e:	898a      	ldrh	r2, [r1, #12]
 8006460:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006464:	d031      	beq.n	80064ca <__ssputs_r+0x7e>
 8006466:	6825      	ldr	r5, [r4, #0]
 8006468:	6909      	ldr	r1, [r1, #16]
 800646a:	1a6f      	subs	r7, r5, r1
 800646c:	6965      	ldr	r5, [r4, #20]
 800646e:	2302      	movs	r3, #2
 8006470:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006474:	fb95 f5f3 	sdiv	r5, r5, r3
 8006478:	f109 0301 	add.w	r3, r9, #1
 800647c:	443b      	add	r3, r7
 800647e:	429d      	cmp	r5, r3
 8006480:	bf38      	it	cc
 8006482:	461d      	movcc	r5, r3
 8006484:	0553      	lsls	r3, r2, #21
 8006486:	d530      	bpl.n	80064ea <__ssputs_r+0x9e>
 8006488:	4629      	mov	r1, r5
 800648a:	f7ff ff85 	bl	8006398 <_malloc_r>
 800648e:	4606      	mov	r6, r0
 8006490:	b950      	cbnz	r0, 80064a8 <__ssputs_r+0x5c>
 8006492:	230c      	movs	r3, #12
 8006494:	f8ca 3000 	str.w	r3, [sl]
 8006498:	89a3      	ldrh	r3, [r4, #12]
 800649a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800649e:	81a3      	strh	r3, [r4, #12]
 80064a0:	f04f 30ff 	mov.w	r0, #4294967295
 80064a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064a8:	463a      	mov	r2, r7
 80064aa:	6921      	ldr	r1, [r4, #16]
 80064ac:	f7ff fc32 	bl	8005d14 <memcpy>
 80064b0:	89a3      	ldrh	r3, [r4, #12]
 80064b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80064b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064ba:	81a3      	strh	r3, [r4, #12]
 80064bc:	6126      	str	r6, [r4, #16]
 80064be:	6165      	str	r5, [r4, #20]
 80064c0:	443e      	add	r6, r7
 80064c2:	1bed      	subs	r5, r5, r7
 80064c4:	6026      	str	r6, [r4, #0]
 80064c6:	60a5      	str	r5, [r4, #8]
 80064c8:	464e      	mov	r6, r9
 80064ca:	454e      	cmp	r6, r9
 80064cc:	d900      	bls.n	80064d0 <__ssputs_r+0x84>
 80064ce:	464e      	mov	r6, r9
 80064d0:	4632      	mov	r2, r6
 80064d2:	4641      	mov	r1, r8
 80064d4:	6820      	ldr	r0, [r4, #0]
 80064d6:	f000 f92d 	bl	8006734 <memmove>
 80064da:	68a3      	ldr	r3, [r4, #8]
 80064dc:	1b9b      	subs	r3, r3, r6
 80064de:	60a3      	str	r3, [r4, #8]
 80064e0:	6823      	ldr	r3, [r4, #0]
 80064e2:	441e      	add	r6, r3
 80064e4:	6026      	str	r6, [r4, #0]
 80064e6:	2000      	movs	r0, #0
 80064e8:	e7dc      	b.n	80064a4 <__ssputs_r+0x58>
 80064ea:	462a      	mov	r2, r5
 80064ec:	f000 f93d 	bl	800676a <_realloc_r>
 80064f0:	4606      	mov	r6, r0
 80064f2:	2800      	cmp	r0, #0
 80064f4:	d1e2      	bne.n	80064bc <__ssputs_r+0x70>
 80064f6:	6921      	ldr	r1, [r4, #16]
 80064f8:	4650      	mov	r0, sl
 80064fa:	f7ff feff 	bl	80062fc <_free_r>
 80064fe:	e7c8      	b.n	8006492 <__ssputs_r+0x46>

08006500 <_svfiprintf_r>:
 8006500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006504:	461d      	mov	r5, r3
 8006506:	898b      	ldrh	r3, [r1, #12]
 8006508:	061f      	lsls	r7, r3, #24
 800650a:	b09d      	sub	sp, #116	; 0x74
 800650c:	4680      	mov	r8, r0
 800650e:	460c      	mov	r4, r1
 8006510:	4616      	mov	r6, r2
 8006512:	d50f      	bpl.n	8006534 <_svfiprintf_r+0x34>
 8006514:	690b      	ldr	r3, [r1, #16]
 8006516:	b96b      	cbnz	r3, 8006534 <_svfiprintf_r+0x34>
 8006518:	2140      	movs	r1, #64	; 0x40
 800651a:	f7ff ff3d 	bl	8006398 <_malloc_r>
 800651e:	6020      	str	r0, [r4, #0]
 8006520:	6120      	str	r0, [r4, #16]
 8006522:	b928      	cbnz	r0, 8006530 <_svfiprintf_r+0x30>
 8006524:	230c      	movs	r3, #12
 8006526:	f8c8 3000 	str.w	r3, [r8]
 800652a:	f04f 30ff 	mov.w	r0, #4294967295
 800652e:	e0c8      	b.n	80066c2 <_svfiprintf_r+0x1c2>
 8006530:	2340      	movs	r3, #64	; 0x40
 8006532:	6163      	str	r3, [r4, #20]
 8006534:	2300      	movs	r3, #0
 8006536:	9309      	str	r3, [sp, #36]	; 0x24
 8006538:	2320      	movs	r3, #32
 800653a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800653e:	2330      	movs	r3, #48	; 0x30
 8006540:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006544:	9503      	str	r5, [sp, #12]
 8006546:	f04f 0b01 	mov.w	fp, #1
 800654a:	4637      	mov	r7, r6
 800654c:	463d      	mov	r5, r7
 800654e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006552:	b10b      	cbz	r3, 8006558 <_svfiprintf_r+0x58>
 8006554:	2b25      	cmp	r3, #37	; 0x25
 8006556:	d13e      	bne.n	80065d6 <_svfiprintf_r+0xd6>
 8006558:	ebb7 0a06 	subs.w	sl, r7, r6
 800655c:	d00b      	beq.n	8006576 <_svfiprintf_r+0x76>
 800655e:	4653      	mov	r3, sl
 8006560:	4632      	mov	r2, r6
 8006562:	4621      	mov	r1, r4
 8006564:	4640      	mov	r0, r8
 8006566:	f7ff ff71 	bl	800644c <__ssputs_r>
 800656a:	3001      	adds	r0, #1
 800656c:	f000 80a4 	beq.w	80066b8 <_svfiprintf_r+0x1b8>
 8006570:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006572:	4453      	add	r3, sl
 8006574:	9309      	str	r3, [sp, #36]	; 0x24
 8006576:	783b      	ldrb	r3, [r7, #0]
 8006578:	2b00      	cmp	r3, #0
 800657a:	f000 809d 	beq.w	80066b8 <_svfiprintf_r+0x1b8>
 800657e:	2300      	movs	r3, #0
 8006580:	f04f 32ff 	mov.w	r2, #4294967295
 8006584:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006588:	9304      	str	r3, [sp, #16]
 800658a:	9307      	str	r3, [sp, #28]
 800658c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006590:	931a      	str	r3, [sp, #104]	; 0x68
 8006592:	462f      	mov	r7, r5
 8006594:	2205      	movs	r2, #5
 8006596:	f817 1b01 	ldrb.w	r1, [r7], #1
 800659a:	4850      	ldr	r0, [pc, #320]	; (80066dc <_svfiprintf_r+0x1dc>)
 800659c:	f7f9 fe28 	bl	80001f0 <memchr>
 80065a0:	9b04      	ldr	r3, [sp, #16]
 80065a2:	b9d0      	cbnz	r0, 80065da <_svfiprintf_r+0xda>
 80065a4:	06d9      	lsls	r1, r3, #27
 80065a6:	bf44      	itt	mi
 80065a8:	2220      	movmi	r2, #32
 80065aa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80065ae:	071a      	lsls	r2, r3, #28
 80065b0:	bf44      	itt	mi
 80065b2:	222b      	movmi	r2, #43	; 0x2b
 80065b4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80065b8:	782a      	ldrb	r2, [r5, #0]
 80065ba:	2a2a      	cmp	r2, #42	; 0x2a
 80065bc:	d015      	beq.n	80065ea <_svfiprintf_r+0xea>
 80065be:	9a07      	ldr	r2, [sp, #28]
 80065c0:	462f      	mov	r7, r5
 80065c2:	2000      	movs	r0, #0
 80065c4:	250a      	movs	r5, #10
 80065c6:	4639      	mov	r1, r7
 80065c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80065cc:	3b30      	subs	r3, #48	; 0x30
 80065ce:	2b09      	cmp	r3, #9
 80065d0:	d94d      	bls.n	800666e <_svfiprintf_r+0x16e>
 80065d2:	b1b8      	cbz	r0, 8006604 <_svfiprintf_r+0x104>
 80065d4:	e00f      	b.n	80065f6 <_svfiprintf_r+0xf6>
 80065d6:	462f      	mov	r7, r5
 80065d8:	e7b8      	b.n	800654c <_svfiprintf_r+0x4c>
 80065da:	4a40      	ldr	r2, [pc, #256]	; (80066dc <_svfiprintf_r+0x1dc>)
 80065dc:	1a80      	subs	r0, r0, r2
 80065de:	fa0b f000 	lsl.w	r0, fp, r0
 80065e2:	4318      	orrs	r0, r3
 80065e4:	9004      	str	r0, [sp, #16]
 80065e6:	463d      	mov	r5, r7
 80065e8:	e7d3      	b.n	8006592 <_svfiprintf_r+0x92>
 80065ea:	9a03      	ldr	r2, [sp, #12]
 80065ec:	1d11      	adds	r1, r2, #4
 80065ee:	6812      	ldr	r2, [r2, #0]
 80065f0:	9103      	str	r1, [sp, #12]
 80065f2:	2a00      	cmp	r2, #0
 80065f4:	db01      	blt.n	80065fa <_svfiprintf_r+0xfa>
 80065f6:	9207      	str	r2, [sp, #28]
 80065f8:	e004      	b.n	8006604 <_svfiprintf_r+0x104>
 80065fa:	4252      	negs	r2, r2
 80065fc:	f043 0302 	orr.w	r3, r3, #2
 8006600:	9207      	str	r2, [sp, #28]
 8006602:	9304      	str	r3, [sp, #16]
 8006604:	783b      	ldrb	r3, [r7, #0]
 8006606:	2b2e      	cmp	r3, #46	; 0x2e
 8006608:	d10c      	bne.n	8006624 <_svfiprintf_r+0x124>
 800660a:	787b      	ldrb	r3, [r7, #1]
 800660c:	2b2a      	cmp	r3, #42	; 0x2a
 800660e:	d133      	bne.n	8006678 <_svfiprintf_r+0x178>
 8006610:	9b03      	ldr	r3, [sp, #12]
 8006612:	1d1a      	adds	r2, r3, #4
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	9203      	str	r2, [sp, #12]
 8006618:	2b00      	cmp	r3, #0
 800661a:	bfb8      	it	lt
 800661c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006620:	3702      	adds	r7, #2
 8006622:	9305      	str	r3, [sp, #20]
 8006624:	4d2e      	ldr	r5, [pc, #184]	; (80066e0 <_svfiprintf_r+0x1e0>)
 8006626:	7839      	ldrb	r1, [r7, #0]
 8006628:	2203      	movs	r2, #3
 800662a:	4628      	mov	r0, r5
 800662c:	f7f9 fde0 	bl	80001f0 <memchr>
 8006630:	b138      	cbz	r0, 8006642 <_svfiprintf_r+0x142>
 8006632:	2340      	movs	r3, #64	; 0x40
 8006634:	1b40      	subs	r0, r0, r5
 8006636:	fa03 f000 	lsl.w	r0, r3, r0
 800663a:	9b04      	ldr	r3, [sp, #16]
 800663c:	4303      	orrs	r3, r0
 800663e:	3701      	adds	r7, #1
 8006640:	9304      	str	r3, [sp, #16]
 8006642:	7839      	ldrb	r1, [r7, #0]
 8006644:	4827      	ldr	r0, [pc, #156]	; (80066e4 <_svfiprintf_r+0x1e4>)
 8006646:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800664a:	2206      	movs	r2, #6
 800664c:	1c7e      	adds	r6, r7, #1
 800664e:	f7f9 fdcf 	bl	80001f0 <memchr>
 8006652:	2800      	cmp	r0, #0
 8006654:	d038      	beq.n	80066c8 <_svfiprintf_r+0x1c8>
 8006656:	4b24      	ldr	r3, [pc, #144]	; (80066e8 <_svfiprintf_r+0x1e8>)
 8006658:	bb13      	cbnz	r3, 80066a0 <_svfiprintf_r+0x1a0>
 800665a:	9b03      	ldr	r3, [sp, #12]
 800665c:	3307      	adds	r3, #7
 800665e:	f023 0307 	bic.w	r3, r3, #7
 8006662:	3308      	adds	r3, #8
 8006664:	9303      	str	r3, [sp, #12]
 8006666:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006668:	444b      	add	r3, r9
 800666a:	9309      	str	r3, [sp, #36]	; 0x24
 800666c:	e76d      	b.n	800654a <_svfiprintf_r+0x4a>
 800666e:	fb05 3202 	mla	r2, r5, r2, r3
 8006672:	2001      	movs	r0, #1
 8006674:	460f      	mov	r7, r1
 8006676:	e7a6      	b.n	80065c6 <_svfiprintf_r+0xc6>
 8006678:	2300      	movs	r3, #0
 800667a:	3701      	adds	r7, #1
 800667c:	9305      	str	r3, [sp, #20]
 800667e:	4619      	mov	r1, r3
 8006680:	250a      	movs	r5, #10
 8006682:	4638      	mov	r0, r7
 8006684:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006688:	3a30      	subs	r2, #48	; 0x30
 800668a:	2a09      	cmp	r2, #9
 800668c:	d903      	bls.n	8006696 <_svfiprintf_r+0x196>
 800668e:	2b00      	cmp	r3, #0
 8006690:	d0c8      	beq.n	8006624 <_svfiprintf_r+0x124>
 8006692:	9105      	str	r1, [sp, #20]
 8006694:	e7c6      	b.n	8006624 <_svfiprintf_r+0x124>
 8006696:	fb05 2101 	mla	r1, r5, r1, r2
 800669a:	2301      	movs	r3, #1
 800669c:	4607      	mov	r7, r0
 800669e:	e7f0      	b.n	8006682 <_svfiprintf_r+0x182>
 80066a0:	ab03      	add	r3, sp, #12
 80066a2:	9300      	str	r3, [sp, #0]
 80066a4:	4622      	mov	r2, r4
 80066a6:	4b11      	ldr	r3, [pc, #68]	; (80066ec <_svfiprintf_r+0x1ec>)
 80066a8:	a904      	add	r1, sp, #16
 80066aa:	4640      	mov	r0, r8
 80066ac:	f7fe f8dc 	bl	8004868 <_printf_float>
 80066b0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80066b4:	4681      	mov	r9, r0
 80066b6:	d1d6      	bne.n	8006666 <_svfiprintf_r+0x166>
 80066b8:	89a3      	ldrh	r3, [r4, #12]
 80066ba:	065b      	lsls	r3, r3, #25
 80066bc:	f53f af35 	bmi.w	800652a <_svfiprintf_r+0x2a>
 80066c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80066c2:	b01d      	add	sp, #116	; 0x74
 80066c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066c8:	ab03      	add	r3, sp, #12
 80066ca:	9300      	str	r3, [sp, #0]
 80066cc:	4622      	mov	r2, r4
 80066ce:	4b07      	ldr	r3, [pc, #28]	; (80066ec <_svfiprintf_r+0x1ec>)
 80066d0:	a904      	add	r1, sp, #16
 80066d2:	4640      	mov	r0, r8
 80066d4:	f7fe fb7e 	bl	8004dd4 <_printf_i>
 80066d8:	e7ea      	b.n	80066b0 <_svfiprintf_r+0x1b0>
 80066da:	bf00      	nop
 80066dc:	08007fa4 	.word	0x08007fa4
 80066e0:	08007faa 	.word	0x08007faa
 80066e4:	08007fae 	.word	0x08007fae
 80066e8:	08004869 	.word	0x08004869
 80066ec:	0800644d 	.word	0x0800644d

080066f0 <_sbrk_r>:
 80066f0:	b538      	push	{r3, r4, r5, lr}
 80066f2:	4c06      	ldr	r4, [pc, #24]	; (800670c <_sbrk_r+0x1c>)
 80066f4:	2300      	movs	r3, #0
 80066f6:	4605      	mov	r5, r0
 80066f8:	4608      	mov	r0, r1
 80066fa:	6023      	str	r3, [r4, #0]
 80066fc:	f7fb f95e 	bl	80019bc <_sbrk>
 8006700:	1c43      	adds	r3, r0, #1
 8006702:	d102      	bne.n	800670a <_sbrk_r+0x1a>
 8006704:	6823      	ldr	r3, [r4, #0]
 8006706:	b103      	cbz	r3, 800670a <_sbrk_r+0x1a>
 8006708:	602b      	str	r3, [r5, #0]
 800670a:	bd38      	pop	{r3, r4, r5, pc}
 800670c:	200003ac 	.word	0x200003ac

08006710 <__ascii_mbtowc>:
 8006710:	b082      	sub	sp, #8
 8006712:	b901      	cbnz	r1, 8006716 <__ascii_mbtowc+0x6>
 8006714:	a901      	add	r1, sp, #4
 8006716:	b142      	cbz	r2, 800672a <__ascii_mbtowc+0x1a>
 8006718:	b14b      	cbz	r3, 800672e <__ascii_mbtowc+0x1e>
 800671a:	7813      	ldrb	r3, [r2, #0]
 800671c:	600b      	str	r3, [r1, #0]
 800671e:	7812      	ldrb	r2, [r2, #0]
 8006720:	1c10      	adds	r0, r2, #0
 8006722:	bf18      	it	ne
 8006724:	2001      	movne	r0, #1
 8006726:	b002      	add	sp, #8
 8006728:	4770      	bx	lr
 800672a:	4610      	mov	r0, r2
 800672c:	e7fb      	b.n	8006726 <__ascii_mbtowc+0x16>
 800672e:	f06f 0001 	mvn.w	r0, #1
 8006732:	e7f8      	b.n	8006726 <__ascii_mbtowc+0x16>

08006734 <memmove>:
 8006734:	4288      	cmp	r0, r1
 8006736:	b510      	push	{r4, lr}
 8006738:	eb01 0302 	add.w	r3, r1, r2
 800673c:	d807      	bhi.n	800674e <memmove+0x1a>
 800673e:	1e42      	subs	r2, r0, #1
 8006740:	4299      	cmp	r1, r3
 8006742:	d00a      	beq.n	800675a <memmove+0x26>
 8006744:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006748:	f802 4f01 	strb.w	r4, [r2, #1]!
 800674c:	e7f8      	b.n	8006740 <memmove+0xc>
 800674e:	4283      	cmp	r3, r0
 8006750:	d9f5      	bls.n	800673e <memmove+0xa>
 8006752:	1881      	adds	r1, r0, r2
 8006754:	1ad2      	subs	r2, r2, r3
 8006756:	42d3      	cmn	r3, r2
 8006758:	d100      	bne.n	800675c <memmove+0x28>
 800675a:	bd10      	pop	{r4, pc}
 800675c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006760:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006764:	e7f7      	b.n	8006756 <memmove+0x22>

08006766 <__malloc_lock>:
 8006766:	4770      	bx	lr

08006768 <__malloc_unlock>:
 8006768:	4770      	bx	lr

0800676a <_realloc_r>:
 800676a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800676c:	4607      	mov	r7, r0
 800676e:	4614      	mov	r4, r2
 8006770:	460e      	mov	r6, r1
 8006772:	b921      	cbnz	r1, 800677e <_realloc_r+0x14>
 8006774:	4611      	mov	r1, r2
 8006776:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800677a:	f7ff be0d 	b.w	8006398 <_malloc_r>
 800677e:	b922      	cbnz	r2, 800678a <_realloc_r+0x20>
 8006780:	f7ff fdbc 	bl	80062fc <_free_r>
 8006784:	4625      	mov	r5, r4
 8006786:	4628      	mov	r0, r5
 8006788:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800678a:	f000 f821 	bl	80067d0 <_malloc_usable_size_r>
 800678e:	42a0      	cmp	r0, r4
 8006790:	d20f      	bcs.n	80067b2 <_realloc_r+0x48>
 8006792:	4621      	mov	r1, r4
 8006794:	4638      	mov	r0, r7
 8006796:	f7ff fdff 	bl	8006398 <_malloc_r>
 800679a:	4605      	mov	r5, r0
 800679c:	2800      	cmp	r0, #0
 800679e:	d0f2      	beq.n	8006786 <_realloc_r+0x1c>
 80067a0:	4631      	mov	r1, r6
 80067a2:	4622      	mov	r2, r4
 80067a4:	f7ff fab6 	bl	8005d14 <memcpy>
 80067a8:	4631      	mov	r1, r6
 80067aa:	4638      	mov	r0, r7
 80067ac:	f7ff fda6 	bl	80062fc <_free_r>
 80067b0:	e7e9      	b.n	8006786 <_realloc_r+0x1c>
 80067b2:	4635      	mov	r5, r6
 80067b4:	e7e7      	b.n	8006786 <_realloc_r+0x1c>

080067b6 <__ascii_wctomb>:
 80067b6:	b149      	cbz	r1, 80067cc <__ascii_wctomb+0x16>
 80067b8:	2aff      	cmp	r2, #255	; 0xff
 80067ba:	bf85      	ittet	hi
 80067bc:	238a      	movhi	r3, #138	; 0x8a
 80067be:	6003      	strhi	r3, [r0, #0]
 80067c0:	700a      	strbls	r2, [r1, #0]
 80067c2:	f04f 30ff 	movhi.w	r0, #4294967295
 80067c6:	bf98      	it	ls
 80067c8:	2001      	movls	r0, #1
 80067ca:	4770      	bx	lr
 80067cc:	4608      	mov	r0, r1
 80067ce:	4770      	bx	lr

080067d0 <_malloc_usable_size_r>:
 80067d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067d4:	1f18      	subs	r0, r3, #4
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	bfbc      	itt	lt
 80067da:	580b      	ldrlt	r3, [r1, r0]
 80067dc:	18c0      	addlt	r0, r0, r3
 80067de:	4770      	bx	lr

080067e0 <log10>:
 80067e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067e2:	ed2d 8b02 	vpush	{d8}
 80067e6:	b08b      	sub	sp, #44	; 0x2c
 80067e8:	ec55 4b10 	vmov	r4, r5, d0
 80067ec:	f000 f9e8 	bl	8006bc0 <__ieee754_log10>
 80067f0:	4b36      	ldr	r3, [pc, #216]	; (80068cc <log10+0xec>)
 80067f2:	eeb0 8a40 	vmov.f32	s16, s0
 80067f6:	eef0 8a60 	vmov.f32	s17, s1
 80067fa:	f993 6000 	ldrsb.w	r6, [r3]
 80067fe:	1c73      	adds	r3, r6, #1
 8006800:	d05c      	beq.n	80068bc <log10+0xdc>
 8006802:	4622      	mov	r2, r4
 8006804:	462b      	mov	r3, r5
 8006806:	4620      	mov	r0, r4
 8006808:	4629      	mov	r1, r5
 800680a:	f7fa f997 	bl	8000b3c <__aeabi_dcmpun>
 800680e:	4607      	mov	r7, r0
 8006810:	2800      	cmp	r0, #0
 8006812:	d153      	bne.n	80068bc <log10+0xdc>
 8006814:	2200      	movs	r2, #0
 8006816:	2300      	movs	r3, #0
 8006818:	4620      	mov	r0, r4
 800681a:	4629      	mov	r1, r5
 800681c:	f7fa f970 	bl	8000b00 <__aeabi_dcmple>
 8006820:	2800      	cmp	r0, #0
 8006822:	d04b      	beq.n	80068bc <log10+0xdc>
 8006824:	4b2a      	ldr	r3, [pc, #168]	; (80068d0 <log10+0xf0>)
 8006826:	9301      	str	r3, [sp, #4]
 8006828:	9708      	str	r7, [sp, #32]
 800682a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800682e:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8006832:	b9a6      	cbnz	r6, 800685e <log10+0x7e>
 8006834:	4b27      	ldr	r3, [pc, #156]	; (80068d4 <log10+0xf4>)
 8006836:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800683a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800683e:	4620      	mov	r0, r4
 8006840:	2200      	movs	r2, #0
 8006842:	2300      	movs	r3, #0
 8006844:	4629      	mov	r1, r5
 8006846:	f7fa f947 	bl	8000ad8 <__aeabi_dcmpeq>
 800684a:	bb40      	cbnz	r0, 800689e <log10+0xbe>
 800684c:	2301      	movs	r3, #1
 800684e:	2e02      	cmp	r6, #2
 8006850:	9300      	str	r3, [sp, #0]
 8006852:	d119      	bne.n	8006888 <log10+0xa8>
 8006854:	f7fd ff42 	bl	80046dc <__errno>
 8006858:	2321      	movs	r3, #33	; 0x21
 800685a:	6003      	str	r3, [r0, #0]
 800685c:	e019      	b.n	8006892 <log10+0xb2>
 800685e:	4b1e      	ldr	r3, [pc, #120]	; (80068d8 <log10+0xf8>)
 8006860:	2200      	movs	r2, #0
 8006862:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006866:	4620      	mov	r0, r4
 8006868:	2200      	movs	r2, #0
 800686a:	2300      	movs	r3, #0
 800686c:	4629      	mov	r1, r5
 800686e:	f7fa f933 	bl	8000ad8 <__aeabi_dcmpeq>
 8006872:	2800      	cmp	r0, #0
 8006874:	d0ea      	beq.n	800684c <log10+0x6c>
 8006876:	2302      	movs	r3, #2
 8006878:	429e      	cmp	r6, r3
 800687a:	9300      	str	r3, [sp, #0]
 800687c:	d111      	bne.n	80068a2 <log10+0xc2>
 800687e:	f7fd ff2d 	bl	80046dc <__errno>
 8006882:	2322      	movs	r3, #34	; 0x22
 8006884:	6003      	str	r3, [r0, #0]
 8006886:	e011      	b.n	80068ac <log10+0xcc>
 8006888:	4668      	mov	r0, sp
 800688a:	f000 fff4 	bl	8007876 <matherr>
 800688e:	2800      	cmp	r0, #0
 8006890:	d0e0      	beq.n	8006854 <log10+0x74>
 8006892:	4812      	ldr	r0, [pc, #72]	; (80068dc <log10+0xfc>)
 8006894:	f000 fff4 	bl	8007880 <nan>
 8006898:	ed8d 0b06 	vstr	d0, [sp, #24]
 800689c:	e006      	b.n	80068ac <log10+0xcc>
 800689e:	2302      	movs	r3, #2
 80068a0:	9300      	str	r3, [sp, #0]
 80068a2:	4668      	mov	r0, sp
 80068a4:	f000 ffe7 	bl	8007876 <matherr>
 80068a8:	2800      	cmp	r0, #0
 80068aa:	d0e8      	beq.n	800687e <log10+0x9e>
 80068ac:	9b08      	ldr	r3, [sp, #32]
 80068ae:	b11b      	cbz	r3, 80068b8 <log10+0xd8>
 80068b0:	f7fd ff14 	bl	80046dc <__errno>
 80068b4:	9b08      	ldr	r3, [sp, #32]
 80068b6:	6003      	str	r3, [r0, #0]
 80068b8:	ed9d 8b06 	vldr	d8, [sp, #24]
 80068bc:	eeb0 0a48 	vmov.f32	s0, s16
 80068c0:	eef0 0a68 	vmov.f32	s1, s17
 80068c4:	b00b      	add	sp, #44	; 0x2c
 80068c6:	ecbd 8b02 	vpop	{d8}
 80068ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068cc:	20000250 	.word	0x20000250
 80068d0:	080080c0 	.word	0x080080c0
 80068d4:	c7efffff 	.word	0xc7efffff
 80068d8:	fff00000 	.word	0xfff00000
 80068dc:	08007fa9 	.word	0x08007fa9

080068e0 <pow>:
 80068e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068e4:	ed2d 8b04 	vpush	{d8-d9}
 80068e8:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8006bbc <pow+0x2dc>
 80068ec:	b08d      	sub	sp, #52	; 0x34
 80068ee:	ec57 6b10 	vmov	r6, r7, d0
 80068f2:	ec55 4b11 	vmov	r4, r5, d1
 80068f6:	f000 f9ef 	bl	8006cd8 <__ieee754_pow>
 80068fa:	f999 3000 	ldrsb.w	r3, [r9]
 80068fe:	9300      	str	r3, [sp, #0]
 8006900:	3301      	adds	r3, #1
 8006902:	eeb0 8a40 	vmov.f32	s16, s0
 8006906:	eef0 8a60 	vmov.f32	s17, s1
 800690a:	46c8      	mov	r8, r9
 800690c:	d05f      	beq.n	80069ce <pow+0xee>
 800690e:	4622      	mov	r2, r4
 8006910:	462b      	mov	r3, r5
 8006912:	4620      	mov	r0, r4
 8006914:	4629      	mov	r1, r5
 8006916:	f7fa f911 	bl	8000b3c <__aeabi_dcmpun>
 800691a:	4683      	mov	fp, r0
 800691c:	2800      	cmp	r0, #0
 800691e:	d156      	bne.n	80069ce <pow+0xee>
 8006920:	4632      	mov	r2, r6
 8006922:	463b      	mov	r3, r7
 8006924:	4630      	mov	r0, r6
 8006926:	4639      	mov	r1, r7
 8006928:	f7fa f908 	bl	8000b3c <__aeabi_dcmpun>
 800692c:	9001      	str	r0, [sp, #4]
 800692e:	b1e8      	cbz	r0, 800696c <pow+0x8c>
 8006930:	2200      	movs	r2, #0
 8006932:	2300      	movs	r3, #0
 8006934:	4620      	mov	r0, r4
 8006936:	4629      	mov	r1, r5
 8006938:	f7fa f8ce 	bl	8000ad8 <__aeabi_dcmpeq>
 800693c:	2800      	cmp	r0, #0
 800693e:	d046      	beq.n	80069ce <pow+0xee>
 8006940:	2301      	movs	r3, #1
 8006942:	9302      	str	r3, [sp, #8]
 8006944:	4b96      	ldr	r3, [pc, #600]	; (8006ba0 <pow+0x2c0>)
 8006946:	9303      	str	r3, [sp, #12]
 8006948:	4b96      	ldr	r3, [pc, #600]	; (8006ba4 <pow+0x2c4>)
 800694a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800694e:	2200      	movs	r2, #0
 8006950:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006954:	9b00      	ldr	r3, [sp, #0]
 8006956:	2b02      	cmp	r3, #2
 8006958:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800695c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006960:	d033      	beq.n	80069ca <pow+0xea>
 8006962:	a802      	add	r0, sp, #8
 8006964:	f000 ff87 	bl	8007876 <matherr>
 8006968:	bb48      	cbnz	r0, 80069be <pow+0xde>
 800696a:	e05d      	b.n	8006a28 <pow+0x148>
 800696c:	f04f 0a00 	mov.w	sl, #0
 8006970:	f04f 0b00 	mov.w	fp, #0
 8006974:	4652      	mov	r2, sl
 8006976:	465b      	mov	r3, fp
 8006978:	4630      	mov	r0, r6
 800697a:	4639      	mov	r1, r7
 800697c:	f7fa f8ac 	bl	8000ad8 <__aeabi_dcmpeq>
 8006980:	ec4b ab19 	vmov	d9, sl, fp
 8006984:	2800      	cmp	r0, #0
 8006986:	d054      	beq.n	8006a32 <pow+0x152>
 8006988:	4652      	mov	r2, sl
 800698a:	465b      	mov	r3, fp
 800698c:	4620      	mov	r0, r4
 800698e:	4629      	mov	r1, r5
 8006990:	f7fa f8a2 	bl	8000ad8 <__aeabi_dcmpeq>
 8006994:	4680      	mov	r8, r0
 8006996:	b318      	cbz	r0, 80069e0 <pow+0x100>
 8006998:	2301      	movs	r3, #1
 800699a:	9302      	str	r3, [sp, #8]
 800699c:	4b80      	ldr	r3, [pc, #512]	; (8006ba0 <pow+0x2c0>)
 800699e:	9303      	str	r3, [sp, #12]
 80069a0:	9b01      	ldr	r3, [sp, #4]
 80069a2:	930a      	str	r3, [sp, #40]	; 0x28
 80069a4:	9b00      	ldr	r3, [sp, #0]
 80069a6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80069aa:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80069ae:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d0d5      	beq.n	8006962 <pow+0x82>
 80069b6:	4b7b      	ldr	r3, [pc, #492]	; (8006ba4 <pow+0x2c4>)
 80069b8:	2200      	movs	r2, #0
 80069ba:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80069be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069c0:	b11b      	cbz	r3, 80069ca <pow+0xea>
 80069c2:	f7fd fe8b 	bl	80046dc <__errno>
 80069c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069c8:	6003      	str	r3, [r0, #0]
 80069ca:	ed9d 8b08 	vldr	d8, [sp, #32]
 80069ce:	eeb0 0a48 	vmov.f32	s0, s16
 80069d2:	eef0 0a68 	vmov.f32	s1, s17
 80069d6:	b00d      	add	sp, #52	; 0x34
 80069d8:	ecbd 8b04 	vpop	{d8-d9}
 80069dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069e0:	ec45 4b10 	vmov	d0, r4, r5
 80069e4:	f000 ff3f 	bl	8007866 <finite>
 80069e8:	2800      	cmp	r0, #0
 80069ea:	d0f0      	beq.n	80069ce <pow+0xee>
 80069ec:	4652      	mov	r2, sl
 80069ee:	465b      	mov	r3, fp
 80069f0:	4620      	mov	r0, r4
 80069f2:	4629      	mov	r1, r5
 80069f4:	f7fa f87a 	bl	8000aec <__aeabi_dcmplt>
 80069f8:	2800      	cmp	r0, #0
 80069fa:	d0e8      	beq.n	80069ce <pow+0xee>
 80069fc:	2301      	movs	r3, #1
 80069fe:	9302      	str	r3, [sp, #8]
 8006a00:	4b67      	ldr	r3, [pc, #412]	; (8006ba0 <pow+0x2c0>)
 8006a02:	9303      	str	r3, [sp, #12]
 8006a04:	f999 3000 	ldrsb.w	r3, [r9]
 8006a08:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8006a0c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006a10:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006a14:	b913      	cbnz	r3, 8006a1c <pow+0x13c>
 8006a16:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8006a1a:	e7a2      	b.n	8006962 <pow+0x82>
 8006a1c:	4962      	ldr	r1, [pc, #392]	; (8006ba8 <pow+0x2c8>)
 8006a1e:	2000      	movs	r0, #0
 8006a20:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006a24:	2b02      	cmp	r3, #2
 8006a26:	d19c      	bne.n	8006962 <pow+0x82>
 8006a28:	f7fd fe58 	bl	80046dc <__errno>
 8006a2c:	2321      	movs	r3, #33	; 0x21
 8006a2e:	6003      	str	r3, [r0, #0]
 8006a30:	e7c5      	b.n	80069be <pow+0xde>
 8006a32:	eeb0 0a48 	vmov.f32	s0, s16
 8006a36:	eef0 0a68 	vmov.f32	s1, s17
 8006a3a:	f000 ff14 	bl	8007866 <finite>
 8006a3e:	9000      	str	r0, [sp, #0]
 8006a40:	2800      	cmp	r0, #0
 8006a42:	f040 8081 	bne.w	8006b48 <pow+0x268>
 8006a46:	ec47 6b10 	vmov	d0, r6, r7
 8006a4a:	f000 ff0c 	bl	8007866 <finite>
 8006a4e:	2800      	cmp	r0, #0
 8006a50:	d07a      	beq.n	8006b48 <pow+0x268>
 8006a52:	ec45 4b10 	vmov	d0, r4, r5
 8006a56:	f000 ff06 	bl	8007866 <finite>
 8006a5a:	2800      	cmp	r0, #0
 8006a5c:	d074      	beq.n	8006b48 <pow+0x268>
 8006a5e:	ec53 2b18 	vmov	r2, r3, d8
 8006a62:	ee18 0a10 	vmov	r0, s16
 8006a66:	4619      	mov	r1, r3
 8006a68:	f7fa f868 	bl	8000b3c <__aeabi_dcmpun>
 8006a6c:	f999 9000 	ldrsb.w	r9, [r9]
 8006a70:	4b4b      	ldr	r3, [pc, #300]	; (8006ba0 <pow+0x2c0>)
 8006a72:	b1b0      	cbz	r0, 8006aa2 <pow+0x1c2>
 8006a74:	2201      	movs	r2, #1
 8006a76:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006a7a:	9b00      	ldr	r3, [sp, #0]
 8006a7c:	930a      	str	r3, [sp, #40]	; 0x28
 8006a7e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006a82:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006a86:	f1b9 0f00 	cmp.w	r9, #0
 8006a8a:	d0c4      	beq.n	8006a16 <pow+0x136>
 8006a8c:	4652      	mov	r2, sl
 8006a8e:	465b      	mov	r3, fp
 8006a90:	4650      	mov	r0, sl
 8006a92:	4659      	mov	r1, fp
 8006a94:	f7f9 fee2 	bl	800085c <__aeabi_ddiv>
 8006a98:	f1b9 0f02 	cmp.w	r9, #2
 8006a9c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006aa0:	e7c1      	b.n	8006a26 <pow+0x146>
 8006aa2:	2203      	movs	r2, #3
 8006aa4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006aa8:	900a      	str	r0, [sp, #40]	; 0x28
 8006aaa:	4629      	mov	r1, r5
 8006aac:	4620      	mov	r0, r4
 8006aae:	2200      	movs	r2, #0
 8006ab0:	4b3e      	ldr	r3, [pc, #248]	; (8006bac <pow+0x2cc>)
 8006ab2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006ab6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006aba:	f7f9 fda5 	bl	8000608 <__aeabi_dmul>
 8006abe:	4604      	mov	r4, r0
 8006ac0:	460d      	mov	r5, r1
 8006ac2:	f1b9 0f00 	cmp.w	r9, #0
 8006ac6:	d124      	bne.n	8006b12 <pow+0x232>
 8006ac8:	4b39      	ldr	r3, [pc, #228]	; (8006bb0 <pow+0x2d0>)
 8006aca:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8006ace:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006ad2:	4630      	mov	r0, r6
 8006ad4:	4652      	mov	r2, sl
 8006ad6:	465b      	mov	r3, fp
 8006ad8:	4639      	mov	r1, r7
 8006ada:	f7fa f807 	bl	8000aec <__aeabi_dcmplt>
 8006ade:	2800      	cmp	r0, #0
 8006ae0:	d056      	beq.n	8006b90 <pow+0x2b0>
 8006ae2:	ec45 4b10 	vmov	d0, r4, r5
 8006ae6:	f000 fed3 	bl	8007890 <rint>
 8006aea:	4622      	mov	r2, r4
 8006aec:	462b      	mov	r3, r5
 8006aee:	ec51 0b10 	vmov	r0, r1, d0
 8006af2:	f7f9 fff1 	bl	8000ad8 <__aeabi_dcmpeq>
 8006af6:	b920      	cbnz	r0, 8006b02 <pow+0x222>
 8006af8:	4b2e      	ldr	r3, [pc, #184]	; (8006bb4 <pow+0x2d4>)
 8006afa:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8006afe:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006b02:	f998 3000 	ldrsb.w	r3, [r8]
 8006b06:	2b02      	cmp	r3, #2
 8006b08:	d142      	bne.n	8006b90 <pow+0x2b0>
 8006b0a:	f7fd fde7 	bl	80046dc <__errno>
 8006b0e:	2322      	movs	r3, #34	; 0x22
 8006b10:	e78d      	b.n	8006a2e <pow+0x14e>
 8006b12:	4b29      	ldr	r3, [pc, #164]	; (8006bb8 <pow+0x2d8>)
 8006b14:	2200      	movs	r2, #0
 8006b16:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006b1a:	4630      	mov	r0, r6
 8006b1c:	4652      	mov	r2, sl
 8006b1e:	465b      	mov	r3, fp
 8006b20:	4639      	mov	r1, r7
 8006b22:	f7f9 ffe3 	bl	8000aec <__aeabi_dcmplt>
 8006b26:	2800      	cmp	r0, #0
 8006b28:	d0eb      	beq.n	8006b02 <pow+0x222>
 8006b2a:	ec45 4b10 	vmov	d0, r4, r5
 8006b2e:	f000 feaf 	bl	8007890 <rint>
 8006b32:	4622      	mov	r2, r4
 8006b34:	462b      	mov	r3, r5
 8006b36:	ec51 0b10 	vmov	r0, r1, d0
 8006b3a:	f7f9 ffcd 	bl	8000ad8 <__aeabi_dcmpeq>
 8006b3e:	2800      	cmp	r0, #0
 8006b40:	d1df      	bne.n	8006b02 <pow+0x222>
 8006b42:	2200      	movs	r2, #0
 8006b44:	4b18      	ldr	r3, [pc, #96]	; (8006ba8 <pow+0x2c8>)
 8006b46:	e7da      	b.n	8006afe <pow+0x21e>
 8006b48:	2200      	movs	r2, #0
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	ec51 0b18 	vmov	r0, r1, d8
 8006b50:	f7f9 ffc2 	bl	8000ad8 <__aeabi_dcmpeq>
 8006b54:	2800      	cmp	r0, #0
 8006b56:	f43f af3a 	beq.w	80069ce <pow+0xee>
 8006b5a:	ec47 6b10 	vmov	d0, r6, r7
 8006b5e:	f000 fe82 	bl	8007866 <finite>
 8006b62:	2800      	cmp	r0, #0
 8006b64:	f43f af33 	beq.w	80069ce <pow+0xee>
 8006b68:	ec45 4b10 	vmov	d0, r4, r5
 8006b6c:	f000 fe7b 	bl	8007866 <finite>
 8006b70:	2800      	cmp	r0, #0
 8006b72:	f43f af2c 	beq.w	80069ce <pow+0xee>
 8006b76:	2304      	movs	r3, #4
 8006b78:	9302      	str	r3, [sp, #8]
 8006b7a:	4b09      	ldr	r3, [pc, #36]	; (8006ba0 <pow+0x2c0>)
 8006b7c:	9303      	str	r3, [sp, #12]
 8006b7e:	2300      	movs	r3, #0
 8006b80:	930a      	str	r3, [sp, #40]	; 0x28
 8006b82:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006b86:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006b8a:	ed8d 9b08 	vstr	d9, [sp, #32]
 8006b8e:	e7b8      	b.n	8006b02 <pow+0x222>
 8006b90:	a802      	add	r0, sp, #8
 8006b92:	f000 fe70 	bl	8007876 <matherr>
 8006b96:	2800      	cmp	r0, #0
 8006b98:	f47f af11 	bne.w	80069be <pow+0xde>
 8006b9c:	e7b5      	b.n	8006b0a <pow+0x22a>
 8006b9e:	bf00      	nop
 8006ba0:	080080c6 	.word	0x080080c6
 8006ba4:	3ff00000 	.word	0x3ff00000
 8006ba8:	fff00000 	.word	0xfff00000
 8006bac:	3fe00000 	.word	0x3fe00000
 8006bb0:	47efffff 	.word	0x47efffff
 8006bb4:	c7efffff 	.word	0xc7efffff
 8006bb8:	7ff00000 	.word	0x7ff00000
 8006bbc:	20000250 	.word	0x20000250

08006bc0 <__ieee754_log10>:
 8006bc0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006bc4:	ec55 4b10 	vmov	r4, r5, d0
 8006bc8:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 8006bcc:	462b      	mov	r3, r5
 8006bce:	da2f      	bge.n	8006c30 <__ieee754_log10+0x70>
 8006bd0:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8006bd4:	4322      	orrs	r2, r4
 8006bd6:	d10a      	bne.n	8006bee <__ieee754_log10+0x2e>
 8006bd8:	493b      	ldr	r1, [pc, #236]	; (8006cc8 <__ieee754_log10+0x108>)
 8006bda:	2200      	movs	r2, #0
 8006bdc:	2300      	movs	r3, #0
 8006bde:	2000      	movs	r0, #0
 8006be0:	f7f9 fe3c 	bl	800085c <__aeabi_ddiv>
 8006be4:	ec41 0b10 	vmov	d0, r0, r1
 8006be8:	b003      	add	sp, #12
 8006bea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006bee:	2d00      	cmp	r5, #0
 8006bf0:	da08      	bge.n	8006c04 <__ieee754_log10+0x44>
 8006bf2:	ee10 2a10 	vmov	r2, s0
 8006bf6:	4620      	mov	r0, r4
 8006bf8:	4629      	mov	r1, r5
 8006bfa:	f7f9 fb4d 	bl	8000298 <__aeabi_dsub>
 8006bfe:	2200      	movs	r2, #0
 8006c00:	2300      	movs	r3, #0
 8006c02:	e7ed      	b.n	8006be0 <__ieee754_log10+0x20>
 8006c04:	2200      	movs	r2, #0
 8006c06:	4b31      	ldr	r3, [pc, #196]	; (8006ccc <__ieee754_log10+0x10c>)
 8006c08:	4629      	mov	r1, r5
 8006c0a:	ee10 0a10 	vmov	r0, s0
 8006c0e:	f7f9 fcfb 	bl	8000608 <__aeabi_dmul>
 8006c12:	f06f 0235 	mvn.w	r2, #53	; 0x35
 8006c16:	4604      	mov	r4, r0
 8006c18:	460d      	mov	r5, r1
 8006c1a:	460b      	mov	r3, r1
 8006c1c:	492c      	ldr	r1, [pc, #176]	; (8006cd0 <__ieee754_log10+0x110>)
 8006c1e:	428b      	cmp	r3, r1
 8006c20:	dd08      	ble.n	8006c34 <__ieee754_log10+0x74>
 8006c22:	4622      	mov	r2, r4
 8006c24:	462b      	mov	r3, r5
 8006c26:	4620      	mov	r0, r4
 8006c28:	4629      	mov	r1, r5
 8006c2a:	f7f9 fb37 	bl	800029c <__adddf3>
 8006c2e:	e7d9      	b.n	8006be4 <__ieee754_log10+0x24>
 8006c30:	2200      	movs	r2, #0
 8006c32:	e7f3      	b.n	8006c1c <__ieee754_log10+0x5c>
 8006c34:	1518      	asrs	r0, r3, #20
 8006c36:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8006c3a:	4410      	add	r0, r2
 8006c3c:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 8006c40:	4448      	add	r0, r9
 8006c42:	f3c3 0813 	ubfx	r8, r3, #0, #20
 8006c46:	f7f9 fc75 	bl	8000534 <__aeabi_i2d>
 8006c4a:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 8006c4e:	3303      	adds	r3, #3
 8006c50:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 8006c54:	ec45 4b10 	vmov	d0, r4, r5
 8006c58:	4606      	mov	r6, r0
 8006c5a:	460f      	mov	r7, r1
 8006c5c:	f000 ff14 	bl	8007a88 <__ieee754_log>
 8006c60:	a313      	add	r3, pc, #76	; (adr r3, 8006cb0 <__ieee754_log10+0xf0>)
 8006c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c66:	4630      	mov	r0, r6
 8006c68:	4639      	mov	r1, r7
 8006c6a:	ed8d 0b00 	vstr	d0, [sp]
 8006c6e:	f7f9 fccb 	bl	8000608 <__aeabi_dmul>
 8006c72:	ed9d 0b00 	vldr	d0, [sp]
 8006c76:	4604      	mov	r4, r0
 8006c78:	460d      	mov	r5, r1
 8006c7a:	a30f      	add	r3, pc, #60	; (adr r3, 8006cb8 <__ieee754_log10+0xf8>)
 8006c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c80:	ec51 0b10 	vmov	r0, r1, d0
 8006c84:	f7f9 fcc0 	bl	8000608 <__aeabi_dmul>
 8006c88:	4602      	mov	r2, r0
 8006c8a:	460b      	mov	r3, r1
 8006c8c:	4620      	mov	r0, r4
 8006c8e:	4629      	mov	r1, r5
 8006c90:	f7f9 fb04 	bl	800029c <__adddf3>
 8006c94:	a30a      	add	r3, pc, #40	; (adr r3, 8006cc0 <__ieee754_log10+0x100>)
 8006c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c9a:	4604      	mov	r4, r0
 8006c9c:	460d      	mov	r5, r1
 8006c9e:	4630      	mov	r0, r6
 8006ca0:	4639      	mov	r1, r7
 8006ca2:	f7f9 fcb1 	bl	8000608 <__aeabi_dmul>
 8006ca6:	4602      	mov	r2, r0
 8006ca8:	460b      	mov	r3, r1
 8006caa:	4620      	mov	r0, r4
 8006cac:	4629      	mov	r1, r5
 8006cae:	e7bc      	b.n	8006c2a <__ieee754_log10+0x6a>
 8006cb0:	11f12b36 	.word	0x11f12b36
 8006cb4:	3d59fef3 	.word	0x3d59fef3
 8006cb8:	1526e50e 	.word	0x1526e50e
 8006cbc:	3fdbcb7b 	.word	0x3fdbcb7b
 8006cc0:	509f6000 	.word	0x509f6000
 8006cc4:	3fd34413 	.word	0x3fd34413
 8006cc8:	c3500000 	.word	0xc3500000
 8006ccc:	43500000 	.word	0x43500000
 8006cd0:	7fefffff 	.word	0x7fefffff
 8006cd4:	00000000 	.word	0x00000000

08006cd8 <__ieee754_pow>:
 8006cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cdc:	b091      	sub	sp, #68	; 0x44
 8006cde:	ed8d 1b00 	vstr	d1, [sp]
 8006ce2:	e9dd 2900 	ldrd	r2, r9, [sp]
 8006ce6:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8006cea:	ea58 0302 	orrs.w	r3, r8, r2
 8006cee:	ec57 6b10 	vmov	r6, r7, d0
 8006cf2:	f000 84be 	beq.w	8007672 <__ieee754_pow+0x99a>
 8006cf6:	4b7a      	ldr	r3, [pc, #488]	; (8006ee0 <__ieee754_pow+0x208>)
 8006cf8:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8006cfc:	429c      	cmp	r4, r3
 8006cfe:	463d      	mov	r5, r7
 8006d00:	ee10 aa10 	vmov	sl, s0
 8006d04:	dc09      	bgt.n	8006d1a <__ieee754_pow+0x42>
 8006d06:	d103      	bne.n	8006d10 <__ieee754_pow+0x38>
 8006d08:	b93e      	cbnz	r6, 8006d1a <__ieee754_pow+0x42>
 8006d0a:	45a0      	cmp	r8, r4
 8006d0c:	dc0d      	bgt.n	8006d2a <__ieee754_pow+0x52>
 8006d0e:	e001      	b.n	8006d14 <__ieee754_pow+0x3c>
 8006d10:	4598      	cmp	r8, r3
 8006d12:	dc02      	bgt.n	8006d1a <__ieee754_pow+0x42>
 8006d14:	4598      	cmp	r8, r3
 8006d16:	d10e      	bne.n	8006d36 <__ieee754_pow+0x5e>
 8006d18:	b16a      	cbz	r2, 8006d36 <__ieee754_pow+0x5e>
 8006d1a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006d1e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006d22:	ea54 030a 	orrs.w	r3, r4, sl
 8006d26:	f000 84a4 	beq.w	8007672 <__ieee754_pow+0x99a>
 8006d2a:	486e      	ldr	r0, [pc, #440]	; (8006ee4 <__ieee754_pow+0x20c>)
 8006d2c:	b011      	add	sp, #68	; 0x44
 8006d2e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d32:	f000 bda5 	b.w	8007880 <nan>
 8006d36:	2d00      	cmp	r5, #0
 8006d38:	da53      	bge.n	8006de2 <__ieee754_pow+0x10a>
 8006d3a:	4b6b      	ldr	r3, [pc, #428]	; (8006ee8 <__ieee754_pow+0x210>)
 8006d3c:	4598      	cmp	r8, r3
 8006d3e:	dc4d      	bgt.n	8006ddc <__ieee754_pow+0x104>
 8006d40:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8006d44:	4598      	cmp	r8, r3
 8006d46:	dd4c      	ble.n	8006de2 <__ieee754_pow+0x10a>
 8006d48:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006d4c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006d50:	2b14      	cmp	r3, #20
 8006d52:	dd26      	ble.n	8006da2 <__ieee754_pow+0xca>
 8006d54:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8006d58:	fa22 f103 	lsr.w	r1, r2, r3
 8006d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d13e      	bne.n	8006de2 <__ieee754_pow+0x10a>
 8006d64:	f001 0101 	and.w	r1, r1, #1
 8006d68:	f1c1 0b02 	rsb	fp, r1, #2
 8006d6c:	2a00      	cmp	r2, #0
 8006d6e:	d15b      	bne.n	8006e28 <__ieee754_pow+0x150>
 8006d70:	4b5b      	ldr	r3, [pc, #364]	; (8006ee0 <__ieee754_pow+0x208>)
 8006d72:	4598      	cmp	r8, r3
 8006d74:	d124      	bne.n	8006dc0 <__ieee754_pow+0xe8>
 8006d76:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8006d7a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8006d7e:	ea53 030a 	orrs.w	r3, r3, sl
 8006d82:	f000 8476 	beq.w	8007672 <__ieee754_pow+0x99a>
 8006d86:	4b59      	ldr	r3, [pc, #356]	; (8006eec <__ieee754_pow+0x214>)
 8006d88:	429c      	cmp	r4, r3
 8006d8a:	dd2d      	ble.n	8006de8 <__ieee754_pow+0x110>
 8006d8c:	f1b9 0f00 	cmp.w	r9, #0
 8006d90:	f280 8473 	bge.w	800767a <__ieee754_pow+0x9a2>
 8006d94:	2000      	movs	r0, #0
 8006d96:	2100      	movs	r1, #0
 8006d98:	ec41 0b10 	vmov	d0, r0, r1
 8006d9c:	b011      	add	sp, #68	; 0x44
 8006d9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006da2:	2a00      	cmp	r2, #0
 8006da4:	d13e      	bne.n	8006e24 <__ieee754_pow+0x14c>
 8006da6:	f1c3 0314 	rsb	r3, r3, #20
 8006daa:	fa48 f103 	asr.w	r1, r8, r3
 8006dae:	fa01 f303 	lsl.w	r3, r1, r3
 8006db2:	4543      	cmp	r3, r8
 8006db4:	f040 8469 	bne.w	800768a <__ieee754_pow+0x9b2>
 8006db8:	f001 0101 	and.w	r1, r1, #1
 8006dbc:	f1c1 0b02 	rsb	fp, r1, #2
 8006dc0:	4b4b      	ldr	r3, [pc, #300]	; (8006ef0 <__ieee754_pow+0x218>)
 8006dc2:	4598      	cmp	r8, r3
 8006dc4:	d118      	bne.n	8006df8 <__ieee754_pow+0x120>
 8006dc6:	f1b9 0f00 	cmp.w	r9, #0
 8006dca:	f280 845a 	bge.w	8007682 <__ieee754_pow+0x9aa>
 8006dce:	4948      	ldr	r1, [pc, #288]	; (8006ef0 <__ieee754_pow+0x218>)
 8006dd0:	4632      	mov	r2, r6
 8006dd2:	463b      	mov	r3, r7
 8006dd4:	2000      	movs	r0, #0
 8006dd6:	f7f9 fd41 	bl	800085c <__aeabi_ddiv>
 8006dda:	e7dd      	b.n	8006d98 <__ieee754_pow+0xc0>
 8006ddc:	f04f 0b02 	mov.w	fp, #2
 8006de0:	e7c4      	b.n	8006d6c <__ieee754_pow+0x94>
 8006de2:	f04f 0b00 	mov.w	fp, #0
 8006de6:	e7c1      	b.n	8006d6c <__ieee754_pow+0x94>
 8006de8:	f1b9 0f00 	cmp.w	r9, #0
 8006dec:	dad2      	bge.n	8006d94 <__ieee754_pow+0xbc>
 8006dee:	e9dd 0300 	ldrd	r0, r3, [sp]
 8006df2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006df6:	e7cf      	b.n	8006d98 <__ieee754_pow+0xc0>
 8006df8:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8006dfc:	d106      	bne.n	8006e0c <__ieee754_pow+0x134>
 8006dfe:	4632      	mov	r2, r6
 8006e00:	463b      	mov	r3, r7
 8006e02:	4610      	mov	r0, r2
 8006e04:	4619      	mov	r1, r3
 8006e06:	f7f9 fbff 	bl	8000608 <__aeabi_dmul>
 8006e0a:	e7c5      	b.n	8006d98 <__ieee754_pow+0xc0>
 8006e0c:	4b39      	ldr	r3, [pc, #228]	; (8006ef4 <__ieee754_pow+0x21c>)
 8006e0e:	4599      	cmp	r9, r3
 8006e10:	d10a      	bne.n	8006e28 <__ieee754_pow+0x150>
 8006e12:	2d00      	cmp	r5, #0
 8006e14:	db08      	blt.n	8006e28 <__ieee754_pow+0x150>
 8006e16:	ec47 6b10 	vmov	d0, r6, r7
 8006e1a:	b011      	add	sp, #68	; 0x44
 8006e1c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e20:	f000 bc68 	b.w	80076f4 <__ieee754_sqrt>
 8006e24:	f04f 0b00 	mov.w	fp, #0
 8006e28:	ec47 6b10 	vmov	d0, r6, r7
 8006e2c:	f000 fd12 	bl	8007854 <fabs>
 8006e30:	ec51 0b10 	vmov	r0, r1, d0
 8006e34:	f1ba 0f00 	cmp.w	sl, #0
 8006e38:	d127      	bne.n	8006e8a <__ieee754_pow+0x1b2>
 8006e3a:	b124      	cbz	r4, 8006e46 <__ieee754_pow+0x16e>
 8006e3c:	4b2c      	ldr	r3, [pc, #176]	; (8006ef0 <__ieee754_pow+0x218>)
 8006e3e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8006e42:	429a      	cmp	r2, r3
 8006e44:	d121      	bne.n	8006e8a <__ieee754_pow+0x1b2>
 8006e46:	f1b9 0f00 	cmp.w	r9, #0
 8006e4a:	da05      	bge.n	8006e58 <__ieee754_pow+0x180>
 8006e4c:	4602      	mov	r2, r0
 8006e4e:	460b      	mov	r3, r1
 8006e50:	2000      	movs	r0, #0
 8006e52:	4927      	ldr	r1, [pc, #156]	; (8006ef0 <__ieee754_pow+0x218>)
 8006e54:	f7f9 fd02 	bl	800085c <__aeabi_ddiv>
 8006e58:	2d00      	cmp	r5, #0
 8006e5a:	da9d      	bge.n	8006d98 <__ieee754_pow+0xc0>
 8006e5c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006e60:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006e64:	ea54 030b 	orrs.w	r3, r4, fp
 8006e68:	d108      	bne.n	8006e7c <__ieee754_pow+0x1a4>
 8006e6a:	4602      	mov	r2, r0
 8006e6c:	460b      	mov	r3, r1
 8006e6e:	4610      	mov	r0, r2
 8006e70:	4619      	mov	r1, r3
 8006e72:	f7f9 fa11 	bl	8000298 <__aeabi_dsub>
 8006e76:	4602      	mov	r2, r0
 8006e78:	460b      	mov	r3, r1
 8006e7a:	e7ac      	b.n	8006dd6 <__ieee754_pow+0xfe>
 8006e7c:	f1bb 0f01 	cmp.w	fp, #1
 8006e80:	d18a      	bne.n	8006d98 <__ieee754_pow+0xc0>
 8006e82:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006e86:	4619      	mov	r1, r3
 8006e88:	e786      	b.n	8006d98 <__ieee754_pow+0xc0>
 8006e8a:	0fed      	lsrs	r5, r5, #31
 8006e8c:	1e6b      	subs	r3, r5, #1
 8006e8e:	930d      	str	r3, [sp, #52]	; 0x34
 8006e90:	ea5b 0303 	orrs.w	r3, fp, r3
 8006e94:	d102      	bne.n	8006e9c <__ieee754_pow+0x1c4>
 8006e96:	4632      	mov	r2, r6
 8006e98:	463b      	mov	r3, r7
 8006e9a:	e7e8      	b.n	8006e6e <__ieee754_pow+0x196>
 8006e9c:	4b16      	ldr	r3, [pc, #88]	; (8006ef8 <__ieee754_pow+0x220>)
 8006e9e:	4598      	cmp	r8, r3
 8006ea0:	f340 80fe 	ble.w	80070a0 <__ieee754_pow+0x3c8>
 8006ea4:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8006ea8:	4598      	cmp	r8, r3
 8006eaa:	dd0a      	ble.n	8006ec2 <__ieee754_pow+0x1ea>
 8006eac:	4b0f      	ldr	r3, [pc, #60]	; (8006eec <__ieee754_pow+0x214>)
 8006eae:	429c      	cmp	r4, r3
 8006eb0:	dc0d      	bgt.n	8006ece <__ieee754_pow+0x1f6>
 8006eb2:	f1b9 0f00 	cmp.w	r9, #0
 8006eb6:	f6bf af6d 	bge.w	8006d94 <__ieee754_pow+0xbc>
 8006eba:	a307      	add	r3, pc, #28	; (adr r3, 8006ed8 <__ieee754_pow+0x200>)
 8006ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ec0:	e79f      	b.n	8006e02 <__ieee754_pow+0x12a>
 8006ec2:	4b0e      	ldr	r3, [pc, #56]	; (8006efc <__ieee754_pow+0x224>)
 8006ec4:	429c      	cmp	r4, r3
 8006ec6:	ddf4      	ble.n	8006eb2 <__ieee754_pow+0x1da>
 8006ec8:	4b09      	ldr	r3, [pc, #36]	; (8006ef0 <__ieee754_pow+0x218>)
 8006eca:	429c      	cmp	r4, r3
 8006ecc:	dd18      	ble.n	8006f00 <__ieee754_pow+0x228>
 8006ece:	f1b9 0f00 	cmp.w	r9, #0
 8006ed2:	dcf2      	bgt.n	8006eba <__ieee754_pow+0x1e2>
 8006ed4:	e75e      	b.n	8006d94 <__ieee754_pow+0xbc>
 8006ed6:	bf00      	nop
 8006ed8:	8800759c 	.word	0x8800759c
 8006edc:	7e37e43c 	.word	0x7e37e43c
 8006ee0:	7ff00000 	.word	0x7ff00000
 8006ee4:	08007fa9 	.word	0x08007fa9
 8006ee8:	433fffff 	.word	0x433fffff
 8006eec:	3fefffff 	.word	0x3fefffff
 8006ef0:	3ff00000 	.word	0x3ff00000
 8006ef4:	3fe00000 	.word	0x3fe00000
 8006ef8:	41e00000 	.word	0x41e00000
 8006efc:	3feffffe 	.word	0x3feffffe
 8006f00:	2200      	movs	r2, #0
 8006f02:	4b63      	ldr	r3, [pc, #396]	; (8007090 <__ieee754_pow+0x3b8>)
 8006f04:	f7f9 f9c8 	bl	8000298 <__aeabi_dsub>
 8006f08:	a355      	add	r3, pc, #340	; (adr r3, 8007060 <__ieee754_pow+0x388>)
 8006f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f0e:	4604      	mov	r4, r0
 8006f10:	460d      	mov	r5, r1
 8006f12:	f7f9 fb79 	bl	8000608 <__aeabi_dmul>
 8006f16:	a354      	add	r3, pc, #336	; (adr r3, 8007068 <__ieee754_pow+0x390>)
 8006f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f1c:	4606      	mov	r6, r0
 8006f1e:	460f      	mov	r7, r1
 8006f20:	4620      	mov	r0, r4
 8006f22:	4629      	mov	r1, r5
 8006f24:	f7f9 fb70 	bl	8000608 <__aeabi_dmul>
 8006f28:	2200      	movs	r2, #0
 8006f2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f2e:	4b59      	ldr	r3, [pc, #356]	; (8007094 <__ieee754_pow+0x3bc>)
 8006f30:	4620      	mov	r0, r4
 8006f32:	4629      	mov	r1, r5
 8006f34:	f7f9 fb68 	bl	8000608 <__aeabi_dmul>
 8006f38:	4602      	mov	r2, r0
 8006f3a:	460b      	mov	r3, r1
 8006f3c:	a14c      	add	r1, pc, #304	; (adr r1, 8007070 <__ieee754_pow+0x398>)
 8006f3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f42:	f7f9 f9a9 	bl	8000298 <__aeabi_dsub>
 8006f46:	4622      	mov	r2, r4
 8006f48:	462b      	mov	r3, r5
 8006f4a:	f7f9 fb5d 	bl	8000608 <__aeabi_dmul>
 8006f4e:	4602      	mov	r2, r0
 8006f50:	460b      	mov	r3, r1
 8006f52:	2000      	movs	r0, #0
 8006f54:	4950      	ldr	r1, [pc, #320]	; (8007098 <__ieee754_pow+0x3c0>)
 8006f56:	f7f9 f99f 	bl	8000298 <__aeabi_dsub>
 8006f5a:	4622      	mov	r2, r4
 8006f5c:	462b      	mov	r3, r5
 8006f5e:	4680      	mov	r8, r0
 8006f60:	4689      	mov	r9, r1
 8006f62:	4620      	mov	r0, r4
 8006f64:	4629      	mov	r1, r5
 8006f66:	f7f9 fb4f 	bl	8000608 <__aeabi_dmul>
 8006f6a:	4602      	mov	r2, r0
 8006f6c:	460b      	mov	r3, r1
 8006f6e:	4640      	mov	r0, r8
 8006f70:	4649      	mov	r1, r9
 8006f72:	f7f9 fb49 	bl	8000608 <__aeabi_dmul>
 8006f76:	a340      	add	r3, pc, #256	; (adr r3, 8007078 <__ieee754_pow+0x3a0>)
 8006f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f7c:	f7f9 fb44 	bl	8000608 <__aeabi_dmul>
 8006f80:	4602      	mov	r2, r0
 8006f82:	460b      	mov	r3, r1
 8006f84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f88:	f7f9 f986 	bl	8000298 <__aeabi_dsub>
 8006f8c:	4602      	mov	r2, r0
 8006f8e:	460b      	mov	r3, r1
 8006f90:	4604      	mov	r4, r0
 8006f92:	460d      	mov	r5, r1
 8006f94:	4630      	mov	r0, r6
 8006f96:	4639      	mov	r1, r7
 8006f98:	f7f9 f980 	bl	800029c <__adddf3>
 8006f9c:	2000      	movs	r0, #0
 8006f9e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006fa2:	4632      	mov	r2, r6
 8006fa4:	463b      	mov	r3, r7
 8006fa6:	f7f9 f977 	bl	8000298 <__aeabi_dsub>
 8006faa:	4602      	mov	r2, r0
 8006fac:	460b      	mov	r3, r1
 8006fae:	4620      	mov	r0, r4
 8006fb0:	4629      	mov	r1, r5
 8006fb2:	f7f9 f971 	bl	8000298 <__aeabi_dsub>
 8006fb6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006fb8:	f10b 33ff 	add.w	r3, fp, #4294967295
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	4606      	mov	r6, r0
 8006fc0:	460f      	mov	r7, r1
 8006fc2:	f040 81eb 	bne.w	800739c <__ieee754_pow+0x6c4>
 8006fc6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8007080 <__ieee754_pow+0x3a8>
 8006fca:	e9dd 4500 	ldrd	r4, r5, [sp]
 8006fce:	2400      	movs	r4, #0
 8006fd0:	4622      	mov	r2, r4
 8006fd2:	462b      	mov	r3, r5
 8006fd4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006fd8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006fdc:	f7f9 f95c 	bl	8000298 <__aeabi_dsub>
 8006fe0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006fe4:	f7f9 fb10 	bl	8000608 <__aeabi_dmul>
 8006fe8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006fec:	4680      	mov	r8, r0
 8006fee:	4689      	mov	r9, r1
 8006ff0:	4630      	mov	r0, r6
 8006ff2:	4639      	mov	r1, r7
 8006ff4:	f7f9 fb08 	bl	8000608 <__aeabi_dmul>
 8006ff8:	4602      	mov	r2, r0
 8006ffa:	460b      	mov	r3, r1
 8006ffc:	4640      	mov	r0, r8
 8006ffe:	4649      	mov	r1, r9
 8007000:	f7f9 f94c 	bl	800029c <__adddf3>
 8007004:	4622      	mov	r2, r4
 8007006:	462b      	mov	r3, r5
 8007008:	4680      	mov	r8, r0
 800700a:	4689      	mov	r9, r1
 800700c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007010:	f7f9 fafa 	bl	8000608 <__aeabi_dmul>
 8007014:	460b      	mov	r3, r1
 8007016:	4604      	mov	r4, r0
 8007018:	460d      	mov	r5, r1
 800701a:	4602      	mov	r2, r0
 800701c:	4649      	mov	r1, r9
 800701e:	4640      	mov	r0, r8
 8007020:	e9cd 4500 	strd	r4, r5, [sp]
 8007024:	f7f9 f93a 	bl	800029c <__adddf3>
 8007028:	4b1c      	ldr	r3, [pc, #112]	; (800709c <__ieee754_pow+0x3c4>)
 800702a:	4299      	cmp	r1, r3
 800702c:	4606      	mov	r6, r0
 800702e:	460f      	mov	r7, r1
 8007030:	468b      	mov	fp, r1
 8007032:	f340 82f7 	ble.w	8007624 <__ieee754_pow+0x94c>
 8007036:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800703a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800703e:	4303      	orrs	r3, r0
 8007040:	f000 81ea 	beq.w	8007418 <__ieee754_pow+0x740>
 8007044:	a310      	add	r3, pc, #64	; (adr r3, 8007088 <__ieee754_pow+0x3b0>)
 8007046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800704a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800704e:	f7f9 fadb 	bl	8000608 <__aeabi_dmul>
 8007052:	a30d      	add	r3, pc, #52	; (adr r3, 8007088 <__ieee754_pow+0x3b0>)
 8007054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007058:	e6d5      	b.n	8006e06 <__ieee754_pow+0x12e>
 800705a:	bf00      	nop
 800705c:	f3af 8000 	nop.w
 8007060:	60000000 	.word	0x60000000
 8007064:	3ff71547 	.word	0x3ff71547
 8007068:	f85ddf44 	.word	0xf85ddf44
 800706c:	3e54ae0b 	.word	0x3e54ae0b
 8007070:	55555555 	.word	0x55555555
 8007074:	3fd55555 	.word	0x3fd55555
 8007078:	652b82fe 	.word	0x652b82fe
 800707c:	3ff71547 	.word	0x3ff71547
 8007080:	00000000 	.word	0x00000000
 8007084:	bff00000 	.word	0xbff00000
 8007088:	8800759c 	.word	0x8800759c
 800708c:	7e37e43c 	.word	0x7e37e43c
 8007090:	3ff00000 	.word	0x3ff00000
 8007094:	3fd00000 	.word	0x3fd00000
 8007098:	3fe00000 	.word	0x3fe00000
 800709c:	408fffff 	.word	0x408fffff
 80070a0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80070a4:	f04f 0200 	mov.w	r2, #0
 80070a8:	da05      	bge.n	80070b6 <__ieee754_pow+0x3de>
 80070aa:	4bd3      	ldr	r3, [pc, #844]	; (80073f8 <__ieee754_pow+0x720>)
 80070ac:	f7f9 faac 	bl	8000608 <__aeabi_dmul>
 80070b0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80070b4:	460c      	mov	r4, r1
 80070b6:	1523      	asrs	r3, r4, #20
 80070b8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80070bc:	4413      	add	r3, r2
 80070be:	9309      	str	r3, [sp, #36]	; 0x24
 80070c0:	4bce      	ldr	r3, [pc, #824]	; (80073fc <__ieee754_pow+0x724>)
 80070c2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80070c6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80070ca:	429c      	cmp	r4, r3
 80070cc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80070d0:	dd08      	ble.n	80070e4 <__ieee754_pow+0x40c>
 80070d2:	4bcb      	ldr	r3, [pc, #812]	; (8007400 <__ieee754_pow+0x728>)
 80070d4:	429c      	cmp	r4, r3
 80070d6:	f340 815e 	ble.w	8007396 <__ieee754_pow+0x6be>
 80070da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070dc:	3301      	adds	r3, #1
 80070de:	9309      	str	r3, [sp, #36]	; 0x24
 80070e0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80070e4:	f04f 0a00 	mov.w	sl, #0
 80070e8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80070ec:	930c      	str	r3, [sp, #48]	; 0x30
 80070ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80070f0:	4bc4      	ldr	r3, [pc, #784]	; (8007404 <__ieee754_pow+0x72c>)
 80070f2:	4413      	add	r3, r2
 80070f4:	ed93 7b00 	vldr	d7, [r3]
 80070f8:	4629      	mov	r1, r5
 80070fa:	ec53 2b17 	vmov	r2, r3, d7
 80070fe:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007102:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007106:	f7f9 f8c7 	bl	8000298 <__aeabi_dsub>
 800710a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800710e:	4606      	mov	r6, r0
 8007110:	460f      	mov	r7, r1
 8007112:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007116:	f7f9 f8c1 	bl	800029c <__adddf3>
 800711a:	4602      	mov	r2, r0
 800711c:	460b      	mov	r3, r1
 800711e:	2000      	movs	r0, #0
 8007120:	49b9      	ldr	r1, [pc, #740]	; (8007408 <__ieee754_pow+0x730>)
 8007122:	f7f9 fb9b 	bl	800085c <__aeabi_ddiv>
 8007126:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800712a:	4602      	mov	r2, r0
 800712c:	460b      	mov	r3, r1
 800712e:	4630      	mov	r0, r6
 8007130:	4639      	mov	r1, r7
 8007132:	f7f9 fa69 	bl	8000608 <__aeabi_dmul>
 8007136:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800713a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800713e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007142:	2300      	movs	r3, #0
 8007144:	9302      	str	r3, [sp, #8]
 8007146:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800714a:	106d      	asrs	r5, r5, #1
 800714c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8007150:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8007154:	2200      	movs	r2, #0
 8007156:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800715a:	4640      	mov	r0, r8
 800715c:	4649      	mov	r1, r9
 800715e:	4614      	mov	r4, r2
 8007160:	461d      	mov	r5, r3
 8007162:	f7f9 fa51 	bl	8000608 <__aeabi_dmul>
 8007166:	4602      	mov	r2, r0
 8007168:	460b      	mov	r3, r1
 800716a:	4630      	mov	r0, r6
 800716c:	4639      	mov	r1, r7
 800716e:	f7f9 f893 	bl	8000298 <__aeabi_dsub>
 8007172:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007176:	4606      	mov	r6, r0
 8007178:	460f      	mov	r7, r1
 800717a:	4620      	mov	r0, r4
 800717c:	4629      	mov	r1, r5
 800717e:	f7f9 f88b 	bl	8000298 <__aeabi_dsub>
 8007182:	4602      	mov	r2, r0
 8007184:	460b      	mov	r3, r1
 8007186:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800718a:	f7f9 f885 	bl	8000298 <__aeabi_dsub>
 800718e:	4642      	mov	r2, r8
 8007190:	464b      	mov	r3, r9
 8007192:	f7f9 fa39 	bl	8000608 <__aeabi_dmul>
 8007196:	4602      	mov	r2, r0
 8007198:	460b      	mov	r3, r1
 800719a:	4630      	mov	r0, r6
 800719c:	4639      	mov	r1, r7
 800719e:	f7f9 f87b 	bl	8000298 <__aeabi_dsub>
 80071a2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80071a6:	f7f9 fa2f 	bl	8000608 <__aeabi_dmul>
 80071aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80071ae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80071b2:	4610      	mov	r0, r2
 80071b4:	4619      	mov	r1, r3
 80071b6:	f7f9 fa27 	bl	8000608 <__aeabi_dmul>
 80071ba:	a37b      	add	r3, pc, #492	; (adr r3, 80073a8 <__ieee754_pow+0x6d0>)
 80071bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071c0:	4604      	mov	r4, r0
 80071c2:	460d      	mov	r5, r1
 80071c4:	f7f9 fa20 	bl	8000608 <__aeabi_dmul>
 80071c8:	a379      	add	r3, pc, #484	; (adr r3, 80073b0 <__ieee754_pow+0x6d8>)
 80071ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ce:	f7f9 f865 	bl	800029c <__adddf3>
 80071d2:	4622      	mov	r2, r4
 80071d4:	462b      	mov	r3, r5
 80071d6:	f7f9 fa17 	bl	8000608 <__aeabi_dmul>
 80071da:	a377      	add	r3, pc, #476	; (adr r3, 80073b8 <__ieee754_pow+0x6e0>)
 80071dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071e0:	f7f9 f85c 	bl	800029c <__adddf3>
 80071e4:	4622      	mov	r2, r4
 80071e6:	462b      	mov	r3, r5
 80071e8:	f7f9 fa0e 	bl	8000608 <__aeabi_dmul>
 80071ec:	a374      	add	r3, pc, #464	; (adr r3, 80073c0 <__ieee754_pow+0x6e8>)
 80071ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f2:	f7f9 f853 	bl	800029c <__adddf3>
 80071f6:	4622      	mov	r2, r4
 80071f8:	462b      	mov	r3, r5
 80071fa:	f7f9 fa05 	bl	8000608 <__aeabi_dmul>
 80071fe:	a372      	add	r3, pc, #456	; (adr r3, 80073c8 <__ieee754_pow+0x6f0>)
 8007200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007204:	f7f9 f84a 	bl	800029c <__adddf3>
 8007208:	4622      	mov	r2, r4
 800720a:	462b      	mov	r3, r5
 800720c:	f7f9 f9fc 	bl	8000608 <__aeabi_dmul>
 8007210:	a36f      	add	r3, pc, #444	; (adr r3, 80073d0 <__ieee754_pow+0x6f8>)
 8007212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007216:	f7f9 f841 	bl	800029c <__adddf3>
 800721a:	4622      	mov	r2, r4
 800721c:	4606      	mov	r6, r0
 800721e:	460f      	mov	r7, r1
 8007220:	462b      	mov	r3, r5
 8007222:	4620      	mov	r0, r4
 8007224:	4629      	mov	r1, r5
 8007226:	f7f9 f9ef 	bl	8000608 <__aeabi_dmul>
 800722a:	4602      	mov	r2, r0
 800722c:	460b      	mov	r3, r1
 800722e:	4630      	mov	r0, r6
 8007230:	4639      	mov	r1, r7
 8007232:	f7f9 f9e9 	bl	8000608 <__aeabi_dmul>
 8007236:	4642      	mov	r2, r8
 8007238:	4604      	mov	r4, r0
 800723a:	460d      	mov	r5, r1
 800723c:	464b      	mov	r3, r9
 800723e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007242:	f7f9 f82b 	bl	800029c <__adddf3>
 8007246:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800724a:	f7f9 f9dd 	bl	8000608 <__aeabi_dmul>
 800724e:	4622      	mov	r2, r4
 8007250:	462b      	mov	r3, r5
 8007252:	f7f9 f823 	bl	800029c <__adddf3>
 8007256:	4642      	mov	r2, r8
 8007258:	4606      	mov	r6, r0
 800725a:	460f      	mov	r7, r1
 800725c:	464b      	mov	r3, r9
 800725e:	4640      	mov	r0, r8
 8007260:	4649      	mov	r1, r9
 8007262:	f7f9 f9d1 	bl	8000608 <__aeabi_dmul>
 8007266:	2200      	movs	r2, #0
 8007268:	4b68      	ldr	r3, [pc, #416]	; (800740c <__ieee754_pow+0x734>)
 800726a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800726e:	f7f9 f815 	bl	800029c <__adddf3>
 8007272:	4632      	mov	r2, r6
 8007274:	463b      	mov	r3, r7
 8007276:	f7f9 f811 	bl	800029c <__adddf3>
 800727a:	9802      	ldr	r0, [sp, #8]
 800727c:	460d      	mov	r5, r1
 800727e:	4604      	mov	r4, r0
 8007280:	4602      	mov	r2, r0
 8007282:	460b      	mov	r3, r1
 8007284:	4640      	mov	r0, r8
 8007286:	4649      	mov	r1, r9
 8007288:	f7f9 f9be 	bl	8000608 <__aeabi_dmul>
 800728c:	2200      	movs	r2, #0
 800728e:	4680      	mov	r8, r0
 8007290:	4689      	mov	r9, r1
 8007292:	4b5e      	ldr	r3, [pc, #376]	; (800740c <__ieee754_pow+0x734>)
 8007294:	4620      	mov	r0, r4
 8007296:	4629      	mov	r1, r5
 8007298:	f7f8 fffe 	bl	8000298 <__aeabi_dsub>
 800729c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80072a0:	f7f8 fffa 	bl	8000298 <__aeabi_dsub>
 80072a4:	4602      	mov	r2, r0
 80072a6:	460b      	mov	r3, r1
 80072a8:	4630      	mov	r0, r6
 80072aa:	4639      	mov	r1, r7
 80072ac:	f7f8 fff4 	bl	8000298 <__aeabi_dsub>
 80072b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80072b4:	f7f9 f9a8 	bl	8000608 <__aeabi_dmul>
 80072b8:	4622      	mov	r2, r4
 80072ba:	4606      	mov	r6, r0
 80072bc:	460f      	mov	r7, r1
 80072be:	462b      	mov	r3, r5
 80072c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80072c4:	f7f9 f9a0 	bl	8000608 <__aeabi_dmul>
 80072c8:	4602      	mov	r2, r0
 80072ca:	460b      	mov	r3, r1
 80072cc:	4630      	mov	r0, r6
 80072ce:	4639      	mov	r1, r7
 80072d0:	f7f8 ffe4 	bl	800029c <__adddf3>
 80072d4:	4606      	mov	r6, r0
 80072d6:	460f      	mov	r7, r1
 80072d8:	4602      	mov	r2, r0
 80072da:	460b      	mov	r3, r1
 80072dc:	4640      	mov	r0, r8
 80072de:	4649      	mov	r1, r9
 80072e0:	f7f8 ffdc 	bl	800029c <__adddf3>
 80072e4:	9802      	ldr	r0, [sp, #8]
 80072e6:	a33c      	add	r3, pc, #240	; (adr r3, 80073d8 <__ieee754_pow+0x700>)
 80072e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ec:	4604      	mov	r4, r0
 80072ee:	460d      	mov	r5, r1
 80072f0:	f7f9 f98a 	bl	8000608 <__aeabi_dmul>
 80072f4:	4642      	mov	r2, r8
 80072f6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80072fa:	464b      	mov	r3, r9
 80072fc:	4620      	mov	r0, r4
 80072fe:	4629      	mov	r1, r5
 8007300:	f7f8 ffca 	bl	8000298 <__aeabi_dsub>
 8007304:	4602      	mov	r2, r0
 8007306:	460b      	mov	r3, r1
 8007308:	4630      	mov	r0, r6
 800730a:	4639      	mov	r1, r7
 800730c:	f7f8 ffc4 	bl	8000298 <__aeabi_dsub>
 8007310:	a333      	add	r3, pc, #204	; (adr r3, 80073e0 <__ieee754_pow+0x708>)
 8007312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007316:	f7f9 f977 	bl	8000608 <__aeabi_dmul>
 800731a:	a333      	add	r3, pc, #204	; (adr r3, 80073e8 <__ieee754_pow+0x710>)
 800731c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007320:	4606      	mov	r6, r0
 8007322:	460f      	mov	r7, r1
 8007324:	4620      	mov	r0, r4
 8007326:	4629      	mov	r1, r5
 8007328:	f7f9 f96e 	bl	8000608 <__aeabi_dmul>
 800732c:	4602      	mov	r2, r0
 800732e:	460b      	mov	r3, r1
 8007330:	4630      	mov	r0, r6
 8007332:	4639      	mov	r1, r7
 8007334:	f7f8 ffb2 	bl	800029c <__adddf3>
 8007338:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800733a:	4b35      	ldr	r3, [pc, #212]	; (8007410 <__ieee754_pow+0x738>)
 800733c:	4413      	add	r3, r2
 800733e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007342:	f7f8 ffab 	bl	800029c <__adddf3>
 8007346:	4604      	mov	r4, r0
 8007348:	9809      	ldr	r0, [sp, #36]	; 0x24
 800734a:	460d      	mov	r5, r1
 800734c:	f7f9 f8f2 	bl	8000534 <__aeabi_i2d>
 8007350:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007352:	4b30      	ldr	r3, [pc, #192]	; (8007414 <__ieee754_pow+0x73c>)
 8007354:	4413      	add	r3, r2
 8007356:	e9d3 8900 	ldrd	r8, r9, [r3]
 800735a:	4606      	mov	r6, r0
 800735c:	460f      	mov	r7, r1
 800735e:	4622      	mov	r2, r4
 8007360:	462b      	mov	r3, r5
 8007362:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007366:	f7f8 ff99 	bl	800029c <__adddf3>
 800736a:	4642      	mov	r2, r8
 800736c:	464b      	mov	r3, r9
 800736e:	f7f8 ff95 	bl	800029c <__adddf3>
 8007372:	4632      	mov	r2, r6
 8007374:	463b      	mov	r3, r7
 8007376:	f7f8 ff91 	bl	800029c <__adddf3>
 800737a:	9802      	ldr	r0, [sp, #8]
 800737c:	4632      	mov	r2, r6
 800737e:	463b      	mov	r3, r7
 8007380:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007384:	f7f8 ff88 	bl	8000298 <__aeabi_dsub>
 8007388:	4642      	mov	r2, r8
 800738a:	464b      	mov	r3, r9
 800738c:	f7f8 ff84 	bl	8000298 <__aeabi_dsub>
 8007390:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007394:	e607      	b.n	8006fa6 <__ieee754_pow+0x2ce>
 8007396:	f04f 0a01 	mov.w	sl, #1
 800739a:	e6a5      	b.n	80070e8 <__ieee754_pow+0x410>
 800739c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80073f0 <__ieee754_pow+0x718>
 80073a0:	e613      	b.n	8006fca <__ieee754_pow+0x2f2>
 80073a2:	bf00      	nop
 80073a4:	f3af 8000 	nop.w
 80073a8:	4a454eef 	.word	0x4a454eef
 80073ac:	3fca7e28 	.word	0x3fca7e28
 80073b0:	93c9db65 	.word	0x93c9db65
 80073b4:	3fcd864a 	.word	0x3fcd864a
 80073b8:	a91d4101 	.word	0xa91d4101
 80073bc:	3fd17460 	.word	0x3fd17460
 80073c0:	518f264d 	.word	0x518f264d
 80073c4:	3fd55555 	.word	0x3fd55555
 80073c8:	db6fabff 	.word	0xdb6fabff
 80073cc:	3fdb6db6 	.word	0x3fdb6db6
 80073d0:	33333303 	.word	0x33333303
 80073d4:	3fe33333 	.word	0x3fe33333
 80073d8:	e0000000 	.word	0xe0000000
 80073dc:	3feec709 	.word	0x3feec709
 80073e0:	dc3a03fd 	.word	0xdc3a03fd
 80073e4:	3feec709 	.word	0x3feec709
 80073e8:	145b01f5 	.word	0x145b01f5
 80073ec:	be3e2fe0 	.word	0xbe3e2fe0
 80073f0:	00000000 	.word	0x00000000
 80073f4:	3ff00000 	.word	0x3ff00000
 80073f8:	43400000 	.word	0x43400000
 80073fc:	0003988e 	.word	0x0003988e
 8007400:	000bb679 	.word	0x000bb679
 8007404:	080080d0 	.word	0x080080d0
 8007408:	3ff00000 	.word	0x3ff00000
 800740c:	40080000 	.word	0x40080000
 8007410:	080080f0 	.word	0x080080f0
 8007414:	080080e0 	.word	0x080080e0
 8007418:	a3b4      	add	r3, pc, #720	; (adr r3, 80076ec <__ieee754_pow+0xa14>)
 800741a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800741e:	4640      	mov	r0, r8
 8007420:	4649      	mov	r1, r9
 8007422:	f7f8 ff3b 	bl	800029c <__adddf3>
 8007426:	4622      	mov	r2, r4
 8007428:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800742c:	462b      	mov	r3, r5
 800742e:	4630      	mov	r0, r6
 8007430:	4639      	mov	r1, r7
 8007432:	f7f8 ff31 	bl	8000298 <__aeabi_dsub>
 8007436:	4602      	mov	r2, r0
 8007438:	460b      	mov	r3, r1
 800743a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800743e:	f7f9 fb73 	bl	8000b28 <__aeabi_dcmpgt>
 8007442:	2800      	cmp	r0, #0
 8007444:	f47f adfe 	bne.w	8007044 <__ieee754_pow+0x36c>
 8007448:	4aa3      	ldr	r2, [pc, #652]	; (80076d8 <__ieee754_pow+0xa00>)
 800744a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800744e:	4293      	cmp	r3, r2
 8007450:	f340 810a 	ble.w	8007668 <__ieee754_pow+0x990>
 8007454:	151b      	asrs	r3, r3, #20
 8007456:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800745a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800745e:	fa4a f303 	asr.w	r3, sl, r3
 8007462:	445b      	add	r3, fp
 8007464:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8007468:	4e9c      	ldr	r6, [pc, #624]	; (80076dc <__ieee754_pow+0xa04>)
 800746a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800746e:	4116      	asrs	r6, r2
 8007470:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8007474:	2000      	movs	r0, #0
 8007476:	ea23 0106 	bic.w	r1, r3, r6
 800747a:	f1c2 0214 	rsb	r2, r2, #20
 800747e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8007482:	fa4a fa02 	asr.w	sl, sl, r2
 8007486:	f1bb 0f00 	cmp.w	fp, #0
 800748a:	4602      	mov	r2, r0
 800748c:	460b      	mov	r3, r1
 800748e:	4620      	mov	r0, r4
 8007490:	4629      	mov	r1, r5
 8007492:	bfb8      	it	lt
 8007494:	f1ca 0a00 	rsblt	sl, sl, #0
 8007498:	f7f8 fefe 	bl	8000298 <__aeabi_dsub>
 800749c:	e9cd 0100 	strd	r0, r1, [sp]
 80074a0:	4642      	mov	r2, r8
 80074a2:	464b      	mov	r3, r9
 80074a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80074a8:	f7f8 fef8 	bl	800029c <__adddf3>
 80074ac:	2000      	movs	r0, #0
 80074ae:	a378      	add	r3, pc, #480	; (adr r3, 8007690 <__ieee754_pow+0x9b8>)
 80074b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074b4:	4604      	mov	r4, r0
 80074b6:	460d      	mov	r5, r1
 80074b8:	f7f9 f8a6 	bl	8000608 <__aeabi_dmul>
 80074bc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80074c0:	4606      	mov	r6, r0
 80074c2:	460f      	mov	r7, r1
 80074c4:	4620      	mov	r0, r4
 80074c6:	4629      	mov	r1, r5
 80074c8:	f7f8 fee6 	bl	8000298 <__aeabi_dsub>
 80074cc:	4602      	mov	r2, r0
 80074ce:	460b      	mov	r3, r1
 80074d0:	4640      	mov	r0, r8
 80074d2:	4649      	mov	r1, r9
 80074d4:	f7f8 fee0 	bl	8000298 <__aeabi_dsub>
 80074d8:	a36f      	add	r3, pc, #444	; (adr r3, 8007698 <__ieee754_pow+0x9c0>)
 80074da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074de:	f7f9 f893 	bl	8000608 <__aeabi_dmul>
 80074e2:	a36f      	add	r3, pc, #444	; (adr r3, 80076a0 <__ieee754_pow+0x9c8>)
 80074e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074e8:	4680      	mov	r8, r0
 80074ea:	4689      	mov	r9, r1
 80074ec:	4620      	mov	r0, r4
 80074ee:	4629      	mov	r1, r5
 80074f0:	f7f9 f88a 	bl	8000608 <__aeabi_dmul>
 80074f4:	4602      	mov	r2, r0
 80074f6:	460b      	mov	r3, r1
 80074f8:	4640      	mov	r0, r8
 80074fa:	4649      	mov	r1, r9
 80074fc:	f7f8 fece 	bl	800029c <__adddf3>
 8007500:	4604      	mov	r4, r0
 8007502:	460d      	mov	r5, r1
 8007504:	4602      	mov	r2, r0
 8007506:	460b      	mov	r3, r1
 8007508:	4630      	mov	r0, r6
 800750a:	4639      	mov	r1, r7
 800750c:	f7f8 fec6 	bl	800029c <__adddf3>
 8007510:	4632      	mov	r2, r6
 8007512:	463b      	mov	r3, r7
 8007514:	4680      	mov	r8, r0
 8007516:	4689      	mov	r9, r1
 8007518:	f7f8 febe 	bl	8000298 <__aeabi_dsub>
 800751c:	4602      	mov	r2, r0
 800751e:	460b      	mov	r3, r1
 8007520:	4620      	mov	r0, r4
 8007522:	4629      	mov	r1, r5
 8007524:	f7f8 feb8 	bl	8000298 <__aeabi_dsub>
 8007528:	4642      	mov	r2, r8
 800752a:	4606      	mov	r6, r0
 800752c:	460f      	mov	r7, r1
 800752e:	464b      	mov	r3, r9
 8007530:	4640      	mov	r0, r8
 8007532:	4649      	mov	r1, r9
 8007534:	f7f9 f868 	bl	8000608 <__aeabi_dmul>
 8007538:	a35b      	add	r3, pc, #364	; (adr r3, 80076a8 <__ieee754_pow+0x9d0>)
 800753a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800753e:	4604      	mov	r4, r0
 8007540:	460d      	mov	r5, r1
 8007542:	f7f9 f861 	bl	8000608 <__aeabi_dmul>
 8007546:	a35a      	add	r3, pc, #360	; (adr r3, 80076b0 <__ieee754_pow+0x9d8>)
 8007548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800754c:	f7f8 fea4 	bl	8000298 <__aeabi_dsub>
 8007550:	4622      	mov	r2, r4
 8007552:	462b      	mov	r3, r5
 8007554:	f7f9 f858 	bl	8000608 <__aeabi_dmul>
 8007558:	a357      	add	r3, pc, #348	; (adr r3, 80076b8 <__ieee754_pow+0x9e0>)
 800755a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800755e:	f7f8 fe9d 	bl	800029c <__adddf3>
 8007562:	4622      	mov	r2, r4
 8007564:	462b      	mov	r3, r5
 8007566:	f7f9 f84f 	bl	8000608 <__aeabi_dmul>
 800756a:	a355      	add	r3, pc, #340	; (adr r3, 80076c0 <__ieee754_pow+0x9e8>)
 800756c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007570:	f7f8 fe92 	bl	8000298 <__aeabi_dsub>
 8007574:	4622      	mov	r2, r4
 8007576:	462b      	mov	r3, r5
 8007578:	f7f9 f846 	bl	8000608 <__aeabi_dmul>
 800757c:	a352      	add	r3, pc, #328	; (adr r3, 80076c8 <__ieee754_pow+0x9f0>)
 800757e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007582:	f7f8 fe8b 	bl	800029c <__adddf3>
 8007586:	4622      	mov	r2, r4
 8007588:	462b      	mov	r3, r5
 800758a:	f7f9 f83d 	bl	8000608 <__aeabi_dmul>
 800758e:	4602      	mov	r2, r0
 8007590:	460b      	mov	r3, r1
 8007592:	4640      	mov	r0, r8
 8007594:	4649      	mov	r1, r9
 8007596:	f7f8 fe7f 	bl	8000298 <__aeabi_dsub>
 800759a:	4604      	mov	r4, r0
 800759c:	460d      	mov	r5, r1
 800759e:	4602      	mov	r2, r0
 80075a0:	460b      	mov	r3, r1
 80075a2:	4640      	mov	r0, r8
 80075a4:	4649      	mov	r1, r9
 80075a6:	f7f9 f82f 	bl	8000608 <__aeabi_dmul>
 80075aa:	2200      	movs	r2, #0
 80075ac:	e9cd 0100 	strd	r0, r1, [sp]
 80075b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80075b4:	4620      	mov	r0, r4
 80075b6:	4629      	mov	r1, r5
 80075b8:	f7f8 fe6e 	bl	8000298 <__aeabi_dsub>
 80075bc:	4602      	mov	r2, r0
 80075be:	460b      	mov	r3, r1
 80075c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80075c4:	f7f9 f94a 	bl	800085c <__aeabi_ddiv>
 80075c8:	4632      	mov	r2, r6
 80075ca:	4604      	mov	r4, r0
 80075cc:	460d      	mov	r5, r1
 80075ce:	463b      	mov	r3, r7
 80075d0:	4640      	mov	r0, r8
 80075d2:	4649      	mov	r1, r9
 80075d4:	f7f9 f818 	bl	8000608 <__aeabi_dmul>
 80075d8:	4632      	mov	r2, r6
 80075da:	463b      	mov	r3, r7
 80075dc:	f7f8 fe5e 	bl	800029c <__adddf3>
 80075e0:	4602      	mov	r2, r0
 80075e2:	460b      	mov	r3, r1
 80075e4:	4620      	mov	r0, r4
 80075e6:	4629      	mov	r1, r5
 80075e8:	f7f8 fe56 	bl	8000298 <__aeabi_dsub>
 80075ec:	4642      	mov	r2, r8
 80075ee:	464b      	mov	r3, r9
 80075f0:	f7f8 fe52 	bl	8000298 <__aeabi_dsub>
 80075f4:	4602      	mov	r2, r0
 80075f6:	460b      	mov	r3, r1
 80075f8:	2000      	movs	r0, #0
 80075fa:	4939      	ldr	r1, [pc, #228]	; (80076e0 <__ieee754_pow+0xa08>)
 80075fc:	f7f8 fe4c 	bl	8000298 <__aeabi_dsub>
 8007600:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8007604:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8007608:	4602      	mov	r2, r0
 800760a:	460b      	mov	r3, r1
 800760c:	da2f      	bge.n	800766e <__ieee754_pow+0x996>
 800760e:	4650      	mov	r0, sl
 8007610:	ec43 2b10 	vmov	d0, r2, r3
 8007614:	f000 f9c0 	bl	8007998 <scalbn>
 8007618:	ec51 0b10 	vmov	r0, r1, d0
 800761c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007620:	f7ff bbf1 	b.w	8006e06 <__ieee754_pow+0x12e>
 8007624:	4b2f      	ldr	r3, [pc, #188]	; (80076e4 <__ieee754_pow+0xa0c>)
 8007626:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800762a:	429e      	cmp	r6, r3
 800762c:	f77f af0c 	ble.w	8007448 <__ieee754_pow+0x770>
 8007630:	4b2d      	ldr	r3, [pc, #180]	; (80076e8 <__ieee754_pow+0xa10>)
 8007632:	440b      	add	r3, r1
 8007634:	4303      	orrs	r3, r0
 8007636:	d00b      	beq.n	8007650 <__ieee754_pow+0x978>
 8007638:	a325      	add	r3, pc, #148	; (adr r3, 80076d0 <__ieee754_pow+0x9f8>)
 800763a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800763e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007642:	f7f8 ffe1 	bl	8000608 <__aeabi_dmul>
 8007646:	a322      	add	r3, pc, #136	; (adr r3, 80076d0 <__ieee754_pow+0x9f8>)
 8007648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800764c:	f7ff bbdb 	b.w	8006e06 <__ieee754_pow+0x12e>
 8007650:	4622      	mov	r2, r4
 8007652:	462b      	mov	r3, r5
 8007654:	f7f8 fe20 	bl	8000298 <__aeabi_dsub>
 8007658:	4642      	mov	r2, r8
 800765a:	464b      	mov	r3, r9
 800765c:	f7f9 fa5a 	bl	8000b14 <__aeabi_dcmpge>
 8007660:	2800      	cmp	r0, #0
 8007662:	f43f aef1 	beq.w	8007448 <__ieee754_pow+0x770>
 8007666:	e7e7      	b.n	8007638 <__ieee754_pow+0x960>
 8007668:	f04f 0a00 	mov.w	sl, #0
 800766c:	e718      	b.n	80074a0 <__ieee754_pow+0x7c8>
 800766e:	4621      	mov	r1, r4
 8007670:	e7d4      	b.n	800761c <__ieee754_pow+0x944>
 8007672:	2000      	movs	r0, #0
 8007674:	491a      	ldr	r1, [pc, #104]	; (80076e0 <__ieee754_pow+0xa08>)
 8007676:	f7ff bb8f 	b.w	8006d98 <__ieee754_pow+0xc0>
 800767a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800767e:	f7ff bb8b 	b.w	8006d98 <__ieee754_pow+0xc0>
 8007682:	4630      	mov	r0, r6
 8007684:	4639      	mov	r1, r7
 8007686:	f7ff bb87 	b.w	8006d98 <__ieee754_pow+0xc0>
 800768a:	4693      	mov	fp, r2
 800768c:	f7ff bb98 	b.w	8006dc0 <__ieee754_pow+0xe8>
 8007690:	00000000 	.word	0x00000000
 8007694:	3fe62e43 	.word	0x3fe62e43
 8007698:	fefa39ef 	.word	0xfefa39ef
 800769c:	3fe62e42 	.word	0x3fe62e42
 80076a0:	0ca86c39 	.word	0x0ca86c39
 80076a4:	be205c61 	.word	0xbe205c61
 80076a8:	72bea4d0 	.word	0x72bea4d0
 80076ac:	3e663769 	.word	0x3e663769
 80076b0:	c5d26bf1 	.word	0xc5d26bf1
 80076b4:	3ebbbd41 	.word	0x3ebbbd41
 80076b8:	af25de2c 	.word	0xaf25de2c
 80076bc:	3f11566a 	.word	0x3f11566a
 80076c0:	16bebd93 	.word	0x16bebd93
 80076c4:	3f66c16c 	.word	0x3f66c16c
 80076c8:	5555553e 	.word	0x5555553e
 80076cc:	3fc55555 	.word	0x3fc55555
 80076d0:	c2f8f359 	.word	0xc2f8f359
 80076d4:	01a56e1f 	.word	0x01a56e1f
 80076d8:	3fe00000 	.word	0x3fe00000
 80076dc:	000fffff 	.word	0x000fffff
 80076e0:	3ff00000 	.word	0x3ff00000
 80076e4:	4090cbff 	.word	0x4090cbff
 80076e8:	3f6f3400 	.word	0x3f6f3400
 80076ec:	652b82fe 	.word	0x652b82fe
 80076f0:	3c971547 	.word	0x3c971547

080076f4 <__ieee754_sqrt>:
 80076f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076f8:	4955      	ldr	r1, [pc, #340]	; (8007850 <__ieee754_sqrt+0x15c>)
 80076fa:	ec55 4b10 	vmov	r4, r5, d0
 80076fe:	43a9      	bics	r1, r5
 8007700:	462b      	mov	r3, r5
 8007702:	462a      	mov	r2, r5
 8007704:	d112      	bne.n	800772c <__ieee754_sqrt+0x38>
 8007706:	ee10 2a10 	vmov	r2, s0
 800770a:	ee10 0a10 	vmov	r0, s0
 800770e:	4629      	mov	r1, r5
 8007710:	f7f8 ff7a 	bl	8000608 <__aeabi_dmul>
 8007714:	4602      	mov	r2, r0
 8007716:	460b      	mov	r3, r1
 8007718:	4620      	mov	r0, r4
 800771a:	4629      	mov	r1, r5
 800771c:	f7f8 fdbe 	bl	800029c <__adddf3>
 8007720:	4604      	mov	r4, r0
 8007722:	460d      	mov	r5, r1
 8007724:	ec45 4b10 	vmov	d0, r4, r5
 8007728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800772c:	2d00      	cmp	r5, #0
 800772e:	ee10 0a10 	vmov	r0, s0
 8007732:	4621      	mov	r1, r4
 8007734:	dc0f      	bgt.n	8007756 <__ieee754_sqrt+0x62>
 8007736:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800773a:	4330      	orrs	r0, r6
 800773c:	d0f2      	beq.n	8007724 <__ieee754_sqrt+0x30>
 800773e:	b155      	cbz	r5, 8007756 <__ieee754_sqrt+0x62>
 8007740:	ee10 2a10 	vmov	r2, s0
 8007744:	4620      	mov	r0, r4
 8007746:	4629      	mov	r1, r5
 8007748:	f7f8 fda6 	bl	8000298 <__aeabi_dsub>
 800774c:	4602      	mov	r2, r0
 800774e:	460b      	mov	r3, r1
 8007750:	f7f9 f884 	bl	800085c <__aeabi_ddiv>
 8007754:	e7e4      	b.n	8007720 <__ieee754_sqrt+0x2c>
 8007756:	151b      	asrs	r3, r3, #20
 8007758:	d073      	beq.n	8007842 <__ieee754_sqrt+0x14e>
 800775a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800775e:	07dd      	lsls	r5, r3, #31
 8007760:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8007764:	bf48      	it	mi
 8007766:	0fc8      	lsrmi	r0, r1, #31
 8007768:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800776c:	bf44      	itt	mi
 800776e:	0049      	lslmi	r1, r1, #1
 8007770:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8007774:	2500      	movs	r5, #0
 8007776:	1058      	asrs	r0, r3, #1
 8007778:	0fcb      	lsrs	r3, r1, #31
 800777a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800777e:	0049      	lsls	r1, r1, #1
 8007780:	2316      	movs	r3, #22
 8007782:	462c      	mov	r4, r5
 8007784:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8007788:	19a7      	adds	r7, r4, r6
 800778a:	4297      	cmp	r7, r2
 800778c:	bfde      	ittt	le
 800778e:	19bc      	addle	r4, r7, r6
 8007790:	1bd2      	suble	r2, r2, r7
 8007792:	19ad      	addle	r5, r5, r6
 8007794:	0fcf      	lsrs	r7, r1, #31
 8007796:	3b01      	subs	r3, #1
 8007798:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800779c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80077a0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80077a4:	d1f0      	bne.n	8007788 <__ieee754_sqrt+0x94>
 80077a6:	f04f 0c20 	mov.w	ip, #32
 80077aa:	469e      	mov	lr, r3
 80077ac:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80077b0:	42a2      	cmp	r2, r4
 80077b2:	eb06 070e 	add.w	r7, r6, lr
 80077b6:	dc02      	bgt.n	80077be <__ieee754_sqrt+0xca>
 80077b8:	d112      	bne.n	80077e0 <__ieee754_sqrt+0xec>
 80077ba:	428f      	cmp	r7, r1
 80077bc:	d810      	bhi.n	80077e0 <__ieee754_sqrt+0xec>
 80077be:	2f00      	cmp	r7, #0
 80077c0:	eb07 0e06 	add.w	lr, r7, r6
 80077c4:	da42      	bge.n	800784c <__ieee754_sqrt+0x158>
 80077c6:	f1be 0f00 	cmp.w	lr, #0
 80077ca:	db3f      	blt.n	800784c <__ieee754_sqrt+0x158>
 80077cc:	f104 0801 	add.w	r8, r4, #1
 80077d0:	1b12      	subs	r2, r2, r4
 80077d2:	428f      	cmp	r7, r1
 80077d4:	bf88      	it	hi
 80077d6:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80077da:	1bc9      	subs	r1, r1, r7
 80077dc:	4433      	add	r3, r6
 80077de:	4644      	mov	r4, r8
 80077e0:	0052      	lsls	r2, r2, #1
 80077e2:	f1bc 0c01 	subs.w	ip, ip, #1
 80077e6:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 80077ea:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80077ee:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80077f2:	d1dd      	bne.n	80077b0 <__ieee754_sqrt+0xbc>
 80077f4:	430a      	orrs	r2, r1
 80077f6:	d006      	beq.n	8007806 <__ieee754_sqrt+0x112>
 80077f8:	1c5c      	adds	r4, r3, #1
 80077fa:	bf13      	iteet	ne
 80077fc:	3301      	addne	r3, #1
 80077fe:	3501      	addeq	r5, #1
 8007800:	4663      	moveq	r3, ip
 8007802:	f023 0301 	bicne.w	r3, r3, #1
 8007806:	106a      	asrs	r2, r5, #1
 8007808:	085b      	lsrs	r3, r3, #1
 800780a:	07e9      	lsls	r1, r5, #31
 800780c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8007810:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8007814:	bf48      	it	mi
 8007816:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800781a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800781e:	461c      	mov	r4, r3
 8007820:	e780      	b.n	8007724 <__ieee754_sqrt+0x30>
 8007822:	0aca      	lsrs	r2, r1, #11
 8007824:	3815      	subs	r0, #21
 8007826:	0549      	lsls	r1, r1, #21
 8007828:	2a00      	cmp	r2, #0
 800782a:	d0fa      	beq.n	8007822 <__ieee754_sqrt+0x12e>
 800782c:	02d6      	lsls	r6, r2, #11
 800782e:	d50a      	bpl.n	8007846 <__ieee754_sqrt+0x152>
 8007830:	f1c3 0420 	rsb	r4, r3, #32
 8007834:	fa21 f404 	lsr.w	r4, r1, r4
 8007838:	1e5d      	subs	r5, r3, #1
 800783a:	4099      	lsls	r1, r3
 800783c:	4322      	orrs	r2, r4
 800783e:	1b43      	subs	r3, r0, r5
 8007840:	e78b      	b.n	800775a <__ieee754_sqrt+0x66>
 8007842:	4618      	mov	r0, r3
 8007844:	e7f0      	b.n	8007828 <__ieee754_sqrt+0x134>
 8007846:	0052      	lsls	r2, r2, #1
 8007848:	3301      	adds	r3, #1
 800784a:	e7ef      	b.n	800782c <__ieee754_sqrt+0x138>
 800784c:	46a0      	mov	r8, r4
 800784e:	e7bf      	b.n	80077d0 <__ieee754_sqrt+0xdc>
 8007850:	7ff00000 	.word	0x7ff00000

08007854 <fabs>:
 8007854:	ec51 0b10 	vmov	r0, r1, d0
 8007858:	ee10 2a10 	vmov	r2, s0
 800785c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007860:	ec43 2b10 	vmov	d0, r2, r3
 8007864:	4770      	bx	lr

08007866 <finite>:
 8007866:	ee10 3a90 	vmov	r3, s1
 800786a:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800786e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8007872:	0fc0      	lsrs	r0, r0, #31
 8007874:	4770      	bx	lr

08007876 <matherr>:
 8007876:	2000      	movs	r0, #0
 8007878:	4770      	bx	lr
 800787a:	0000      	movs	r0, r0
 800787c:	0000      	movs	r0, r0
	...

08007880 <nan>:
 8007880:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007888 <nan+0x8>
 8007884:	4770      	bx	lr
 8007886:	bf00      	nop
 8007888:	00000000 	.word	0x00000000
 800788c:	7ff80000 	.word	0x7ff80000

08007890 <rint>:
 8007890:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007892:	ec51 0b10 	vmov	r0, r1, d0
 8007896:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800789a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800789e:	2e13      	cmp	r6, #19
 80078a0:	460b      	mov	r3, r1
 80078a2:	ee10 4a10 	vmov	r4, s0
 80078a6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80078aa:	dc56      	bgt.n	800795a <rint+0xca>
 80078ac:	2e00      	cmp	r6, #0
 80078ae:	da2b      	bge.n	8007908 <rint+0x78>
 80078b0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80078b4:	4302      	orrs	r2, r0
 80078b6:	d023      	beq.n	8007900 <rint+0x70>
 80078b8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80078bc:	4302      	orrs	r2, r0
 80078be:	4254      	negs	r4, r2
 80078c0:	4314      	orrs	r4, r2
 80078c2:	0c4b      	lsrs	r3, r1, #17
 80078c4:	0b24      	lsrs	r4, r4, #12
 80078c6:	045b      	lsls	r3, r3, #17
 80078c8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80078cc:	ea44 0103 	orr.w	r1, r4, r3
 80078d0:	460b      	mov	r3, r1
 80078d2:	492f      	ldr	r1, [pc, #188]	; (8007990 <rint+0x100>)
 80078d4:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 80078d8:	e9d1 6700 	ldrd	r6, r7, [r1]
 80078dc:	4602      	mov	r2, r0
 80078de:	4639      	mov	r1, r7
 80078e0:	4630      	mov	r0, r6
 80078e2:	f7f8 fcdb 	bl	800029c <__adddf3>
 80078e6:	e9cd 0100 	strd	r0, r1, [sp]
 80078ea:	463b      	mov	r3, r7
 80078ec:	4632      	mov	r2, r6
 80078ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 80078f2:	f7f8 fcd1 	bl	8000298 <__aeabi_dsub>
 80078f6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80078fa:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80078fe:	4639      	mov	r1, r7
 8007900:	ec41 0b10 	vmov	d0, r0, r1
 8007904:	b003      	add	sp, #12
 8007906:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007908:	4a22      	ldr	r2, [pc, #136]	; (8007994 <rint+0x104>)
 800790a:	4132      	asrs	r2, r6
 800790c:	ea01 0702 	and.w	r7, r1, r2
 8007910:	4307      	orrs	r7, r0
 8007912:	d0f5      	beq.n	8007900 <rint+0x70>
 8007914:	0852      	lsrs	r2, r2, #1
 8007916:	4011      	ands	r1, r2
 8007918:	430c      	orrs	r4, r1
 800791a:	d00b      	beq.n	8007934 <rint+0xa4>
 800791c:	ea23 0202 	bic.w	r2, r3, r2
 8007920:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007924:	2e13      	cmp	r6, #19
 8007926:	fa43 f306 	asr.w	r3, r3, r6
 800792a:	bf0c      	ite	eq
 800792c:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8007930:	2400      	movne	r4, #0
 8007932:	4313      	orrs	r3, r2
 8007934:	4916      	ldr	r1, [pc, #88]	; (8007990 <rint+0x100>)
 8007936:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800793a:	4622      	mov	r2, r4
 800793c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007940:	4620      	mov	r0, r4
 8007942:	4629      	mov	r1, r5
 8007944:	f7f8 fcaa 	bl	800029c <__adddf3>
 8007948:	e9cd 0100 	strd	r0, r1, [sp]
 800794c:	4622      	mov	r2, r4
 800794e:	462b      	mov	r3, r5
 8007950:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007954:	f7f8 fca0 	bl	8000298 <__aeabi_dsub>
 8007958:	e7d2      	b.n	8007900 <rint+0x70>
 800795a:	2e33      	cmp	r6, #51	; 0x33
 800795c:	dd07      	ble.n	800796e <rint+0xde>
 800795e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007962:	d1cd      	bne.n	8007900 <rint+0x70>
 8007964:	ee10 2a10 	vmov	r2, s0
 8007968:	f7f8 fc98 	bl	800029c <__adddf3>
 800796c:	e7c8      	b.n	8007900 <rint+0x70>
 800796e:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8007972:	f04f 32ff 	mov.w	r2, #4294967295
 8007976:	40f2      	lsrs	r2, r6
 8007978:	4210      	tst	r0, r2
 800797a:	d0c1      	beq.n	8007900 <rint+0x70>
 800797c:	0852      	lsrs	r2, r2, #1
 800797e:	4210      	tst	r0, r2
 8007980:	bf1f      	itttt	ne
 8007982:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8007986:	ea20 0202 	bicne.w	r2, r0, r2
 800798a:	4134      	asrne	r4, r6
 800798c:	4314      	orrne	r4, r2
 800798e:	e7d1      	b.n	8007934 <rint+0xa4>
 8007990:	08008100 	.word	0x08008100
 8007994:	000fffff 	.word	0x000fffff

08007998 <scalbn>:
 8007998:	b570      	push	{r4, r5, r6, lr}
 800799a:	ec55 4b10 	vmov	r4, r5, d0
 800799e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80079a2:	4606      	mov	r6, r0
 80079a4:	462b      	mov	r3, r5
 80079a6:	b9aa      	cbnz	r2, 80079d4 <scalbn+0x3c>
 80079a8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80079ac:	4323      	orrs	r3, r4
 80079ae:	d03b      	beq.n	8007a28 <scalbn+0x90>
 80079b0:	4b31      	ldr	r3, [pc, #196]	; (8007a78 <scalbn+0xe0>)
 80079b2:	4629      	mov	r1, r5
 80079b4:	2200      	movs	r2, #0
 80079b6:	ee10 0a10 	vmov	r0, s0
 80079ba:	f7f8 fe25 	bl	8000608 <__aeabi_dmul>
 80079be:	4b2f      	ldr	r3, [pc, #188]	; (8007a7c <scalbn+0xe4>)
 80079c0:	429e      	cmp	r6, r3
 80079c2:	4604      	mov	r4, r0
 80079c4:	460d      	mov	r5, r1
 80079c6:	da12      	bge.n	80079ee <scalbn+0x56>
 80079c8:	a327      	add	r3, pc, #156	; (adr r3, 8007a68 <scalbn+0xd0>)
 80079ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ce:	f7f8 fe1b 	bl	8000608 <__aeabi_dmul>
 80079d2:	e009      	b.n	80079e8 <scalbn+0x50>
 80079d4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80079d8:	428a      	cmp	r2, r1
 80079da:	d10c      	bne.n	80079f6 <scalbn+0x5e>
 80079dc:	ee10 2a10 	vmov	r2, s0
 80079e0:	4620      	mov	r0, r4
 80079e2:	4629      	mov	r1, r5
 80079e4:	f7f8 fc5a 	bl	800029c <__adddf3>
 80079e8:	4604      	mov	r4, r0
 80079ea:	460d      	mov	r5, r1
 80079ec:	e01c      	b.n	8007a28 <scalbn+0x90>
 80079ee:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80079f2:	460b      	mov	r3, r1
 80079f4:	3a36      	subs	r2, #54	; 0x36
 80079f6:	4432      	add	r2, r6
 80079f8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80079fc:	428a      	cmp	r2, r1
 80079fe:	dd0b      	ble.n	8007a18 <scalbn+0x80>
 8007a00:	ec45 4b11 	vmov	d1, r4, r5
 8007a04:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8007a70 <scalbn+0xd8>
 8007a08:	f000 f9f0 	bl	8007dec <copysign>
 8007a0c:	a318      	add	r3, pc, #96	; (adr r3, 8007a70 <scalbn+0xd8>)
 8007a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a12:	ec51 0b10 	vmov	r0, r1, d0
 8007a16:	e7da      	b.n	80079ce <scalbn+0x36>
 8007a18:	2a00      	cmp	r2, #0
 8007a1a:	dd08      	ble.n	8007a2e <scalbn+0x96>
 8007a1c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007a20:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007a24:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007a28:	ec45 4b10 	vmov	d0, r4, r5
 8007a2c:	bd70      	pop	{r4, r5, r6, pc}
 8007a2e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007a32:	da0d      	bge.n	8007a50 <scalbn+0xb8>
 8007a34:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007a38:	429e      	cmp	r6, r3
 8007a3a:	ec45 4b11 	vmov	d1, r4, r5
 8007a3e:	dce1      	bgt.n	8007a04 <scalbn+0x6c>
 8007a40:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8007a68 <scalbn+0xd0>
 8007a44:	f000 f9d2 	bl	8007dec <copysign>
 8007a48:	a307      	add	r3, pc, #28	; (adr r3, 8007a68 <scalbn+0xd0>)
 8007a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a4e:	e7e0      	b.n	8007a12 <scalbn+0x7a>
 8007a50:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007a54:	3236      	adds	r2, #54	; 0x36
 8007a56:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007a5a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007a5e:	4620      	mov	r0, r4
 8007a60:	4629      	mov	r1, r5
 8007a62:	2200      	movs	r2, #0
 8007a64:	4b06      	ldr	r3, [pc, #24]	; (8007a80 <scalbn+0xe8>)
 8007a66:	e7b2      	b.n	80079ce <scalbn+0x36>
 8007a68:	c2f8f359 	.word	0xc2f8f359
 8007a6c:	01a56e1f 	.word	0x01a56e1f
 8007a70:	8800759c 	.word	0x8800759c
 8007a74:	7e37e43c 	.word	0x7e37e43c
 8007a78:	43500000 	.word	0x43500000
 8007a7c:	ffff3cb0 	.word	0xffff3cb0
 8007a80:	3c900000 	.word	0x3c900000
 8007a84:	00000000 	.word	0x00000000

08007a88 <__ieee754_log>:
 8007a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a8c:	ec51 0b10 	vmov	r0, r1, d0
 8007a90:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8007a94:	b087      	sub	sp, #28
 8007a96:	460d      	mov	r5, r1
 8007a98:	da27      	bge.n	8007aea <__ieee754_log+0x62>
 8007a9a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007a9e:	4303      	orrs	r3, r0
 8007aa0:	ee10 2a10 	vmov	r2, s0
 8007aa4:	d10a      	bne.n	8007abc <__ieee754_log+0x34>
 8007aa6:	49cc      	ldr	r1, [pc, #816]	; (8007dd8 <__ieee754_log+0x350>)
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	2300      	movs	r3, #0
 8007aac:	2000      	movs	r0, #0
 8007aae:	f7f8 fed5 	bl	800085c <__aeabi_ddiv>
 8007ab2:	ec41 0b10 	vmov	d0, r0, r1
 8007ab6:	b007      	add	sp, #28
 8007ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007abc:	2900      	cmp	r1, #0
 8007abe:	da05      	bge.n	8007acc <__ieee754_log+0x44>
 8007ac0:	460b      	mov	r3, r1
 8007ac2:	f7f8 fbe9 	bl	8000298 <__aeabi_dsub>
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	2300      	movs	r3, #0
 8007aca:	e7f0      	b.n	8007aae <__ieee754_log+0x26>
 8007acc:	4bc3      	ldr	r3, [pc, #780]	; (8007ddc <__ieee754_log+0x354>)
 8007ace:	2200      	movs	r2, #0
 8007ad0:	f7f8 fd9a 	bl	8000608 <__aeabi_dmul>
 8007ad4:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8007ad8:	460d      	mov	r5, r1
 8007ada:	4ac1      	ldr	r2, [pc, #772]	; (8007de0 <__ieee754_log+0x358>)
 8007adc:	4295      	cmp	r5, r2
 8007ade:	dd06      	ble.n	8007aee <__ieee754_log+0x66>
 8007ae0:	4602      	mov	r2, r0
 8007ae2:	460b      	mov	r3, r1
 8007ae4:	f7f8 fbda 	bl	800029c <__adddf3>
 8007ae8:	e7e3      	b.n	8007ab2 <__ieee754_log+0x2a>
 8007aea:	2300      	movs	r3, #0
 8007aec:	e7f5      	b.n	8007ada <__ieee754_log+0x52>
 8007aee:	152c      	asrs	r4, r5, #20
 8007af0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8007af4:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8007af8:	441c      	add	r4, r3
 8007afa:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8007afe:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8007b02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007b06:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8007b0a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8007b0e:	ea42 0105 	orr.w	r1, r2, r5
 8007b12:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8007b16:	2200      	movs	r2, #0
 8007b18:	4bb2      	ldr	r3, [pc, #712]	; (8007de4 <__ieee754_log+0x35c>)
 8007b1a:	f7f8 fbbd 	bl	8000298 <__aeabi_dsub>
 8007b1e:	1cab      	adds	r3, r5, #2
 8007b20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b24:	2b02      	cmp	r3, #2
 8007b26:	4682      	mov	sl, r0
 8007b28:	468b      	mov	fp, r1
 8007b2a:	f04f 0200 	mov.w	r2, #0
 8007b2e:	dc53      	bgt.n	8007bd8 <__ieee754_log+0x150>
 8007b30:	2300      	movs	r3, #0
 8007b32:	f7f8 ffd1 	bl	8000ad8 <__aeabi_dcmpeq>
 8007b36:	b1d0      	cbz	r0, 8007b6e <__ieee754_log+0xe6>
 8007b38:	2c00      	cmp	r4, #0
 8007b3a:	f000 8120 	beq.w	8007d7e <__ieee754_log+0x2f6>
 8007b3e:	4620      	mov	r0, r4
 8007b40:	f7f8 fcf8 	bl	8000534 <__aeabi_i2d>
 8007b44:	a390      	add	r3, pc, #576	; (adr r3, 8007d88 <__ieee754_log+0x300>)
 8007b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b4a:	4606      	mov	r6, r0
 8007b4c:	460f      	mov	r7, r1
 8007b4e:	f7f8 fd5b 	bl	8000608 <__aeabi_dmul>
 8007b52:	a38f      	add	r3, pc, #572	; (adr r3, 8007d90 <__ieee754_log+0x308>)
 8007b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b58:	4604      	mov	r4, r0
 8007b5a:	460d      	mov	r5, r1
 8007b5c:	4630      	mov	r0, r6
 8007b5e:	4639      	mov	r1, r7
 8007b60:	f7f8 fd52 	bl	8000608 <__aeabi_dmul>
 8007b64:	4602      	mov	r2, r0
 8007b66:	460b      	mov	r3, r1
 8007b68:	4620      	mov	r0, r4
 8007b6a:	4629      	mov	r1, r5
 8007b6c:	e7ba      	b.n	8007ae4 <__ieee754_log+0x5c>
 8007b6e:	a38a      	add	r3, pc, #552	; (adr r3, 8007d98 <__ieee754_log+0x310>)
 8007b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b74:	4650      	mov	r0, sl
 8007b76:	4659      	mov	r1, fp
 8007b78:	f7f8 fd46 	bl	8000608 <__aeabi_dmul>
 8007b7c:	4602      	mov	r2, r0
 8007b7e:	460b      	mov	r3, r1
 8007b80:	2000      	movs	r0, #0
 8007b82:	4999      	ldr	r1, [pc, #612]	; (8007de8 <__ieee754_log+0x360>)
 8007b84:	f7f8 fb88 	bl	8000298 <__aeabi_dsub>
 8007b88:	4652      	mov	r2, sl
 8007b8a:	4606      	mov	r6, r0
 8007b8c:	460f      	mov	r7, r1
 8007b8e:	465b      	mov	r3, fp
 8007b90:	4650      	mov	r0, sl
 8007b92:	4659      	mov	r1, fp
 8007b94:	f7f8 fd38 	bl	8000608 <__aeabi_dmul>
 8007b98:	4602      	mov	r2, r0
 8007b9a:	460b      	mov	r3, r1
 8007b9c:	4630      	mov	r0, r6
 8007b9e:	4639      	mov	r1, r7
 8007ba0:	f7f8 fd32 	bl	8000608 <__aeabi_dmul>
 8007ba4:	4606      	mov	r6, r0
 8007ba6:	460f      	mov	r7, r1
 8007ba8:	b914      	cbnz	r4, 8007bb0 <__ieee754_log+0x128>
 8007baa:	4632      	mov	r2, r6
 8007bac:	463b      	mov	r3, r7
 8007bae:	e0a0      	b.n	8007cf2 <__ieee754_log+0x26a>
 8007bb0:	4620      	mov	r0, r4
 8007bb2:	f7f8 fcbf 	bl	8000534 <__aeabi_i2d>
 8007bb6:	a374      	add	r3, pc, #464	; (adr r3, 8007d88 <__ieee754_log+0x300>)
 8007bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bbc:	4680      	mov	r8, r0
 8007bbe:	4689      	mov	r9, r1
 8007bc0:	f7f8 fd22 	bl	8000608 <__aeabi_dmul>
 8007bc4:	a372      	add	r3, pc, #456	; (adr r3, 8007d90 <__ieee754_log+0x308>)
 8007bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bca:	4604      	mov	r4, r0
 8007bcc:	460d      	mov	r5, r1
 8007bce:	4640      	mov	r0, r8
 8007bd0:	4649      	mov	r1, r9
 8007bd2:	f7f8 fd19 	bl	8000608 <__aeabi_dmul>
 8007bd6:	e0a5      	b.n	8007d24 <__ieee754_log+0x29c>
 8007bd8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007bdc:	f7f8 fb5e 	bl	800029c <__adddf3>
 8007be0:	4602      	mov	r2, r0
 8007be2:	460b      	mov	r3, r1
 8007be4:	4650      	mov	r0, sl
 8007be6:	4659      	mov	r1, fp
 8007be8:	f7f8 fe38 	bl	800085c <__aeabi_ddiv>
 8007bec:	e9cd 0100 	strd	r0, r1, [sp]
 8007bf0:	4620      	mov	r0, r4
 8007bf2:	f7f8 fc9f 	bl	8000534 <__aeabi_i2d>
 8007bf6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007bfa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007bfe:	4610      	mov	r0, r2
 8007c00:	4619      	mov	r1, r3
 8007c02:	f7f8 fd01 	bl	8000608 <__aeabi_dmul>
 8007c06:	4602      	mov	r2, r0
 8007c08:	460b      	mov	r3, r1
 8007c0a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007c0e:	f7f8 fcfb 	bl	8000608 <__aeabi_dmul>
 8007c12:	a363      	add	r3, pc, #396	; (adr r3, 8007da0 <__ieee754_log+0x318>)
 8007c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c18:	4680      	mov	r8, r0
 8007c1a:	4689      	mov	r9, r1
 8007c1c:	f7f8 fcf4 	bl	8000608 <__aeabi_dmul>
 8007c20:	a361      	add	r3, pc, #388	; (adr r3, 8007da8 <__ieee754_log+0x320>)
 8007c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c26:	f7f8 fb39 	bl	800029c <__adddf3>
 8007c2a:	4642      	mov	r2, r8
 8007c2c:	464b      	mov	r3, r9
 8007c2e:	f7f8 fceb 	bl	8000608 <__aeabi_dmul>
 8007c32:	a35f      	add	r3, pc, #380	; (adr r3, 8007db0 <__ieee754_log+0x328>)
 8007c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c38:	f7f8 fb30 	bl	800029c <__adddf3>
 8007c3c:	4642      	mov	r2, r8
 8007c3e:	464b      	mov	r3, r9
 8007c40:	f7f8 fce2 	bl	8000608 <__aeabi_dmul>
 8007c44:	a35c      	add	r3, pc, #368	; (adr r3, 8007db8 <__ieee754_log+0x330>)
 8007c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c4a:	f7f8 fb27 	bl	800029c <__adddf3>
 8007c4e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c52:	f7f8 fcd9 	bl	8000608 <__aeabi_dmul>
 8007c56:	a35a      	add	r3, pc, #360	; (adr r3, 8007dc0 <__ieee754_log+0x338>)
 8007c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c5c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007c60:	4640      	mov	r0, r8
 8007c62:	4649      	mov	r1, r9
 8007c64:	f7f8 fcd0 	bl	8000608 <__aeabi_dmul>
 8007c68:	a357      	add	r3, pc, #348	; (adr r3, 8007dc8 <__ieee754_log+0x340>)
 8007c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c6e:	f7f8 fb15 	bl	800029c <__adddf3>
 8007c72:	4642      	mov	r2, r8
 8007c74:	464b      	mov	r3, r9
 8007c76:	f7f8 fcc7 	bl	8000608 <__aeabi_dmul>
 8007c7a:	a355      	add	r3, pc, #340	; (adr r3, 8007dd0 <__ieee754_log+0x348>)
 8007c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c80:	f7f8 fb0c 	bl	800029c <__adddf3>
 8007c84:	4642      	mov	r2, r8
 8007c86:	464b      	mov	r3, r9
 8007c88:	f7f8 fcbe 	bl	8000608 <__aeabi_dmul>
 8007c8c:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 8007c90:	4602      	mov	r2, r0
 8007c92:	460b      	mov	r3, r1
 8007c94:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8007c98:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c9c:	f7f8 fafe 	bl	800029c <__adddf3>
 8007ca0:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 8007ca4:	3551      	adds	r5, #81	; 0x51
 8007ca6:	4335      	orrs	r5, r6
 8007ca8:	2d00      	cmp	r5, #0
 8007caa:	4680      	mov	r8, r0
 8007cac:	4689      	mov	r9, r1
 8007cae:	dd48      	ble.n	8007d42 <__ieee754_log+0x2ba>
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	4b4d      	ldr	r3, [pc, #308]	; (8007de8 <__ieee754_log+0x360>)
 8007cb4:	4650      	mov	r0, sl
 8007cb6:	4659      	mov	r1, fp
 8007cb8:	f7f8 fca6 	bl	8000608 <__aeabi_dmul>
 8007cbc:	4652      	mov	r2, sl
 8007cbe:	465b      	mov	r3, fp
 8007cc0:	f7f8 fca2 	bl	8000608 <__aeabi_dmul>
 8007cc4:	4602      	mov	r2, r0
 8007cc6:	460b      	mov	r3, r1
 8007cc8:	4606      	mov	r6, r0
 8007cca:	460f      	mov	r7, r1
 8007ccc:	4640      	mov	r0, r8
 8007cce:	4649      	mov	r1, r9
 8007cd0:	f7f8 fae4 	bl	800029c <__adddf3>
 8007cd4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007cd8:	f7f8 fc96 	bl	8000608 <__aeabi_dmul>
 8007cdc:	4680      	mov	r8, r0
 8007cde:	4689      	mov	r9, r1
 8007ce0:	b964      	cbnz	r4, 8007cfc <__ieee754_log+0x274>
 8007ce2:	4602      	mov	r2, r0
 8007ce4:	460b      	mov	r3, r1
 8007ce6:	4630      	mov	r0, r6
 8007ce8:	4639      	mov	r1, r7
 8007cea:	f7f8 fad5 	bl	8000298 <__aeabi_dsub>
 8007cee:	4602      	mov	r2, r0
 8007cf0:	460b      	mov	r3, r1
 8007cf2:	4650      	mov	r0, sl
 8007cf4:	4659      	mov	r1, fp
 8007cf6:	f7f8 facf 	bl	8000298 <__aeabi_dsub>
 8007cfa:	e6da      	b.n	8007ab2 <__ieee754_log+0x2a>
 8007cfc:	a322      	add	r3, pc, #136	; (adr r3, 8007d88 <__ieee754_log+0x300>)
 8007cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d06:	f7f8 fc7f 	bl	8000608 <__aeabi_dmul>
 8007d0a:	a321      	add	r3, pc, #132	; (adr r3, 8007d90 <__ieee754_log+0x308>)
 8007d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d10:	4604      	mov	r4, r0
 8007d12:	460d      	mov	r5, r1
 8007d14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d18:	f7f8 fc76 	bl	8000608 <__aeabi_dmul>
 8007d1c:	4642      	mov	r2, r8
 8007d1e:	464b      	mov	r3, r9
 8007d20:	f7f8 fabc 	bl	800029c <__adddf3>
 8007d24:	4602      	mov	r2, r0
 8007d26:	460b      	mov	r3, r1
 8007d28:	4630      	mov	r0, r6
 8007d2a:	4639      	mov	r1, r7
 8007d2c:	f7f8 fab4 	bl	8000298 <__aeabi_dsub>
 8007d30:	4652      	mov	r2, sl
 8007d32:	465b      	mov	r3, fp
 8007d34:	f7f8 fab0 	bl	8000298 <__aeabi_dsub>
 8007d38:	4602      	mov	r2, r0
 8007d3a:	460b      	mov	r3, r1
 8007d3c:	4620      	mov	r0, r4
 8007d3e:	4629      	mov	r1, r5
 8007d40:	e7d9      	b.n	8007cf6 <__ieee754_log+0x26e>
 8007d42:	4602      	mov	r2, r0
 8007d44:	460b      	mov	r3, r1
 8007d46:	4650      	mov	r0, sl
 8007d48:	4659      	mov	r1, fp
 8007d4a:	f7f8 faa5 	bl	8000298 <__aeabi_dsub>
 8007d4e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d52:	f7f8 fc59 	bl	8000608 <__aeabi_dmul>
 8007d56:	4606      	mov	r6, r0
 8007d58:	460f      	mov	r7, r1
 8007d5a:	2c00      	cmp	r4, #0
 8007d5c:	f43f af25 	beq.w	8007baa <__ieee754_log+0x122>
 8007d60:	a309      	add	r3, pc, #36	; (adr r3, 8007d88 <__ieee754_log+0x300>)
 8007d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d6a:	f7f8 fc4d 	bl	8000608 <__aeabi_dmul>
 8007d6e:	a308      	add	r3, pc, #32	; (adr r3, 8007d90 <__ieee754_log+0x308>)
 8007d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d74:	4604      	mov	r4, r0
 8007d76:	460d      	mov	r5, r1
 8007d78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d7c:	e729      	b.n	8007bd2 <__ieee754_log+0x14a>
 8007d7e:	2000      	movs	r0, #0
 8007d80:	2100      	movs	r1, #0
 8007d82:	e696      	b.n	8007ab2 <__ieee754_log+0x2a>
 8007d84:	f3af 8000 	nop.w
 8007d88:	fee00000 	.word	0xfee00000
 8007d8c:	3fe62e42 	.word	0x3fe62e42
 8007d90:	35793c76 	.word	0x35793c76
 8007d94:	3dea39ef 	.word	0x3dea39ef
 8007d98:	55555555 	.word	0x55555555
 8007d9c:	3fd55555 	.word	0x3fd55555
 8007da0:	df3e5244 	.word	0xdf3e5244
 8007da4:	3fc2f112 	.word	0x3fc2f112
 8007da8:	96cb03de 	.word	0x96cb03de
 8007dac:	3fc74664 	.word	0x3fc74664
 8007db0:	94229359 	.word	0x94229359
 8007db4:	3fd24924 	.word	0x3fd24924
 8007db8:	55555593 	.word	0x55555593
 8007dbc:	3fe55555 	.word	0x3fe55555
 8007dc0:	d078c69f 	.word	0xd078c69f
 8007dc4:	3fc39a09 	.word	0x3fc39a09
 8007dc8:	1d8e78af 	.word	0x1d8e78af
 8007dcc:	3fcc71c5 	.word	0x3fcc71c5
 8007dd0:	9997fa04 	.word	0x9997fa04
 8007dd4:	3fd99999 	.word	0x3fd99999
 8007dd8:	c3500000 	.word	0xc3500000
 8007ddc:	43500000 	.word	0x43500000
 8007de0:	7fefffff 	.word	0x7fefffff
 8007de4:	3ff00000 	.word	0x3ff00000
 8007de8:	3fe00000 	.word	0x3fe00000

08007dec <copysign>:
 8007dec:	ec51 0b10 	vmov	r0, r1, d0
 8007df0:	ee11 0a90 	vmov	r0, s3
 8007df4:	ee10 2a10 	vmov	r2, s0
 8007df8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007dfc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8007e00:	ea41 0300 	orr.w	r3, r1, r0
 8007e04:	ec43 2b10 	vmov	d0, r2, r3
 8007e08:	4770      	bx	lr
	...

08007e0c <_init>:
 8007e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e0e:	bf00      	nop
 8007e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e12:	bc08      	pop	{r3}
 8007e14:	469e      	mov	lr, r3
 8007e16:	4770      	bx	lr

08007e18 <_fini>:
 8007e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e1a:	bf00      	nop
 8007e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e1e:	bc08      	pop	{r3}
 8007e20:	469e      	mov	lr, r3
 8007e22:	4770      	bx	lr
